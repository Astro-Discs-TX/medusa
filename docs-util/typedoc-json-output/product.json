{
	"id": 0,
	"name": "product",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 587,
			"name": "ProductStatus",
			"variant": "declaration",
			"kind": 8,
			"flags": {},
			"children": [
				{
					"id": 588,
					"name": "DRAFT",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 8,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L8"
						}
					],
					"type": {
						"type": "literal",
						"value": "draft"
					}
				},
				{
					"id": 589,
					"name": "PROPOSED",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 9,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L9"
						}
					],
					"type": {
						"type": "literal",
						"value": "proposed"
					}
				},
				{
					"id": 590,
					"name": "PUBLISHED",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 10,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L10"
						}
					],
					"type": {
						"type": "literal",
						"value": "published"
					}
				},
				{
					"id": 591,
					"name": "REJECTED",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 11,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L11"
						}
					],
					"type": {
						"type": "literal",
						"value": "rejected"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						588,
						589,
						590,
						591
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 7,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L7"
				}
			]
		},
		{
			"id": 1223,
			"name": "ArrayLike",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1224,
					"name": "length",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1564,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1224
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1563,
					"character": 10
				}
			],
			"typeParameters": [
				{
					"id": 1225,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"indexSignature": {
				"id": 1226,
				"name": "__index",
				"variant": "signature",
				"kind": 8192,
				"flags": {
					"isExternal": true
				},
				"sources": [
					{
						"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
						"line": 1565,
						"character": 4
					}
				],
				"parameters": [
					{
						"id": 1227,
						"name": "n",
						"variant": "param",
						"kind": 32768,
						"flags": {
							"isExternal": true
						},
						"type": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				],
				"type": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				}
			}
		},
		{
			"id": 597,
			"name": "BaseFilterable",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An object used to allow specifying flexible queries with and/or conditions."
					}
				]
			},
			"children": [
				{
					"id": 598,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L14"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": -1,
									"name": "T",
									"refersToTypeParameter": true
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					}
				},
				{
					"id": 599,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L18"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": -1,
									"name": "T",
									"refersToTypeParameter": true
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						598,
						599
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/dal/index.ts",
					"line": 10,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L10"
				}
			],
			"typeParameters": [
				{
					"id": 600,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 287,
					"name": "FilterableProductProps"
				},
				{
					"type": "reference",
					"target": 308,
					"name": "FilterableProductTagProps"
				},
				{
					"type": "reference",
					"target": 323,
					"name": "FilterableProductTypeProps"
				},
				{
					"type": "reference",
					"target": 343,
					"name": "FilterableProductOptionProps"
				},
				{
					"type": "reference",
					"target": 382,
					"name": "FilterableProductVariantProps"
				},
				{
					"type": "reference",
					"target": 438,
					"name": "FilterableProductCollectionProps"
				},
				{
					"type": "reference",
					"target": 468,
					"name": "FilterableProductCategoryProps"
				}
			]
		},
		{
			"id": 669,
			"name": "Buffer",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 981,
					"name": "BYTES_PER_ELEMENT",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The size in bytes of each element in the array."
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2151,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.BYTES_PER_ELEMENT"
					}
				},
				{
					"id": 1130,
					"name": "[toStringTag]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
							"line": 284,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": "Uint8Array"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.[toStringTag]"
					}
				},
				{
					"id": 982,
					"name": "buffer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ArrayBuffer instance referenced by the array."
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2156,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"target": 1222,
						"name": "ArrayBufferLike",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.buffer"
					}
				},
				{
					"id": 983,
					"name": "byteLength",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The length in bytes of the array."
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2161,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.byteLength"
					}
				},
				{
					"id": 984,
					"name": "byteOffset",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The offset in bytes of the array."
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2166,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.byteOffset"
					}
				},
				{
					"id": 1038,
					"name": "length",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The length of the array."
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2265,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.length"
					}
				},
				{
					"id": 1128,
					"name": "[iterator]",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 270,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1129,
							"name": "[iterator]",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 270,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 1209,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "IterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.[iterator]"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.[iterator]"
					}
				},
				{
					"id": 1131,
					"name": "at",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/globals.d.ts",
							"line": 114,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1132,
							"name": "at",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/globals.d.ts",
									"line": 114,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1133,
									"name": "index",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.at"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.at"
					}
				},
				{
					"id": 696,
					"name": "compare",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 807,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 697,
							"name": "compare",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Compares "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " with "
									},
									{
										"kind": "code",
										"text": "`target`"
									},
									{
										"kind": "text",
										"text": " and returns a number indicating whether "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": "comes before, after, or is the same as "
									},
									{
										"kind": "code",
										"text": "`target`"
									},
									{
										"kind": "text",
										"text": " in sort order.\nComparison is based on the actual sequence of bytes in each "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": ".\n\n* "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": " is returned if "
									},
									{
										"kind": "code",
										"text": "`target`"
									},
									{
										"kind": "text",
										"text": " is the same as "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": "\n* "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": " is returned if "
									},
									{
										"kind": "code",
										"text": "`target`"
									},
									{
										"kind": "text",
										"text": " should come _before_"
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " when sorted.\n* "
									},
									{
										"kind": "code",
										"text": "`-1`"
									},
									{
										"kind": "text",
										"text": " is returned if "
									},
									{
										"kind": "code",
										"text": "`target`"
									},
									{
										"kind": "text",
										"text": " should come _after_"
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " when sorted.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from('ABC');\nconst buf2 = Buffer.from('BCD');\nconst buf3 = Buffer.from('ABCD');\n\nconsole.log(buf1.compare(buf1));\n// Prints: 0\nconsole.log(buf1.compare(buf2));\n// Prints: -1\nconsole.log(buf1.compare(buf3));\n// Prints: -1\nconsole.log(buf2.compare(buf1));\n// Prints: 1\nconsole.log(buf2.compare(buf3));\n// Prints: 1\nconsole.log([buf1, buf2, buf3].sort(Buffer.compare));\n// Prints: [ <Buffer 41 42 43>, <Buffer 41 42 43 44>, <Buffer 42 43 44> ]\n// (This result is equal to: [buf1, buf3, buf2].)\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe optional "
									},
									{
										"kind": "code",
										"text": "`targetStart`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`targetEnd`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`sourceStart`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`sourceEnd`"
									},
									{
										"kind": "text",
										"text": "arguments can be used to limit the comparison to specific ranges within "
									},
									{
										"kind": "code",
										"text": "`target`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " respectively.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\n\nconsole.log(buf1.compare(buf2, 5, 9, 0, 4));\n// Prints: 0\nconsole.log(buf1.compare(buf2, 0, 6, 4));\n// Prints: -1\nconsole.log(buf1.compare(buf2, 5, 6, 5));\n// Prints: 1\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`ERR_OUT_OF_RANGE`"
									},
									{
										"kind": "text",
										"text": " is thrown if "
									},
									{
										"kind": "code",
										"text": "`targetStart < 0`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`sourceStart < 0`"
									},
									{
										"kind": "text",
										"text": ","
									},
									{
										"kind": "code",
										"text": "`targetEnd > target.byteLength`"
									},
									{
										"kind": "text",
										"text": ", or "
									},
									{
										"kind": "code",
										"text": "`sourceEnd > source.byteLength`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.13"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 807,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 698,
									"name": "target",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Uint8Array",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": " with which to compare "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								},
								{
									"id": 699,
									"name": "targetStart",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The offset within "
											},
											{
												"kind": "code",
												"text": "`target`"
											},
											{
												"kind": "text",
												"text": " at which to begin comparison."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 700,
									"name": "targetEnd",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The offset within "
											},
											{
												"kind": "code",
												"text": "`target`"
											},
											{
												"kind": "text",
												"text": " at which to end comparison (not inclusive)."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 701,
									"name": "sourceStart",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The offset within "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": " at which to begin comparison."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 702,
									"name": "sourceEnd",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The offset within "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": " at which to end comparison (not inclusive)."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": 0
									},
									{
										"type": "literal",
										"value": 1
									},
									{
										"type": "literal",
										"value": -1
									}
								]
							}
						}
					]
				},
				{
					"id": 703,
					"name": "copy",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 867,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 704,
							"name": "copy",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Copies data from a region of "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " to a region in "
									},
									{
										"kind": "code",
										"text": "`target`"
									},
									{
										"kind": "text",
										"text": ", even if the "
									},
									{
										"kind": "code",
										"text": "`target`"
									},
									{
										"kind": "text",
										"text": "memory region overlaps with "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": ".\n\n["
									},
									{
										"kind": "code",
										"text": "`TypedArray.prototype.set()`"
									},
									{
										"kind": "text",
										"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set) performs the same operation, and is available\nfor all TypedArrays, including Node.js "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "s, although it takes\ndifferent function arguments.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\n// Create two `Buffer` instances.\nconst buf1 = Buffer.allocUnsafe(26);\nconst buf2 = Buffer.allocUnsafe(26).fill('!');\n\nfor (let i = 0; i < 26; i++) {\n  // 97 is the decimal ASCII value for 'a'.\n  buf1[i] = i + 97;\n}\n\n// Copy `buf1` bytes 16 through 19 into `buf2` starting at byte 8 of `buf2`.\nbuf1.copy(buf2, 8, 16, 20);\n// This is equivalent to:\n// buf2.set(buf1.subarray(16, 20), 8);\n\nconsole.log(buf2.toString('ascii', 0, 25));\n// Prints: !!!!!!!!qrst!!!!!!!!!!!!!\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\n// Create a `Buffer` and copy data from one region to an overlapping region\n// within the same `Buffer`.\n\nconst buf = Buffer.allocUnsafe(26);\n\nfor (let i = 0; i < 26; i++) {\n  // 97 is the decimal ASCII value for 'a'.\n  buf[i] = i + 97;\n}\n\nbuf.copy(buf, 0, 4, 10);\n\nconsole.log(buf.toString());\n// Prints: efghijghijklmnopqrstuvwxyz\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.90"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The number of bytes copied."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 867,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 705,
									"name": "target",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Uint8Array",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": " to copy into."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								},
								{
									"id": 706,
									"name": "targetStart",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The offset within "
											},
											{
												"kind": "code",
												"text": "`target`"
											},
											{
												"kind": "text",
												"text": " at which to begin writing."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 707,
									"name": "sourceStart",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The offset within "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": " from which to begin copying."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 708,
									"name": "sourceEnd",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The offset within "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": " at which to stop copying (not inclusive)."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 985,
					"name": "copyWithin",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2177,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 986,
							"name": "copyWithin",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target"
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2177,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 987,
									"name": "target",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If target is negative, it is treated as length+target where length is the\nlength of the array."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 988,
									"name": "start",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 989,
									"name": "end",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If not specified, length of the this object is used as its default value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.copyWithin"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.copyWithin"
					}
				},
				{
					"id": 970,
					"name": "entries",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 2226,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 971,
							"name": "entries",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of "
									},
									{
										"kind": "code",
										"text": "`[index, byte]`"
									},
									{
										"kind": "text",
										"text": " pairs from the contents\nof "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\n// Log the entire contents of a `Buffer`.\n\nconst buf = Buffer.from('buffer');\n\nfor (const pair of buf.entries()) {\n  console.log(pair);\n}\n// Prints:\n//   [0, 98]\n//   [1, 117]\n//   [2, 102]\n//   [3, 102]\n//   [4, 101]\n//   [5, 114]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.1.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 2226,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"target": 1209,
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "IterableIterator",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.entries"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.entries"
					}
				},
				{
					"id": 693,
					"name": "equals",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 752,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 694,
							"name": "equals",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if both "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`otherBuffer`"
									},
									{
										"kind": "text",
										"text": " have exactly the same bytes,"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise. Equivalent to "
									},
									{
										"kind": "code",
										"text": "`buf.compare(otherBuffer) === 0`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from('ABC');\nconst buf2 = Buffer.from('414243', 'hex');\nconst buf3 = Buffer.from('ABCD');\n\nconsole.log(buf1.equals(buf2));\n// Prints: true\nconsole.log(buf1.equals(buf3));\n// Prints: false\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.13"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 752,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 695,
									"name": "otherBuffer",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Uint8Array",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": " with which to compare "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 990,
					"name": "every",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2187,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 991,
							"name": "every",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Determines whether all the members of an array satisfy the specified test."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2187,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 992,
									"name": "predicate",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 993,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2187,
													"character": 21
												}
											],
											"signatures": [
												{
													"id": 994,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2187,
															"character": 21
														}
													],
													"parameters": [
														{
															"id": 995,
															"name": "value",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 996,
															"name": "index",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 997,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 998,
									"name": "thisArg",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.every"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.every"
					}
				},
				{
					"id": 954,
					"name": "fill",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 2064,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 955,
							"name": "fill",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Fills "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " with the specified "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": ". If the "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`end`"
									},
									{
										"kind": "text",
										"text": " are not given,\nthe entire "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " will be filled:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\n// Fill a `Buffer` with the ASCII character 'h'.\n\nconst b = Buffer.allocUnsafe(50).fill('h');\n\nconsole.log(b.toString());\n// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\n\n// Fill a buffer with empty string\nconst c = Buffer.allocUnsafe(5).fill('');\n\nconsole.log(c.fill(''));\n// Prints: <Buffer 00 00 00 00 00>\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is coerced to a "
									},
									{
										"kind": "code",
										"text": "`uint32`"
									},
									{
										"kind": "text",
										"text": " value if it is not a string, "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": ", or\ninteger. If the resulting integer is greater than "
									},
									{
										"kind": "code",
										"text": "`255`"
									},
									{
										"kind": "text",
										"text": " (decimal), "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " will be\nfilled with "
									},
									{
										"kind": "code",
										"text": "`value &#x26; 255`"
									},
									{
										"kind": "text",
										"text": ".\n\nIf the final write of a "
									},
									{
										"kind": "code",
										"text": "`fill()`"
									},
									{
										"kind": "text",
										"text": " operation falls on a multi-byte character,\nthen only the bytes of that character that fit into "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " are written:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\n// Fill a `Buffer` with character that takes up two bytes in UTF-8.\n\nconsole.log(Buffer.allocUnsafe(5).fill('\\u0222'));\n// Prints: <Buffer c8 a2 c8 a2 c8>\n```"
									},
									{
										"kind": "text",
										"text": "\n\nIf "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " contains invalid characters, it is truncated; if no valid\nfill data remains, an exception is thrown:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(5);\n\nconsole.log(buf.fill('a'));\n// Prints: <Buffer 61 61 61 61 61>\nconsole.log(buf.fill('aazz', 'hex'));\n// Prints: <Buffer aa aa aa aa aa>\nconsole.log(buf.fill('zz', 'hex'));\n// Throws an exception.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A reference to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 2064,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 956,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The value with which to fill "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": ". Empty value (string, Uint8Array, Buffer) is coerced to "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 957,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to fill "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 958,
									"name": "end",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Where to stop filling "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": " (not inclusive)."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 959,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The encoding for "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " if "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " is a string."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.fill"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.fill"
					}
				},
				{
					"id": 999,
					"name": "filter",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2206,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1000,
							"name": "filter",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the elements of an array that meet the condition specified in a callback function."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2206,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1001,
									"name": "predicate",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The filter method calls\nthe predicate function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1002,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2206,
													"character": 22
												}
											],
											"signatures": [
												{
													"id": 1003,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2206,
															"character": 22
														}
													],
													"parameters": [
														{
															"id": 1004,
															"name": "value",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1005,
															"name": "index",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1006,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								},
								{
									"id": 1007,
									"name": "thisArg",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.filter"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.filter"
					}
				},
				{
					"id": 1008,
					"name": "find",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2217,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1009,
							"name": "find",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2217,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1010,
									"name": "predicate",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1011,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2217,
													"character": 20
												}
											],
											"signatures": [
												{
													"id": 1012,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2217,
															"character": 20
														}
													],
													"parameters": [
														{
															"id": 1013,
															"name": "value",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1014,
															"name": "index",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1015,
															"name": "obj",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 1016,
									"name": "thisArg",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.find"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.find"
					}
				},
				{
					"id": 1017,
					"name": "findIndex",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2228,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1018,
							"name": "findIndex",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the index of the first element in the array where predicate is true, and -1\notherwise."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2228,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1019,
									"name": "predicate",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1020,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2228,
													"character": 25
												}
											],
											"signatures": [
												{
													"id": 1021,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2228,
															"character": 25
														}
													],
													"parameters": [
														{
															"id": 1022,
															"name": "value",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1023,
															"name": "index",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1024,
															"name": "obj",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								},
								{
									"id": 1025,
									"name": "thisArg",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.findIndex"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.findIndex"
					}
				},
				{
					"id": 1026,
					"name": "forEach",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2237,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1027,
							"name": "forEach",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Performs the specified action for each element in an array."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2237,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1028,
									"name": "callbackfn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. forEach calls the\ncallbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1029,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2237,
													"character": 24
												}
											],
											"signatures": [
												{
													"id": 1030,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2237,
															"character": 24
														}
													],
													"parameters": [
														{
															"id": 1031,
															"name": "value",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1032,
															"name": "index",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1033,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 1034,
									"name": "thisArg",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the callbackfn function.\nIf thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.forEach"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.forEach"
					}
				},
				{
					"id": 972,
					"name": "includes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 2256,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 973,
							"name": "includes",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Equivalent to "
									},
									{
										"kind": "code",
										"text": "`buf.indexOf() !== -1`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('this is a buffer');\n\nconsole.log(buf.includes('this'));\n// Prints: true\nconsole.log(buf.includes('is'));\n// Prints: true\nconsole.log(buf.includes(Buffer.from('a buffer')));\n// Prints: true\nconsole.log(buf.includes(97));\n// Prints: true (97 is the decimal ASCII value for 'a')\nconsole.log(buf.includes(Buffer.from('a buffer example')));\n// Prints: false\nconsole.log(buf.includes(Buffer.from('a buffer example').slice(0, 8)));\n// Prints: true\nconsole.log(buf.includes('this', 4));\n// Prints: false\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v5.3.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": " if "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " was found in "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": " otherwise."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 2256,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 974,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "What to search for."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"target": 668,
												"name": "Buffer",
												"package": "@types/node",
												"qualifiedName": "__global.Buffer"
											}
										]
									}
								},
								{
									"id": 975,
									"name": "byteOffset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Where to begin searching in "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": ". If negative, then offset is calculated from the end of "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 976,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " is a string, this is its encoding."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.includes"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.includes"
					}
				},
				{
					"id": 960,
					"name": "indexOf",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 2133,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 961,
							"name": "indexOf",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is:\n\n* a string, "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is interpreted according to the character encoding in"
									},
									{
										"kind": "code",
										"text": "`encoding`"
									},
									{
										"kind": "text",
										"text": ".\n* a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " or ["
									},
									{
										"kind": "code",
										"text": "`Uint8Array`"
									},
									{
										"kind": "text",
										"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " will be used in its entirety.\nTo compare a partial "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": ", use "
									},
									{
										"kind": "code",
										"text": "`buf.subarray`"
									},
									{
										"kind": "text",
										"text": ".\n* a number, "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " will be interpreted as an unsigned 8-bit integer\nvalue between "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`255`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('this is a buffer');\n\nconsole.log(buf.indexOf('this'));\n// Prints: 0\nconsole.log(buf.indexOf('is'));\n// Prints: 2\nconsole.log(buf.indexOf(Buffer.from('a buffer')));\n// Prints: 8\nconsole.log(buf.indexOf(97));\n// Prints: 8 (97 is the decimal ASCII value for 'a')\nconsole.log(buf.indexOf(Buffer.from('a buffer example')));\n// Prints: -1\nconsole.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));\n// Prints: 8\n\nconst utf16Buffer = Buffer.from('\\u039a\\u0391\\u03a3\\u03a3\\u0395', 'utf16le');\n\nconsole.log(utf16Buffer.indexOf('\\u03a3', 0, 'utf16le'));\n// Prints: 4\nconsole.log(utf16Buffer.indexOf('\\u03a3', -4, 'utf16le'));\n// Prints: 6\n```"
									},
									{
										"kind": "text",
										"text": "\n\nIf "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is not a string, number, or "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": ", this method will throw a"
									},
									{
										"kind": "code",
										"text": "`TypeError`"
									},
									{
										"kind": "text",
										"text": ". If "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is a number, it will be coerced to a valid byte value,\nan integer between 0 and 255.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`byteOffset`"
									},
									{
										"kind": "text",
										"text": " is not a number, it will be coerced to a number. If the result\nof coercion is "
									},
									{
										"kind": "code",
										"text": "`NaN`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ", then the entire buffer will be searched. This\nbehavior matches ["
									},
									{
										"kind": "code",
										"text": "`String.prototype.indexOf()`"
									},
									{
										"kind": "text",
										"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf).\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst b = Buffer.from('abcdef');\n\n// Passing a value that's a number, but not a valid byte.\n// Prints: 2, equivalent to searching for 99 or 'c'.\nconsole.log(b.indexOf(99.9));\nconsole.log(b.indexOf(256 + 99));\n\n// Passing a byteOffset that coerces to NaN or 0.\n// Prints: 1, searching the whole buffer.\nconsole.log(b.indexOf('b', undefined));\nconsole.log(b.indexOf('b', {}));\nconsole.log(b.indexOf('b', null));\nconsole.log(b.indexOf('b', []));\n```"
									},
									{
										"kind": "text",
										"text": "\n\nIf "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is an empty string or empty "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`byteOffset`"
									},
									{
										"kind": "text",
										"text": " is less\nthan "
									},
									{
										"kind": "code",
										"text": "`buf.length`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`byteOffset`"
									},
									{
										"kind": "text",
										"text": " will be returned. If "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is empty and"
									},
									{
										"kind": "code",
										"text": "`byteOffset`"
									},
									{
										"kind": "text",
										"text": " is at least "
									},
									{
										"kind": "code",
										"text": "`buf.length`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`buf.length`"
									},
									{
										"kind": "text",
										"text": " will be returned."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The index of the first occurrence of "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " in "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": ", or "
											},
											{
												"kind": "code",
												"text": "`-1`"
											},
											{
												"kind": "text",
												"text": " if "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": " does not contain "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 2133,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 962,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "What to search for."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 963,
									"name": "byteOffset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Where to begin searching in "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": ". If negative, then offset is calculated from the end of "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 964,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " is a string, this is the encoding used to determine the binary representation of the string that will be searched for in "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.indexOf"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.indexOf"
					}
				},
				{
					"id": 1035,
					"name": "join",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2252,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1036,
							"name": "join",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds all the elements of an array separated by the specified separator string."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2252,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1037,
									"name": "separator",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A string used to separate one element of an array from the next in the\nresulting String. If omitted, the array elements are separated with a comma."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.join"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.join"
					}
				},
				{
					"id": 977,
					"name": "keys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 2278,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 978,
							"name": "keys",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " keys (indices).\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('buffer');\n\nfor (const key of buf.keys()) {\n  console.log(key);\n}\n// Prints:\n//   0\n//   1\n//   2\n//   3\n//   4\n//   5\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.1.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 2278,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"target": 1209,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "IterableIterator",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.keys"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.keys"
					}
				},
				{
					"id": 965,
					"name": "lastIndexOf",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 2201,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 966,
							"name": "lastIndexOf",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Identical to "
									},
									{
										"kind": "code",
										"text": "`buf.indexOf()`"
									},
									{
										"kind": "text",
										"text": ", except the last occurrence of "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is found\nrather than the first occurrence.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('this buffer is a buffer');\n\nconsole.log(buf.lastIndexOf('this'));\n// Prints: 0\nconsole.log(buf.lastIndexOf('buffer'));\n// Prints: 17\nconsole.log(buf.lastIndexOf(Buffer.from('buffer')));\n// Prints: 17\nconsole.log(buf.lastIndexOf(97));\n// Prints: 15 (97 is the decimal ASCII value for 'a')\nconsole.log(buf.lastIndexOf(Buffer.from('yolo')));\n// Prints: -1\nconsole.log(buf.lastIndexOf('buffer', 5));\n// Prints: 5\nconsole.log(buf.lastIndexOf('buffer', 4));\n// Prints: -1\n\nconst utf16Buffer = Buffer.from('\\u039a\\u0391\\u03a3\\u03a3\\u0395', 'utf16le');\n\nconsole.log(utf16Buffer.lastIndexOf('\\u03a3', undefined, 'utf16le'));\n// Prints: 6\nconsole.log(utf16Buffer.lastIndexOf('\\u03a3', -5, 'utf16le'));\n// Prints: 4\n```"
									},
									{
										"kind": "text",
										"text": "\n\nIf "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is not a string, number, or "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": ", this method will throw a"
									},
									{
										"kind": "code",
										"text": "`TypeError`"
									},
									{
										"kind": "text",
										"text": ". If "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is a number, it will be coerced to a valid byte value,\nan integer between 0 and 255.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`byteOffset`"
									},
									{
										"kind": "text",
										"text": " is not a number, it will be coerced to a number. Any arguments\nthat coerce to "
									},
									{
										"kind": "code",
										"text": "`NaN`"
									},
									{
										"kind": "text",
										"text": ", like "
									},
									{
										"kind": "code",
										"text": "`{}`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": ", will search the whole buffer.\nThis behavior matches ["
									},
									{
										"kind": "code",
										"text": "`String.prototype.lastIndexOf()`"
									},
									{
										"kind": "text",
										"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf).\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst b = Buffer.from('abcdef');\n\n// Passing a value that's a number, but not a valid byte.\n// Prints: 2, equivalent to searching for 99 or 'c'.\nconsole.log(b.lastIndexOf(99.9));\nconsole.log(b.lastIndexOf(256 + 99));\n\n// Passing a byteOffset that coerces to NaN.\n// Prints: 1, searching the whole buffer.\nconsole.log(b.lastIndexOf('b', undefined));\nconsole.log(b.lastIndexOf('b', {}));\n\n// Passing a byteOffset that coerces to 0.\n// Prints: -1, equivalent to passing 0.\nconsole.log(b.lastIndexOf('b', null));\nconsole.log(b.lastIndexOf('b', []));\n```"
									},
									{
										"kind": "text",
										"text": "\n\nIf "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is an empty string or empty "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`byteOffset`"
									},
									{
										"kind": "text",
										"text": " will be returned."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The index of the last occurrence of "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " in "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": ", or "
											},
											{
												"kind": "code",
												"text": "`-1`"
											},
											{
												"kind": "text",
												"text": " if "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": " does not contain "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 2201,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 967,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "What to search for."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 968,
									"name": "byteOffset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Where to begin searching in "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": ". If negative, then offset is calculated from the end of "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 969,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " is a string, this is the encoding used to determine the binary representation of the string that will be searched for in "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.lastIndexOf"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.lastIndexOf"
					}
				},
				{
					"id": 1039,
					"name": "map",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2275,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1040,
							"name": "map",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls a defined callback function on each element of an array, and returns an array that\ncontains the results."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2275,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1041,
									"name": "callbackfn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The map method calls the\ncallbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1042,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2275,
													"character": 20
												}
											],
											"signatures": [
												{
													"id": 1043,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2275,
															"character": 20
														}
													],
													"parameters": [
														{
															"id": 1044,
															"name": "value",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1045,
															"name": "index",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1046,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											]
										}
									}
								},
								{
									"id": 1047,
									"name": "thisArg",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the callbackfn function.\nIf thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.map"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.map"
					}
				},
				{
					"id": 783,
					"name": "readBigInt64BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1206,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 784,
							"name": "readBigInt64BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a signed, big-endian 64-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nIntegers read from a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " are interpreted as two's complement signed\nvalues."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v12.0.0, v10.20.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1206,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 785,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy: "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					]
				},
				{
					"id": 786,
					"name": "readBigInt64LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1215,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 787,
							"name": "readBigInt64LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a signed, little-endian 64-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified"
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nIntegers read from a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " are interpreted as two's complement signed\nvalues."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v12.0.0, v10.20.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1215,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 788,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy: "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					]
				},
				{
					"id": 771,
					"name": "readBigUInt64BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1170,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 772,
							"name": "readBigUInt64BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads an unsigned, big-endian 64-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified"
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`readBigUint64BE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\n\nconsole.log(buf.readBigUInt64BE(0));\n// Prints: 4294967295n\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v12.0.0, v10.20.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1170,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 773,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy: "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					]
				},
				{
					"id": 777,
					"name": "readBigUInt64LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1192,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 778,
							"name": "readBigUInt64LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads an unsigned, little-endian 64-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified"
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`readBigUint64LE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\n\nconsole.log(buf.readBigUInt64LE(0));\n// Prints: 18446744069414584320n\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v12.0.0, v10.20.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1192,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 779,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy: "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					]
				},
				{
					"id": 774,
					"name": "readBigUint64BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1175,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 775,
							"name": "readBigUint64BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.readBigUInt64BE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.10.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1175,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 776,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					]
				},
				{
					"id": 780,
					"name": "readBigUint64LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1197,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 781,
							"name": "readBigUint64LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.readBigUInt64LE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.10.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1197,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 782,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					]
				},
				{
					"id": 867,
					"name": "readDoubleBE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1582,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 868,
							"name": "readDoubleBE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a 64-bit, big-endian double from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\nconsole.log(buf.readDoubleBE(0));\n// Prints: 8.20788039913184e-304\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1582,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 869,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 864,
					"name": "readDoubleLE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1567,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 865,
							"name": "readDoubleLE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a 64-bit, little-endian double from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\nconsole.log(buf.readDoubleLE(0));\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE(1));\n// Throws ERR_OUT_OF_RANGE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1567,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 866,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 861,
					"name": "readFloatBE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1550,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 862,
							"name": "readFloatBE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a 32-bit, big-endian float from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, 2, 3, 4]);\n\nconsole.log(buf.readFloatBE(0));\n// Prints: 2.387939260590663e-38\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1550,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 863,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 858,
					"name": "readFloatLE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1535,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 859,
							"name": "readFloatLE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a 32-bit, little-endian float from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, 2, 3, 4]);\n\nconsole.log(buf.readFloatLE(0));\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE(1));\n// Throws ERR_OUT_OF_RANGE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1535,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 860,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 849,
					"name": "readInt16BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1482,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 850,
							"name": "readInt16BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a signed, big-endian 16-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nIntegers read from a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " are interpreted as two's complement signed values.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0, 5]);\n\nconsole.log(buf.readInt16BE(0));\n// Prints: 5\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1482,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 851,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 2`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 846,
					"name": "readInt16LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1465,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 847,
							"name": "readInt16LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a signed, little-endian 16-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified"
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nIntegers read from a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " are interpreted as two's complement signed values.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0, 5]);\n\nconsole.log(buf.readInt16LE(0));\n// Prints: 1280\nconsole.log(buf.readInt16LE(1));\n// Throws ERR_OUT_OF_RANGE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1465,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 848,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 2`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 855,
					"name": "readInt32BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1518,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 856,
							"name": "readInt32BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a signed, big-endian 32-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nIntegers read from a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " are interpreted as two's complement signed values.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0, 0, 0, 5]);\n\nconsole.log(buf.readInt32BE(0));\n// Prints: 5\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1518,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 857,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 852,
					"name": "readInt32LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1501,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 853,
							"name": "readInt32LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a signed, little-endian 32-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified"
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nIntegers read from a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " are interpreted as two's complement signed values.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0, 0, 0, 5]);\n\nconsole.log(buf.readInt32LE(0));\n// Prints: 83886080\nconsole.log(buf.readInt32LE(1));\n// Throws ERR_OUT_OF_RANGE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1501,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 854,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 843,
					"name": "readInt8",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1446,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 844,
							"name": "readInt8",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads a signed 8-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nIntegers read from a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " are interpreted as two's complement signed values.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([-1, 5]);\n\nconsole.log(buf.readInt8(0));\n// Prints: -1\nconsole.log(buf.readInt8(1));\n// Prints: 5\nconsole.log(buf.readInt8(2));\n// Throws ERR_OUT_OF_RANGE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1446,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 845,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 1`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 809,
					"name": "readIntBE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1303,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 810,
							"name": "readIntBE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads "
									},
									{
										"kind": "code",
										"text": "`byteLength`"
									},
									{
										"kind": "text",
										"text": " number of bytes from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": "and interprets the result as a big-endian, two's complement signed value\nsupporting up to 48 bits of accuracy.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readIntBE(0, 6).toString(16));\n// Prints: 1234567890ab\nconsole.log(buf.readIntBE(1, 6).toString(16));\n// Throws ERR_OUT_OF_RANGE.\nconsole.log(buf.readIntBE(1, 0).toString(16));\n// Throws ERR_OUT_OF_RANGE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1303,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 811,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - byteLength`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 812,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 < byteLength <= 6`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 805,
					"name": "readIntLE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1282,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 806,
							"name": "readIntLE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads "
									},
									{
										"kind": "code",
										"text": "`byteLength`"
									},
									{
										"kind": "text",
										"text": " number of bytes from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": "and interprets the result as a little-endian, two's complement signed value\nsupporting up to 48 bits of accuracy.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readIntLE(0, 6).toString(16));\n// Prints: -546f87a9cbee\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1282,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 807,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - byteLength`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 808,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 < byteLength <= 6`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 825,
					"name": "readUInt16BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1374,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 826,
							"name": "readUInt16BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads an unsigned, big-endian 16-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified"
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`readUint16BE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56]);\n\nconsole.log(buf.readUInt16BE(0).toString(16));\n// Prints: 1234\nconsole.log(buf.readUInt16BE(1).toString(16));\n// Prints: 3456\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1374,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 827,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 2`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 819,
					"name": "readUInt16LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1350,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 820,
							"name": "readUInt16LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads an unsigned, little-endian 16-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified"
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`readUint16LE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56]);\n\nconsole.log(buf.readUInt16LE(0).toString(16));\n// Prints: 3412\nconsole.log(buf.readUInt16LE(1).toString(16));\n// Prints: 5634\nconsole.log(buf.readUInt16LE(2).toString(16));\n// Throws ERR_OUT_OF_RANGE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1350,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 821,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 2`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 837,
					"name": "readUInt32BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1420,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 838,
							"name": "readUInt32BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads an unsigned, big-endian 32-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified"
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`readUint32BE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\nconsole.log(buf.readUInt32BE(0).toString(16));\n// Prints: 12345678\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1420,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 839,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 831,
					"name": "readUInt32LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1398,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 832,
							"name": "readUInt32LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads an unsigned, little-endian 32-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified"
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`readUint32LE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\nconsole.log(buf.readUInt32LE(0).toString(16));\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(1).toString(16));\n// Throws ERR_OUT_OF_RANGE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1398,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 833,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 813,
					"name": "readUInt8",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1324,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 814,
							"name": "readUInt8",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads an unsigned 8-bit integer from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`readUint8`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, -2]);\n\nconsole.log(buf.readUInt8(0));\n// Prints: 1\nconsole.log(buf.readUInt8(1));\n// Prints: 254\nconsole.log(buf.readUInt8(2));\n// Throws ERR_OUT_OF_RANGE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1324,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 815,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 1`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 797,
					"name": "readUIntBE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1260,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 798,
							"name": "readUIntBE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads "
									},
									{
										"kind": "code",
										"text": "`byteLength`"
									},
									{
										"kind": "text",
										"text": " number of bytes from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": "and interprets the result as an unsigned big-endian integer supporting\nup to 48 bits of accuracy.\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`readUintBE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n// Prints: 1234567890ab\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n// Throws ERR_OUT_OF_RANGE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1260,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 799,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - byteLength`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 800,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 < byteLength <= 6`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 789,
					"name": "readUIntLE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1234,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 790,
							"name": "readUIntLE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reads "
									},
									{
										"kind": "code",
										"text": "`byteLength`"
									},
									{
										"kind": "text",
										"text": " number of bytes from "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": "and interprets the result as an unsigned, little-endian integer supporting\nup to 48 bits of accuracy.\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`readUintLE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n// Prints: ab9078563412\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1234,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 791,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - byteLength`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 792,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to read. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 < byteLength <= 6`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 828,
					"name": "readUint16BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1379,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 829,
							"name": "readUint16BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.readUInt16BE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1379,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 830,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 822,
					"name": "readUint16LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1355,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 823,
							"name": "readUint16LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.readUInt16LE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1355,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 824,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 840,
					"name": "readUint32BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1425,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 841,
							"name": "readUint32BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.readUInt32BE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1425,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 842,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 834,
					"name": "readUint32LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1403,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 835,
							"name": "readUint32LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.readUInt32LE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1403,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 836,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 816,
					"name": "readUint8",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1329,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 817,
							"name": "readUint8",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.readUInt8"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1329,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 818,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 801,
					"name": "readUintBE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1265,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 802,
							"name": "readUintBE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.readUIntBE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1265,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 803,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 804,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 793,
					"name": "readUintLE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1239,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 794,
							"name": "readUintLE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.readUIntLE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1239,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 795,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 796,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 1048,
					"name": "reduce",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2287,
							"character": 4
						},
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2288,
							"character": 4
						},
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2300,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1049,
							"name": "reduce",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls the specified callback function for all the elements in an array. The return value of\nthe callback function is the accumulated result, and is provided as an argument in the next\ncall to the callback function."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2287,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1050,
									"name": "callbackfn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to four arguments. The reduce method calls the\ncallbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1051,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2287,
													"character": 23
												}
											],
											"signatures": [
												{
													"id": 1052,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2287,
															"character": 23
														}
													],
													"parameters": [
														{
															"id": 1053,
															"name": "previousValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1054,
															"name": "currentValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1055,
															"name": "currentIndex",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1056,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.reduce"
							}
						},
						{
							"id": 1057,
							"name": "reduce",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2288,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1058,
									"name": "callbackfn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1059,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2288,
													"character": 23
												}
											],
											"signatures": [
												{
													"id": 1060,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2288,
															"character": 23
														}
													],
													"parameters": [
														{
															"id": 1061,
															"name": "previousValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1062,
															"name": "currentValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1063,
															"name": "currentIndex",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1064,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											]
										}
									}
								},
								{
									"id": 1065,
									"name": "initialValue",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.reduce"
							}
						},
						{
							"id": 1066,
							"name": "reduce",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls the specified callback function for all the elements in an array. The return value of\nthe callback function is the accumulated result, and is provided as an argument in the next\ncall to the callback function."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2300,
									"character": 4
								}
							],
							"typeParameter": [
								{
									"id": 1067,
									"name": "U",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1068,
									"name": "callbackfn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to four arguments. The reduce method calls the\ncallbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1069,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2300,
													"character": 26
												}
											],
											"signatures": [
												{
													"id": 1070,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2300,
															"character": 26
														}
													],
													"parameters": [
														{
															"id": 1071,
															"name": "previousValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": -1,
																"name": "U",
																"refersToTypeParameter": true
															}
														},
														{
															"id": 1072,
															"name": "currentValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1073,
															"name": "currentIndex",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1074,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "reference",
														"target": -1,
														"name": "U",
														"refersToTypeParameter": true
													}
												}
											]
										}
									}
								},
								{
									"id": 1075,
									"name": "initialValue",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If initialValue is specified, it is used as the initial value to start\nthe accumulation. The first call to the callbackfn function provides this value as an argument\ninstead of an array value."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "U",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": -1,
								"name": "U",
								"refersToTypeParameter": true
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.reduce"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.reduce"
					}
				},
				{
					"id": 1076,
					"name": "reduceRight",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2312,
							"character": 4
						},
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2313,
							"character": 4
						},
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2325,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1077,
							"name": "reduceRight",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls the specified callback function for all the elements in an array, in descending order.\nThe return value of the callback function is the accumulated result, and is provided as an\nargument in the next call to the callback function."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2312,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1078,
									"name": "callbackfn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to four arguments. The reduceRight method calls\nthe callbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1079,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2312,
													"character": 28
												}
											],
											"signatures": [
												{
													"id": 1080,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2312,
															"character": 28
														}
													],
													"parameters": [
														{
															"id": 1081,
															"name": "previousValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1082,
															"name": "currentValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1083,
															"name": "currentIndex",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1084,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.reduceRight"
							}
						},
						{
							"id": 1085,
							"name": "reduceRight",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2313,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1086,
									"name": "callbackfn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1087,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2313,
													"character": 28
												}
											],
											"signatures": [
												{
													"id": 1088,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2313,
															"character": 28
														}
													],
													"parameters": [
														{
															"id": 1089,
															"name": "previousValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1090,
															"name": "currentValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1091,
															"name": "currentIndex",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1092,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											]
										}
									}
								},
								{
									"id": 1093,
									"name": "initialValue",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.reduceRight"
							}
						},
						{
							"id": 1094,
							"name": "reduceRight",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls the specified callback function for all the elements in an array, in descending order.\nThe return value of the callback function is the accumulated result, and is provided as an\nargument in the next call to the callback function."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2325,
									"character": 4
								}
							],
							"typeParameter": [
								{
									"id": 1095,
									"name": "U",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1096,
									"name": "callbackfn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to four arguments. The reduceRight method calls\nthe callbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1097,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2325,
													"character": 31
												}
											],
											"signatures": [
												{
													"id": 1098,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2325,
															"character": 31
														}
													],
													"parameters": [
														{
															"id": 1099,
															"name": "previousValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": -1,
																"name": "U",
																"refersToTypeParameter": true
															}
														},
														{
															"id": 1100,
															"name": "currentValue",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1101,
															"name": "currentIndex",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1102,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "reference",
														"target": -1,
														"name": "U",
														"refersToTypeParameter": true
													}
												}
											]
										}
									}
								},
								{
									"id": 1103,
									"name": "initialValue",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If initialValue is specified, it is used as the initial value to start\nthe accumulation. The first call to the callbackfn function provides this value as an argument\ninstead of an array value."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "U",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": -1,
								"name": "U",
								"refersToTypeParameter": true
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.reduceRight"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.reduceRight"
					}
				},
				{
					"id": 870,
					"name": "reverse",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1583,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 871,
							"name": "reverse",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1583,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.reverse"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.reverse"
					}
				},
				{
					"id": 1104,
					"name": "set",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2337,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1105,
							"name": "set",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets a value or an array of values."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2337,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1106,
									"name": "array",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A typed or untyped array of values to set."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1223,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										],
										"name": "ArrayLike",
										"package": "typescript"
									}
								},
								{
									"id": 1107,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The index in the current array at which the values are to be written."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.set"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.set"
					}
				},
				{
					"id": 709,
					"name": "slice",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 901,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 710,
							"name": "slice",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " that references the same memory as the original, but\noffset and cropped by the "
									},
									{
										"kind": "code",
										"text": "`start`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`end`"
									},
									{
										"kind": "text",
										"text": " indices.\n\nThis method is not compatible with the "
									},
									{
										"kind": "code",
										"text": "`Uint8Array.prototype.slice()`"
									},
									{
										"kind": "text",
										"text": ",\nwhich is a superclass of "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": ". To copy the slice, use"
									},
									{
										"kind": "code",
										"text": "`Uint8Array.prototype.slice()`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('buffer');\n\nconst copiedBuf = Uint8Array.prototype.slice.call(buf);\ncopiedBuf[0]++;\nconsole.log(copiedBuf.toString());\n// Prints: cuffer\n\nconsole.log(buf.toString());\n// Prints: buffer\n\n// With buf.slice(), the original buffer is modified.\nconst notReallyCopiedBuf = buf.slice();\nnotReallyCopiedBuf[0]++;\nconsole.log(notReallyCopiedBuf.toString());\n// Prints: cuffer\nconsole.log(buf.toString());\n// Also prints: cuffer (!)\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Use "
											},
											{
												"kind": "code",
												"text": "`subarray`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 901,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 711,
									"name": "start",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Where the new "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": " will start."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 712,
									"name": "end",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Where the new "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": " will end (not inclusive)."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.slice"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.slice"
					}
				},
				{
					"id": 1108,
					"name": "some",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2354,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1109,
							"name": "some",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Determines whether the specified callback function returns true for any element of an array."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2354,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1110,
									"name": "predicate",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1111,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2354,
													"character": 20
												}
											],
											"signatures": [
												{
													"id": 1112,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2354,
															"character": 20
														}
													],
													"parameters": [
														{
															"id": 1113,
															"name": "value",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1114,
															"name": "index",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1115,
															"name": "array",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 1116,
									"name": "thisArg",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.some"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.some"
					}
				},
				{
					"id": 1117,
					"name": "sort",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2365,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1118,
							"name": "sort",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sorts an array."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2365,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1119,
									"name": "compareFn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Function used to determine the order of the elements. It is expected to return\na negative value if first argument is less than second argument, zero if they're equal and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending order.\n"
											},
											{
												"kind": "code",
												"text": "```ts\n[11,2,22,1].sort((a, b) => a - b)\n```"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1120,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 2365,
													"character": 21
												}
											],
											"signatures": [
												{
													"id": 1121,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 2365,
															"character": 21
														}
													],
													"parameters": [
														{
															"id": 1122,
															"name": "a",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1123,
															"name": "b",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.sort"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.sort"
					}
				},
				{
					"id": 713,
					"name": "subarray",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 961,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 714,
							"name": "subarray",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " that references the same memory as the original, but\noffset and cropped by the "
									},
									{
										"kind": "code",
										"text": "`start`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`end`"
									},
									{
										"kind": "text",
										"text": " indices.\n\nSpecifying "
									},
									{
										"kind": "code",
										"text": "`end`"
									},
									{
										"kind": "text",
										"text": " greater than "
									},
									{
										"kind": "code",
										"text": "`buf.length`"
									},
									{
										"kind": "text",
										"text": " will return the same result as\nthat of "
									},
									{
										"kind": "code",
										"text": "`end`"
									},
									{
										"kind": "text",
										"text": " equal to "
									},
									{
										"kind": "code",
										"text": "`buf.length`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis method is inherited from ["
									},
									{
										"kind": "code",
										"text": "`TypedArray.prototype.subarray()`"
									},
									{
										"kind": "text",
										"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray).\n\nModifying the new "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " slice will modify the memory in the original "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "because the allocated memory of the two objects overlap.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\n// Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte\n// from the original `Buffer`.\n\nconst buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0; i < 26; i++) {\n  // 97 is the decimal ASCII value for 'a'.\n  buf1[i] = i + 97;\n}\n\nconst buf2 = buf1.subarray(0, 3);\n\nconsole.log(buf2.toString('ascii', 0, buf2.length));\n// Prints: abc\n\nbuf1[0] = 33;\n\nconsole.log(buf2.toString('ascii', 0, buf2.length));\n// Prints: !bc\n```"
									},
									{
										"kind": "text",
										"text": "\n\nSpecifying negative indexes causes the slice to be generated relative to the\nend of "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " rather than the beginning.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('buffer');\n\nconsole.log(buf.subarray(-6, -1).toString());\n// Prints: buffe\n// (Equivalent to buf.subarray(0, 5).)\n\nconsole.log(buf.subarray(-6, -2).toString());\n// Prints: buff\n// (Equivalent to buf.subarray(0, 4).)\n\nconsole.log(buf.subarray(-5, -2).toString());\n// Prints: uff\n// (Equivalent to buf.subarray(1, 4).)\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 961,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 715,
									"name": "start",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Where the new "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": " will start."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 716,
									"name": "end",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Where the new "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": " will end (not inclusive)."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.subarray"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.subarray"
					}
				},
				{
					"id": 872,
					"name": "swap16",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1619,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 873,
							"name": "swap16",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Interprets "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " as an array of unsigned 16-bit integers and swaps the\nbyte order _in-place_. Throws "
									},
									{
										"kind": "code",
										"text": "`ERR_INVALID_BUFFER_SIZE`"
									},
									{
										"kind": "text",
										"text": " if "
									},
									{
										"kind": "code",
										"text": "`buf.length`"
									},
									{
										"kind": "text",
										"text": " is not a multiple of 2.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\nconsole.log(buf1);\n// Prints: <Buffer 01 02 03 04 05 06 07 08>\n\nbuf1.swap16();\n\nconsole.log(buf1);\n// Prints: <Buffer 02 01 04 03 06 05 08 07>\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\nbuf2.swap16();\n// Throws ERR_INVALID_BUFFER_SIZE.\n```"
									},
									{
										"kind": "text",
										"text": "\n\nOne convenient use of "
									},
									{
										"kind": "code",
										"text": "`buf.swap16()`"
									},
									{
										"kind": "text",
										"text": " is to perform a fast in-place conversion\nbetween UTF-16 little-endian and UTF-16 big-endian:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('This is little-endian UTF-16', 'utf16le');\nbuf.swap16(); // Convert to big-endian UTF-16 text.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v5.10.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A reference to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1619,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				},
				{
					"id": 874,
					"name": "swap32",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1645,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 875,
							"name": "swap32",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Interprets "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " as an array of unsigned 32-bit integers and swaps the\nbyte order _in-place_. Throws "
									},
									{
										"kind": "code",
										"text": "`ERR_INVALID_BUFFER_SIZE`"
									},
									{
										"kind": "text",
										"text": " if "
									},
									{
										"kind": "code",
										"text": "`buf.length`"
									},
									{
										"kind": "text",
										"text": " is not a multiple of 4.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\nconsole.log(buf1);\n// Prints: <Buffer 01 02 03 04 05 06 07 08>\n\nbuf1.swap32();\n\nconsole.log(buf1);\n// Prints: <Buffer 04 03 02 01 08 07 06 05>\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\nbuf2.swap32();\n// Throws ERR_INVALID_BUFFER_SIZE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v5.10.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A reference to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1645,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				},
				{
					"id": 876,
					"name": "swap64",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1671,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 877,
							"name": "swap64",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Interprets "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " as an array of 64-bit numbers and swaps byte order _in-place_.\nThrows "
									},
									{
										"kind": "code",
										"text": "`ERR_INVALID_BUFFER_SIZE`"
									},
									{
										"kind": "text",
										"text": " if "
									},
									{
										"kind": "code",
										"text": "`buf.length`"
									},
									{
										"kind": "text",
										"text": " is not a multiple of 8.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\nconsole.log(buf1);\n// Prints: <Buffer 01 02 03 04 05 06 07 08>\n\nbuf1.swap64();\n\nconsole.log(buf1);\n// Prints: <Buffer 08 07 06 05 04 03 02 01>\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\nbuf2.swap64();\n// Throws ERR_INVALID_BUFFER_SIZE.\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.3.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A reference to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1671,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				},
				{
					"id": 688,
					"name": "toJSON",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 730,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 689,
							"name": "toJSON",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a JSON representation of "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": ". ["
									},
									{
										"kind": "code",
										"text": "`JSON.stringify()`"
									},
									{
										"kind": "text",
										"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) implicitly calls\nthis function when stringifying a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instance.\n\n"
									},
									{
										"kind": "code",
										"text": "`Buffer.from()`"
									},
									{
										"kind": "text",
										"text": " accepts objects in the format returned from this method.\nIn particular, "
									},
									{
										"kind": "code",
										"text": "`Buffer.from(buf.toJSON())`"
									},
									{
										"kind": "text",
										"text": " works like "
									},
									{
										"kind": "code",
										"text": "`Buffer.from(buf)`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\nconsole.log(json);\n// Prints: {\"type\":\"Buffer\",\"data\":[1,2,3,4,5]}\n\nconst copy = JSON.parse(json, (key, value) => {\n  return value &#x26;&#x26; value.type === 'Buffer' ?\n    Buffer.from(value) :\n    value;\n});\n\nconsole.log(copy);\n// Prints: <Buffer 01 02 03 04 05>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.2"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 730,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 690,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {
										"isExternal": true
									},
									"children": [
										{
											"id": 692,
											"name": "data",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
													"line": 732,
													"character": 16
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										},
										{
											"id": 691,
											"name": "type",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
													"line": 731,
													"character": 16
												}
											],
											"type": {
												"type": "literal",
												"value": "Buffer"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												692,
												691
											]
										}
									],
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
											"line": 730,
											"character": 22
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 1124,
					"name": "toLocaleString",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2378,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1125,
							"name": "toLocaleString",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Converts a number to a string by using the current locale."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2378,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.toLocaleString"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.toLocaleString"
					}
				},
				{
					"id": 683,
					"name": "toString",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 702,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 684,
							"name": "toString",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decodes "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " to a string according to the specified character encoding in"
									},
									{
										"kind": "code",
										"text": "`encoding`"
									},
									{
										"kind": "text",
										"text": ". "
									},
									{
										"kind": "code",
										"text": "`start`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`end`"
									},
									{
										"kind": "text",
										"text": " may be passed to decode only a subset of "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": ".\n\nIf "
									},
									{
										"kind": "code",
										"text": "`encoding`"
									},
									{
										"kind": "text",
										"text": " is "
									},
									{
										"kind": "code",
										"text": "`'utf8'`"
									},
									{
										"kind": "text",
										"text": " and a byte sequence in the input is not valid UTF-8,\nthen each invalid byte is replaced with the replacement character "
									},
									{
										"kind": "code",
										"text": "`U+FFFD`"
									},
									{
										"kind": "text",
										"text": ".\n\nThe maximum length of a string instance (in UTF-16 code units) is available\nas "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "constants.MAX_STRING_LENGTH",
										"target": {
											"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
											"qualifiedName": "__type.MAX_STRING_LENGTH"
										},
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0; i < 26; i++) {\n  // 97 is the decimal ASCII value for 'a'.\n  buf1[i] = i + 97;\n}\n\nconsole.log(buf1.toString('utf8'));\n// Prints: abcdefghijklmnopqrstuvwxyz\nconsole.log(buf1.toString('utf8', 0, 5));\n// Prints: abcde\n\nconst buf2 = Buffer.from('tést');\n\nconsole.log(buf2.toString('hex'));\n// Prints: 74c3a97374\nconsole.log(buf2.toString('utf8', 0, 3));\n// Prints: té\nconsole.log(buf2.toString(undefined, 0, 3));\n// Prints: té\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.90"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 702,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 685,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The character encoding to use."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								},
								{
									"id": 686,
									"name": "start",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The byte offset to start decoding at."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 687,
									"name": "end",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The byte offset to stop decoding at (not inclusive)."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.toString"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.toString"
					}
				},
				{
					"id": 1126,
					"name": "valueOf",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 2386,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1127,
							"name": "valueOf",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the primitive value of the specified object."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 2386,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.valueOf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.valueOf"
					}
				},
				{
					"id": 979,
					"name": "values",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 2312,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 980,
							"name": "values",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) for "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " values (bytes). This function is\ncalled automatically when a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " is used in a "
									},
									{
										"kind": "code",
										"text": "`for..of`"
									},
									{
										"kind": "text",
										"text": " statement.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('buffer');\n\nfor (const value of buf.values()) {\n  console.log(value);\n}\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\n\nfor (const value of buf) {\n  console.log(value);\n}\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.1.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 2312,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"target": 1209,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "IterableIterator",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Uint8Array.values"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Uint8Array.values"
					}
				},
				{
					"id": 670,
					"name": "write",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 661,
							"character": 12
						},
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 662,
							"character": 12
						},
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 663,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 671,
							"name": "write",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " according to the character encoding in"
									},
									{
										"kind": "code",
										"text": "`encoding`"
									},
									{
										"kind": "text",
										"text": ". The "
									},
									{
										"kind": "code",
										"text": "`length`"
									},
									{
										"kind": "text",
										"text": " parameter is the number of bytes to write. If "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " did\nnot contain enough space to fit the entire string, only part of "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " will be\nwritten. However, partially encoded characters will not be written.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.alloc(256);\n\nconst len = buf.write('\\u00bd + \\u00bc = \\u00be', 0);\n\nconsole.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);\n// Prints: 12 bytes: ½ + ¼ = ¾\n\nconst buffer = Buffer.alloc(10);\n\nconst length = buffer.write('abcd', 8);\n\nconsole.log(`${length} bytes: ${buffer.toString('utf8', 8, 10)}`);\n// Prints: 2 bytes : ab\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.90"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 661,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 672,
									"name": "string",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "String to write to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 673,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The character encoding of "
											},
											{
												"kind": "code",
												"text": "`string`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 674,
							"name": "write",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 662,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 675,
									"name": "string",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 676,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 677,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 678,
							"name": "write",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 663,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 679,
									"name": "string",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 680,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 681,
									"name": "length",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 682,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 717,
					"name": "writeBigInt64BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 982,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 718,
							"name": "writeBigInt64BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as big-endian.\n\n"
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is interpreted and written as a two's complement signed integer.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeBigInt64BE(0x0102030405060708n, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 01 02 03 04 05 06 07 08>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v12.0.0, v10.20.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 982,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 719,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "bigint"
									}
								},
								{
									"id": 720,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy: "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 721,
					"name": "writeBigInt64LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1003,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 722,
							"name": "writeBigInt64LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as little-endian.\n\n"
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is interpreted and written as a two's complement signed integer.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeBigInt64LE(0x0102030405060708n, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 08 07 06 05 04 03 02 01>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v12.0.0, v10.20.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1003,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 723,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "bigint"
									}
								},
								{
									"id": 724,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy: "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 725,
					"name": "writeBigUInt64BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1024,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 726,
							"name": "writeBigUInt64BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as big-endian.\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`writeBigUint64BE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeBigUInt64BE(0xdecafafecacefaden, 0);\n\nconsole.log(buf);\n// Prints: <Buffer de ca fa fe ca ce fa de>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v12.0.0, v10.20.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1024,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 727,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "bigint"
									}
								},
								{
									"id": 728,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy: "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 733,
					"name": "writeBigUInt64LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1050,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 734,
							"name": "writeBigUInt64LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as little-endian\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeBigUInt64LE(0xdecafafecacefaden, 0);\n\nconsole.log(buf);\n// Prints: <Buffer de fa ce ca fe fa ca de>\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`writeBigUint64LE`"
									},
									{
										"kind": "text",
										"text": " alias."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v12.0.0, v10.20.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1050,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 735,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "bigint"
									}
								},
								{
									"id": 736,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy: "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 729,
					"name": "writeBigUint64BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1029,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 730,
							"name": "writeBigUint64BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.writeBigUInt64BE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.10.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1029,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 731,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "bigint"
									}
								},
								{
									"id": 732,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 737,
					"name": "writeBigUint64LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1055,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 738,
							"name": "writeBigUint64LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.writeBigUInt64LE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.10.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1055,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 739,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "bigint"
									}
								},
								{
									"id": 740,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 950,
					"name": "writeDoubleBE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 2004,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 951,
							"name": "writeDoubleBE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as big-endian. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "must be a JavaScript number. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is anything\nother than a JavaScript number.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(123.456, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 40 5e dd 2f 1a 9f be 77>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 2004,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 952,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 953,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 946,
					"name": "writeDoubleLE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1984,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 947,
							"name": "writeDoubleLE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as little-endian. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "must be a JavaScript number. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is anything\nother than a JavaScript number.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleLE(123.456, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 77 be 9f 1a 2f dd 5e 40>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1984,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 948,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 949,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 8`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 942,
					"name": "writeFloatBE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1964,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 943,
							"name": "writeFloatBE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as big-endian. Behavior is\nundefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is anything other than a JavaScript number.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 4f 4a fe bb>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1964,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 944,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 945,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 938,
					"name": "writeFloatLE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1944,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 939,
							"name": "writeFloatLE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as little-endian. Behavior is\nundefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is anything other than a JavaScript number.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n// Prints: <Buffer bb fe 4a 4f>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1944,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 940,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 941,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 926,
					"name": "writeInt16BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1880,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 927,
							"name": "writeInt16BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as big-endian.  The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "must be a valid signed 16-bit integer. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is\nanything other than a signed 16-bit integer.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is interpreted and written as a two's complement signed integer.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt16BE(0x0102, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 01 02>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1880,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 928,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 929,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 2`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 922,
					"name": "writeInt16LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1858,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 923,
							"name": "writeInt16LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as little-endian.  The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "must be a valid signed 16-bit integer. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is\nanything other than a signed 16-bit integer.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is interpreted and written as a two's complement signed integer.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt16LE(0x0304, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 04 03>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1858,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 924,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 925,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 2`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 934,
					"name": "writeInt32BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1924,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 935,
							"name": "writeInt32BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as big-endian. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "must be a valid signed 32-bit integer. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is\nanything other than a signed 32-bit integer.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is interpreted and written as a two's complement signed integer.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt32BE(0x01020304, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 01 02 03 04>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1924,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 936,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 937,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 930,
					"name": "writeInt32LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1902,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 931,
							"name": "writeInt32LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as little-endian. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "must be a valid signed 32-bit integer. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is\nanything other than a signed 32-bit integer.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is interpreted and written as a two's complement signed integer.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt32LE(0x05060708, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 08 07 06 05>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1902,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 932,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 933,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 918,
					"name": "writeInt8",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1836,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 919,
							"name": "writeInt8",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ". "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " must be a valid\nsigned 8-bit integer. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is anything other than\na signed 8-bit integer.\n\n"
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is interpreted and written as a two's complement signed integer.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt8(2, 0);\nbuf.writeInt8(-2, 1);\n\nconsole.log(buf);\n// Prints: <Buffer 02 fe>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1836,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 920,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 921,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 1`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 766,
					"name": "writeIntBE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1153,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 767,
							"name": "writeIntBE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`byteLength`"
									},
									{
										"kind": "text",
										"text": " bytes of "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": "as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when"
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is anything other than a\nsigned integer.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(6);\n\nbuf.writeIntBE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: <Buffer 12 34 56 78 90 ab>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1153,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 768,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 769,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - byteLength`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 770,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 < byteLength <= 6`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 761,
					"name": "writeIntLE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1132,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 762,
							"name": "writeIntLE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`byteLength`"
									},
									{
										"kind": "text",
										"text": " bytes of "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": "as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined\nwhen "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is anything other than a signed integer.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(6);\n\nbuf.writeIntLE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: <Buffer ab 90 78 56 34 12>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.15"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1132,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 763,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 764,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - byteLength`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 765,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 < byteLength <= 6`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 894,
					"name": "writeUInt16BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1753,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 895,
							"name": "writeUInt16BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as big-endian. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "must be a valid unsigned 16-bit integer. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "is anything other than an\nunsigned 16-bit integer.\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`writeUint16BE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n// Prints: <Buffer de ad be ef>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1753,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 896,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 897,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 2`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 886,
					"name": "writeUInt16LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1725,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 887,
							"name": "writeUInt16LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as little-endian. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "must be a valid unsigned 16-bit integer. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is\nanything other than an unsigned 16-bit integer.\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`writeUint16LE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n// Prints: <Buffer ad de ef be>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1725,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 888,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 889,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 2`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 910,
					"name": "writeUInt32BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1807,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 911,
							"name": "writeUInt32BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as big-endian. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "must be a valid unsigned 32-bit integer. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "is anything other than an\nunsigned 32-bit integer.\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`writeUint32BE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n// Prints: <Buffer fe ed fa ce>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1807,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 912,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 913,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 902,
					"name": "writeUInt32LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1780,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 903,
							"name": "writeUInt32LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": " as little-endian. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "must be a valid unsigned 32-bit integer. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is\nanything other than an unsigned 32-bit integer.\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`writeUint32LE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n// Prints: <Buffer ce fa ed fe>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1780,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 904,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 905,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 4`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 878,
					"name": "writeUInt8",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1697,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 879,
							"name": "writeUInt8",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": ". "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " must be a\nvalid unsigned 8-bit integer. Behavior is undefined when "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is anything\nother than an unsigned 8-bit integer.\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`writeUint8`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\nconsole.log(buf);\n// Prints: <Buffer 03 04 23 42>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1697,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 880,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 881,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - 1`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 751,
					"name": "writeUIntBE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1106,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 752,
							"name": "writeUIntBE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`byteLength`"
									},
									{
										"kind": "text",
										"text": " bytes of "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": "as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined\nwhen "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is anything other than an unsigned integer.\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`writeUintBE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: <Buffer 12 34 56 78 90 ab>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1106,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 753,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 754,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - byteLength`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 755,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 < byteLength <= 6`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 741,
					"name": "writeUIntLE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1078,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 742,
							"name": "writeUIntLE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Writes "
									},
									{
										"kind": "code",
										"text": "`byteLength`"
									},
									{
										"kind": "text",
										"text": " bytes of "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf`"
									},
									{
										"kind": "text",
										"text": " at the specified "
									},
									{
										"kind": "code",
										"text": "`offset`"
									},
									{
										"kind": "text",
										"text": "as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined\nwhen "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is anything other than an unsigned integer.\n\nThis function is also available under the "
									},
									{
										"kind": "code",
										"text": "`writeUintLE`"
									},
									{
										"kind": "text",
										"text": " alias.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: <Buffer ab 90 78 56 34 12>\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.5.5"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " plus the number of bytes written."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1078,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 743,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to be written to "
											},
											{
												"kind": "code",
												"text": "`buf`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 744,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to skip before starting to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 <= offset <= buf.length - byteLength`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 745,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number of bytes to write. Must satisfy "
											},
											{
												"kind": "code",
												"text": "`0 < byteLength <= 6`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 898,
					"name": "writeUint16BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1758,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 899,
							"name": "writeUint16BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.writeUInt16BE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1758,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 900,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 901,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 890,
					"name": "writeUint16LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1730,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 891,
							"name": "writeUint16LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.writeUInt16LE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1730,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 892,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 893,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 914,
					"name": "writeUint32BE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1812,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 915,
							"name": "writeUint32BE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.writeUInt32BE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1812,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 916,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 917,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 906,
					"name": "writeUint32LE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1785,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 907,
							"name": "writeUint32LE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.writeUInt32LE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1785,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 908,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 909,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 882,
					"name": "writeUint8",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1702,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 883,
							"name": "writeUint8",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.writeUInt8"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1702,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 884,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 885,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 756,
					"name": "writeUintBE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1111,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 757,
							"name": "writeUintBE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.writeUIntBE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1111,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 758,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 759,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 760,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 746,
					"name": "writeUintLE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 1083,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 747,
							"name": "writeUintLE",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@alias",
										"content": [
											{
												"kind": "text",
												"text": "Buffer.writeUIntLE"
											}
										]
									},
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.9.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 1083,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 748,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 749,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 750,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						981,
						1130,
						982,
						983,
						984,
						1038
					]
				},
				{
					"title": "Methods",
					"children": [
						1128,
						1131,
						696,
						703,
						985,
						970,
						693,
						990,
						954,
						999,
						1008,
						1017,
						1026,
						972,
						960,
						1035,
						977,
						965,
						1039,
						783,
						786,
						771,
						777,
						774,
						780,
						867,
						864,
						861,
						858,
						849,
						846,
						855,
						852,
						843,
						809,
						805,
						825,
						819,
						837,
						831,
						813,
						797,
						789,
						828,
						822,
						840,
						834,
						816,
						801,
						793,
						1048,
						1076,
						870,
						1104,
						709,
						1108,
						1117,
						713,
						872,
						874,
						876,
						688,
						1124,
						683,
						1126,
						979,
						670,
						717,
						721,
						725,
						733,
						729,
						737,
						950,
						946,
						942,
						938,
						926,
						922,
						934,
						930,
						918,
						766,
						761,
						894,
						886,
						910,
						902,
						878,
						751,
						741,
						898,
						890,
						914,
						906,
						882,
						756,
						746
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
					"line": 631,
					"character": 18
				},
				{
					"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
					"line": 2314,
					"character": 12
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "Uint8Array"
					},
					"name": "Uint8Array",
					"package": "typescript"
				}
			]
		},
		{
			"id": 1139,
			"name": "BufferConstructor",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Raw data is stored in instances of the Buffer class.\nA Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.\nValid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'base64url'|'binary'(deprecated)|'hex'"
					}
				]
			},
			"children": [
				{
					"id": 1194,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 255,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 1195,
							"name": "new BufferConstructor",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allocates a new buffer containing the given {str}."
									}
								],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "since v10.0.0 - Use "
											},
											{
												"kind": "code",
												"text": "`Buffer.from(string[, encoding])`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 263,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1196,
									"name": "str",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "String to store in buffer."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1197,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "encoding to use, optional.  Default is 'utf8'"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						},
						{
							"id": 1198,
							"name": "new BufferConstructor",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allocates a new buffer of {size} octets."
									}
								],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "since v10.0.0 - Use "
											},
											{
												"kind": "code",
												"text": "`Buffer.alloc()`"
											},
											{
												"kind": "text",
												"text": " instead (also see "
											},
											{
												"kind": "code",
												"text": "`Buffer.allocUnsafe()`"
											},
											{
												"kind": "text",
												"text": ")."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 270,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1199,
									"name": "size",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "count of octets to allocate."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						},
						{
							"id": 1200,
							"name": "new BufferConstructor",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allocates a new buffer containing the given {array} of octets."
									}
								],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "since v10.0.0 - Use "
											},
											{
												"kind": "code",
												"text": "`Buffer.from(array)`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 277,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1201,
									"name": "array",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The octets to store."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						},
						{
							"id": 1202,
							"name": "new BufferConstructor",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Produces a Buffer backed by the same allocated memory as\nthe given {ArrayBuffer}/{SharedArrayBuffer}."
									}
								],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "since v10.0.0 - Use "
											},
											{
												"kind": "code",
												"text": "`Buffer.from(arrayBuffer[, byteOffset[, length]])`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 285,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1203,
									"name": "arrayBuffer",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ArrayBuffer with which to share memory."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ArrayBuffer"
												},
												"name": "ArrayBuffer",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": 1243,
												"name": "SharedArrayBuffer",
												"package": "typescript"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						},
						{
							"id": 1204,
							"name": "new BufferConstructor",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allocates a new buffer containing the given {array} of octets."
									}
								],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "since v10.0.0 - Use "
											},
											{
												"kind": "code",
												"text": "`Buffer.from(array)`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 292,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1205,
									"name": "array",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The octets to store."
											}
										]
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						},
						{
							"id": 1206,
							"name": "new BufferConstructor",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Copies the passed {buffer} data onto a new {Buffer} instance."
									}
								],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "since v10.0.0 - Use "
											},
											{
												"kind": "code",
												"text": "`Buffer.from(buffer)`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 299,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1207,
									"name": "buffer",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The buffer to copy."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 668,
										"name": "Buffer",
										"package": "@types/node",
										"qualifiedName": "__global.Buffer"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				},
				{
					"id": 1193,
					"name": "poolSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This is the size (in bytes) of pre-allocated internal "
							},
							{
								"kind": "code",
								"text": "`Buffer`"
							},
							{
								"kind": "text",
								"text": " instances used\nfor pooling. This value may be modified."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.3"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 629,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1182,
					"name": "alloc",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 542,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1183,
							"name": "alloc",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allocates a new "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " of "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " bytes. If "
									},
									{
										"kind": "code",
										"text": "`fill`"
									},
									{
										"kind": "text",
										"text": " is "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": ", the"
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " will be zero-filled.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.alloc(5);\n\nconsole.log(buf);\n// Prints: <Buffer 00 00 00 00 00>\n```"
									},
									{
										"kind": "text",
										"text": "\n\nIf "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " is larger than "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "constants.MAX_LENGTH",
										"target": {
											"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
											"qualifiedName": "__type.MAX_LENGTH"
										},
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " or smaller than 0, "
									},
									{
										"kind": "code",
										"text": "`ERR_OUT_OF_RANGE`"
									},
									{
										"kind": "text",
										"text": " is thrown.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`fill`"
									},
									{
										"kind": "text",
										"text": " is specified, the allocated "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " will be initialized by calling "
									},
									{
										"kind": "code",
										"text": "`buf.fill(fill)`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.alloc(5, 'a');\n\nconsole.log(buf);\n// Prints: <Buffer 61 61 61 61 61>\n```"
									},
									{
										"kind": "text",
										"text": "\n\nIf both "
									},
									{
										"kind": "code",
										"text": "`fill`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`encoding`"
									},
									{
										"kind": "text",
										"text": " are specified, the allocated "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " will be\ninitialized by calling "
									},
									{
										"kind": "code",
										"text": "`buf.fill(fill, encoding)`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\n\nconsole.log(buf);\n// Prints: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n```"
									},
									{
										"kind": "text",
										"text": "\n\nCalling "
									},
									{
										"kind": "code",
										"text": "`Buffer.alloc()`"
									},
									{
										"kind": "text",
										"text": " can be measurably slower than the alternative "
									},
									{
										"kind": "code",
										"text": "`Buffer.allocUnsafe()`"
									},
									{
										"kind": "text",
										"text": " but ensures that the newly created "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instance\ncontents will never contain sensitive data from previous allocations, including\ndata that might not have been allocated for "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "s.\n\nA "
									},
									{
										"kind": "code",
										"text": "`TypeError`"
									},
									{
										"kind": "text",
										"text": " will be thrown if "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " is not a number."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v5.10.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 542,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1184,
									"name": "size",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The desired length of the new "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1185,
									"name": "fill",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A value to pre-fill the new "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": " with."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 1186,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If "
											},
											{
												"kind": "code",
												"text": "`fill`"
											},
											{
												"kind": "text",
												"text": " is a string, this is its encoding."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				},
				{
					"id": 1187,
					"name": "allocUnsafe",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 578,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1188,
							"name": "allocUnsafe",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allocates a new "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " of "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " bytes. If "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " is larger than "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "constants.MAX_LENGTH",
										"target": {
											"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
											"qualifiedName": "__type.MAX_LENGTH"
										},
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " or smaller than 0, "
									},
									{
										"kind": "code",
										"text": "`ERR_OUT_OF_RANGE`"
									},
									{
										"kind": "text",
										"text": " is thrown.\n\nThe underlying memory for "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instances created in this way is _not_\n_initialized_. The contents of the newly created "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " are unknown and _may contain sensitive data_. Use "
									},
									{
										"kind": "code",
										"text": "`Buffer.alloc()`"
									},
									{
										"kind": "text",
										"text": " instead to initialize"
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instances with zeroes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(10);\n\nconsole.log(buf);\n// Prints (contents may vary): <Buffer a0 8b 28 3f 01 00 00 00 50 32>\n\nbuf.fill(0);\n\nconsole.log(buf);\n// Prints: <Buffer 00 00 00 00 00 00 00 00 00 00>\n```"
									},
									{
										"kind": "text",
										"text": "\n\nA "
									},
									{
										"kind": "code",
										"text": "`TypeError`"
									},
									{
										"kind": "text",
										"text": " will be thrown if "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " is not a number.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " module pre-allocates an internal "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instance of\nsize "
									},
									{
										"kind": "code",
										"text": "`Buffer.poolSize`"
									},
									{
										"kind": "text",
										"text": " that is used as a pool for the fast allocation of new"
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instances created using "
									},
									{
										"kind": "code",
										"text": "`Buffer.allocUnsafe()`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`Buffer.from(array)`"
									},
									{
										"kind": "text",
										"text": ",\nand "
									},
									{
										"kind": "code",
										"text": "`Buffer.concat()`"
									},
									{
										"kind": "text",
										"text": " only when "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " is less than or equal to"
									},
									{
										"kind": "code",
										"text": "`Buffer.poolSize >> 1`"
									},
									{
										"kind": "text",
										"text": " (floor of "
									},
									{
										"kind": "code",
										"text": "`Buffer.poolSize`"
									},
									{
										"kind": "text",
										"text": " divided by two).\n\nUse of this pre-allocated internal memory pool is a key difference between\ncalling "
									},
									{
										"kind": "code",
										"text": "`Buffer.alloc(size, fill)`"
									},
									{
										"kind": "text",
										"text": " vs. "
									},
									{
										"kind": "code",
										"text": "`Buffer.allocUnsafe(size).fill(fill)`"
									},
									{
										"kind": "text",
										"text": ".\nSpecifically, "
									},
									{
										"kind": "code",
										"text": "`Buffer.alloc(size, fill)`"
									},
									{
										"kind": "text",
										"text": " will _never_ use the internal "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "pool, while "
									},
									{
										"kind": "code",
										"text": "`Buffer.allocUnsafe(size).fill(fill)`"
									},
									{
										"kind": "text",
										"text": "_will_ use the internal"
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " pool if "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " is less\nthan or equal to half "
									},
									{
										"kind": "code",
										"text": "`Buffer.poolSize`"
									},
									{
										"kind": "text",
										"text": ". The\ndifference is subtle but can be important when an application requires the\nadditional performance that "
									},
									{
										"kind": "code",
										"text": "`Buffer.allocUnsafe()`"
									},
									{
										"kind": "text",
										"text": " provides."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v5.10.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 578,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1189,
									"name": "size",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The desired length of the new "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				},
				{
					"id": 1190,
					"name": "allocUnsafeSlow",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 623,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1191,
							"name": "allocUnsafeSlow",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allocates a new "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " of "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " bytes. If "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " is larger than "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "constants.MAX_LENGTH",
										"target": {
											"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
											"qualifiedName": "__type.MAX_LENGTH"
										},
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " or smaller than 0, "
									},
									{
										"kind": "code",
										"text": "`ERR_OUT_OF_RANGE`"
									},
									{
										"kind": "text",
										"text": " is thrown. A zero-length "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " is created if\n"
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " is 0.\n\nThe underlying memory for "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instances created in this way is _not_\n_initialized_. The contents of the newly created "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " are unknown and _may contain sensitive data_. Use "
									},
									{
										"kind": "code",
										"text": "`buf.fill(0)`"
									},
									{
										"kind": "text",
										"text": " to initialize\nsuch "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instances with zeroes.\n\nWhen using "
									},
									{
										"kind": "code",
										"text": "`Buffer.allocUnsafe()`"
									},
									{
										"kind": "text",
										"text": " to allocate new "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instances,\nallocations under 4 KiB are sliced from a single pre-allocated "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": ". This\nallows applications to avoid the garbage collection overhead of creating many\nindividually allocated "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instances. This approach improves both\nperformance and memory usage by eliminating the need to track and clean up as\nmany individual "
									},
									{
										"kind": "code",
										"text": "`ArrayBuffer`"
									},
									{
										"kind": "text",
										"text": " objects.\n\nHowever, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instance using "
									},
									{
										"kind": "code",
										"text": "`Buffer.allocUnsafeSlow()`"
									},
									{
										"kind": "text",
										"text": " and\nthen copying out the relevant bits.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\n// Need to keep around a few small chunks of memory.\nconst store = [];\n\nsocket.on('readable', () => {\n  let data;\n  while (null !== (data = readable.read())) {\n    // Allocate for retained data.\n    const sb = Buffer.allocUnsafeSlow(10);\n\n    // Copy the data into the new allocation.\n    data.copy(sb, 0, 0, 10);\n\n    store.push(sb);\n  }\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nA "
									},
									{
										"kind": "code",
										"text": "`TypeError`"
									},
									{
										"kind": "text",
										"text": " will be thrown if "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": " is not a number."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v5.12.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 623,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1192,
									"name": "size",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The desired length of the new "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				},
				{
					"id": 1165,
					"name": "byteLength",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 417,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1166,
							"name": "byteLength",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the byte length of a string when encoded using "
									},
									{
										"kind": "code",
										"text": "`encoding`"
									},
									{
										"kind": "text",
										"text": ".\nThis is not the same as ["
									},
									{
										"kind": "code",
										"text": "`String.prototype.length`"
									},
									{
										"kind": "text",
										"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length), which does not account\nfor the encoding that is used to convert the string into bytes.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`'base64'`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`'base64url'`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`'hex'`"
									},
									{
										"kind": "text",
										"text": ", this function assumes valid input.\nFor strings that contain non-base64/hex-encoded data (e.g. whitespace), the\nreturn value might be greater than the length of a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " created from the\nstring.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst str = '\\u00bd + \\u00bc = \\u00be';\n\nconsole.log(`${str}: ${str.length} characters, ` +\n            `${Buffer.byteLength(str, 'utf8')} bytes`);\n// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes\n```"
									},
									{
										"kind": "text",
										"text": "\n\nWhen "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " is a\n"
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "/["
									},
									{
										"kind": "code",
										"text": "`DataView`"
									},
									{
										"kind": "text",
										"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView)/["
									},
									{
										"kind": "code",
										"text": "`TypedArray`"
									},
									{
										"kind": "text",
										"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/-\nReference/Global_Objects/TypedArray)/["
									},
									{
										"kind": "code",
										"text": "`ArrayBuffer`"
									},
									{
										"kind": "text",
										"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)/["
									},
									{
										"kind": "code",
										"text": "`SharedArrayBuffer`"
									},
									{
										"kind": "text",
										"text": "](https://develop-\ner.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer), the byte length as reported by "
									},
									{
										"kind": "code",
										"text": "`.byteLength`"
									},
									{
										"kind": "text",
										"text": "is returned."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.90"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The number of bytes contained within "
											},
											{
												"kind": "code",
												"text": "`string`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 417,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1167,
									"name": "string",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A value to calculate the length of."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ArrayBuffer"
												},
												"name": "ArrayBuffer",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": 1243,
												"name": "SharedArrayBuffer",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": 1252,
												"name": "ArrayBufferView",
												"package": "@types/node",
												"qualifiedName": "NodeJS.ArrayBufferView"
											}
										]
									}
								},
								{
									"id": 1168,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If "
											},
											{
												"kind": "code",
												"text": "`string`"
											},
											{
												"kind": "text",
												"text": " is a string, this is its encoding."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 1178,
					"name": "compare",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 494,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1179,
							"name": "compare",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Compares "
									},
									{
										"kind": "code",
										"text": "`buf1`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`buf2`"
									},
									{
										"kind": "text",
										"text": ", typically for the purpose of sorting arrays of"
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instances. This is equivalent to calling "
									},
									{
										"kind": "code",
										"text": "`buf1.compare(buf2)`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from('1234');\nconst buf2 = Buffer.from('0123');\nconst arr = [buf1, buf2];\n\nconsole.log(arr.sort(Buffer.compare));\n// Prints: [ <Buffer 30 31 32 33>, <Buffer 31 32 33 34> ]\n// (This result is equal to: [buf2, buf1].)\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.13"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Either "
											},
											{
												"kind": "code",
												"text": "`-1`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": ", or "
											},
											{
												"kind": "code",
												"text": "`1`"
											},
											{
												"kind": "text",
												"text": ", depending on the result of the comparison. See "
											},
											{
												"kind": "code",
												"text": "`compare`"
											},
											{
												"kind": "text",
												"text": " for details."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 494,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1180,
									"name": "buf1",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								},
								{
									"id": 1181,
									"name": "buf2",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": 0
									},
									{
										"type": "literal",
										"value": 1
									},
									{
										"type": "literal",
										"value": -1
									}
								]
							}
						}
					]
				},
				{
					"id": 1169,
					"name": "concat",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 459,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1170,
							"name": "concat",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " which is the result of concatenating all the "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "instances in the "
									},
									{
										"kind": "code",
										"text": "`list`"
									},
									{
										"kind": "text",
										"text": " together.\n\nIf the list has no items, or if the "
									},
									{
										"kind": "code",
										"text": "`totalLength`"
									},
									{
										"kind": "text",
										"text": " is 0, then a new zero-length"
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " is returned.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`totalLength`"
									},
									{
										"kind": "text",
										"text": " is not provided, it is calculated from the "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " instances\nin "
									},
									{
										"kind": "code",
										"text": "`list`"
									},
									{
										"kind": "text",
										"text": " by adding their lengths.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`totalLength`"
									},
									{
										"kind": "text",
										"text": " is provided, it is coerced to an unsigned integer. If the\ncombined length of the "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "s in "
									},
									{
										"kind": "code",
										"text": "`list`"
									},
									{
										"kind": "text",
										"text": " exceeds "
									},
									{
										"kind": "code",
										"text": "`totalLength`"
									},
									{
										"kind": "text",
										"text": ", the result is\ntruncated to "
									},
									{
										"kind": "code",
										"text": "`totalLength`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\n// Create a single `Buffer` from a list of three `Buffer` instances.\n\nconst buf1 = Buffer.alloc(10);\nconst buf2 = Buffer.alloc(14);\nconst buf3 = Buffer.alloc(18);\nconst totalLength = buf1.length + buf2.length + buf3.length;\n\nconsole.log(totalLength);\n// Prints: 42\n\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\n\nconsole.log(bufA);\n// Prints: <Buffer 00 00 00 00 ...>\nconsole.log(bufA.length);\n// Prints: 42\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`Buffer.concat()`"
									},
									{
										"kind": "text",
										"text": " may also use the internal "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " pool like "
									},
									{
										"kind": "code",
										"text": "`Buffer.allocUnsafe()`"
									},
									{
										"kind": "text",
										"text": " does."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.7.11"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 459,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1171,
									"name": "list",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "List of "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Uint8Array",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": " instances to concatenate."
											}
										]
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											}
										}
									}
								},
								{
									"id": 1172,
									"name": "totalLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Total length of the "
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": " instances in "
											},
											{
												"kind": "code",
												"text": "`list`"
											},
											{
												"kind": "text",
												"text": " when concatenated."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				},
				{
					"id": 1173,
					"name": "copyBytesFrom",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 476,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1174,
							"name": "copyBytesFrom",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Copies the underlying memory of "
									},
									{
										"kind": "code",
										"text": "`view`"
									},
									{
										"kind": "text",
										"text": " into a new "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst u16 = new Uint16Array([0, 0xffff]);\nconst buf = Buffer.copyBytesFrom(u16, 1, 1);\nu16[1] = 0;\nconsole.log(buf.length); // 2\nconsole.log(buf[0]); // 255\nconsole.log(buf[1]); // 255\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v19.8.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 476,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1175,
									"name": "view",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The {TypedArray} to copy."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1253,
										"name": "TypedArray",
										"package": "@types/node",
										"qualifiedName": "NodeJS.TypedArray"
									}
								},
								{
									"id": 1176,
									"name": "offset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The starting offset within "
											},
											{
												"kind": "code",
												"text": "`view`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1177,
									"name": "length",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The number of elements from "
											},
											{
												"kind": "code",
												"text": "`view`"
											},
											{
												"kind": "text",
												"text": " to copy."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				},
				{
					"id": 1140,
					"name": "from",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 321,
							"character": 12
						},
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 330,
							"character": 12
						},
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 331,
							"character": 12
						},
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 337,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1141,
							"name": "from",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allocates a new "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " using an "
									},
									{
										"kind": "code",
										"text": "`array`"
									},
									{
										"kind": "text",
										"text": " of bytes in the range "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": " – "
									},
									{
										"kind": "code",
										"text": "`255`"
									},
									{
										"kind": "text",
										"text": ".\nArray entries outside that range will be truncated to fit into it.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\n// Creates a new Buffer containing the UTF-8 bytes of the string 'buffer'.\nconst buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n```"
									},
									{
										"kind": "text",
										"text": "\n\nIf "
									},
									{
										"kind": "code",
										"text": "`array`"
									},
									{
										"kind": "text",
										"text": " is an "
									},
									{
										"kind": "code",
										"text": "`Array`"
									},
									{
										"kind": "text",
										"text": "\\-like object (that is, one with a "
									},
									{
										"kind": "code",
										"text": "`length`"
									},
									{
										"kind": "text",
										"text": " property of\ntype "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": "), it is treated as if it is an array, unless it is a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " or\na "
									},
									{
										"kind": "code",
										"text": "`Uint8Array`"
									},
									{
										"kind": "text",
										"text": ". This means all other "
									},
									{
										"kind": "code",
										"text": "`TypedArray`"
									},
									{
										"kind": "text",
										"text": " variants get treated as an"
									},
									{
										"kind": "code",
										"text": "`Array`"
									},
									{
										"kind": "text",
										"text": ". To create a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " from the bytes backing a "
									},
									{
										"kind": "code",
										"text": "`TypedArray`"
									},
									{
										"kind": "text",
										"text": ", use "
									},
									{
										"kind": "code",
										"text": "`Buffer.copyBytesFrom()`"
									},
									{
										"kind": "text",
										"text": ".\n\nA "
									},
									{
										"kind": "code",
										"text": "`TypeError`"
									},
									{
										"kind": "text",
										"text": " will be thrown if "
									},
									{
										"kind": "code",
										"text": "`array`"
									},
									{
										"kind": "text",
										"text": " is not an "
									},
									{
										"kind": "code",
										"text": "`Array`"
									},
									{
										"kind": "text",
										"text": " or another type\nappropriate for "
									},
									{
										"kind": "code",
										"text": "`Buffer.from()`"
									},
									{
										"kind": "text",
										"text": " variants.\n\n"
									},
									{
										"kind": "code",
										"text": "`Buffer.from(array)`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`Buffer.from(string)`"
									},
									{
										"kind": "text",
										"text": " may also use the internal"
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": " pool like "
									},
									{
										"kind": "code",
										"text": "`Buffer.allocUnsafe()`"
									},
									{
										"kind": "text",
										"text": " does."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v5.10.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 321,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1142,
									"name": "arrayBuffer",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1238,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "ArrayBuffer"
														},
														"name": "ArrayBuffer",
														"package": "typescript"
													},
													{
														"type": "reference",
														"target": 1243,
														"name": "SharedArrayBuffer",
														"package": "typescript"
													}
												]
											}
										],
										"name": "WithImplicitCoercion",
										"package": "@types/node",
										"qualifiedName": "__global.WithImplicitCoercion"
									}
								},
								{
									"id": 1143,
									"name": "byteOffset",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1144,
									"name": "length",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						},
						{
							"id": 1145,
							"name": "from",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new Buffer using the passed {data}"
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 330,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1146,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "data to create a new Buffer"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											},
											{
												"type": "typeOperator",
												"operator": "readonly",
												"target": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						},
						{
							"id": 1147,
							"name": "from",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 331,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1148,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1238,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Uint8Array"
														},
														"name": "Uint8Array",
														"package": "typescript"
													},
													{
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													}
												]
											}
										],
										"name": "WithImplicitCoercion",
										"package": "@types/node",
										"qualifiedName": "__global.WithImplicitCoercion"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						},
						{
							"id": 1149,
							"name": "from",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new Buffer containing the given JavaScript string {str}.\nIf provided, the {encoding} parameter identifies the character encoding.\nIf not provided, {encoding} defaults to 'utf8'."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 337,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1150,
									"name": "str",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 1238,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												],
												"name": "WithImplicitCoercion",
												"package": "@types/node",
												"qualifiedName": "__global.WithImplicitCoercion"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1151,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 1152,
															"name": "[toPrimitive]",
															"variant": "declaration",
															"kind": 2048,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
																	"line": 341,
																	"character": 24
																}
															],
															"signatures": [
																{
																	"id": 1153,
																	"name": "[toPrimitive]",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
																			"line": 341,
																			"character": 24
																		}
																	],
																	"parameters": [
																		{
																			"id": 1154,
																			"name": "hint",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "literal",
																				"value": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															]
														}
													],
													"groups": [
														{
															"title": "Methods",
															"children": [
																1152
															]
														}
													],
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
															"line": 340,
															"character": 22
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 1155,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1208,
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				},
				{
					"id": 1159,
					"name": "isBuffer",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 364,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1160,
							"name": "isBuffer",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if "
									},
									{
										"kind": "code",
										"text": "`obj`"
									},
									{
										"kind": "text",
										"text": " is a "
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nBuffer.isBuffer(Buffer.alloc(10)); // true\nBuffer.isBuffer(Buffer.from('foo')); // true\nBuffer.isBuffer('a string'); // false\nBuffer.isBuffer([]); // false\nBuffer.isBuffer(new Uint8Array(1024)); // false\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 364,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1161,
									"name": "obj",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "obj",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"target": 668,
									"name": "Buffer",
									"package": "@types/node",
									"qualifiedName": "__global.Buffer"
								}
							}
						}
					]
				},
				{
					"id": 1162,
					"name": "isEncoding",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 387,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1163,
							"name": "isEncoding",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if "
									},
									{
										"kind": "code",
										"text": "`encoding`"
									},
									{
										"kind": "text",
										"text": " is the name of a supported character encoding,\nor "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { Buffer } from 'node:buffer';\n\nconsole.log(Buffer.isEncoding('utf8'));\n// Prints: true\n\nconsole.log(Buffer.isEncoding('hex'));\n// Prints: true\n\nconsole.log(Buffer.isEncoding('utf/8'));\n// Prints: false\n\nconsole.log(Buffer.isEncoding(''));\n// Prints: false\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.1"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 387,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1164,
									"name": "encoding",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A character encoding name to check."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "encoding",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"target": 1208,
									"name": "BufferEncoding",
									"package": "@types/node",
									"qualifiedName": "__global.BufferEncoding"
								}
							}
						}
					]
				},
				{
					"id": 1156,
					"name": "of",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
							"line": 349,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 1157,
							"name": "of",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new Buffer using the passed {data}"
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 349,
									"character": 12
								}
							],
							"parameters": [
								{
									"id": 1158,
									"name": "items",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 668,
								"name": "Buffer",
								"package": "@types/node",
								"qualifiedName": "__global.Buffer"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1194
					]
				},
				{
					"title": "Properties",
					"children": [
						1193
					]
				},
				{
					"title": "Methods",
					"children": [
						1182,
						1187,
						1190,
						1165,
						1178,
						1169,
						1173,
						1140,
						1159,
						1162,
						1156
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
					"line": 255,
					"character": 18
				}
			]
		},
		{
			"id": 280,
			"name": "Context",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A shared context object that is used to share resources between the application and the module."
					}
				]
			},
			"children": [
				{
					"id": 284,
					"name": "enableNestedTransactions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A boolean value indicating whether nested transactions are enabled."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/shared-context.ts",
							"line": 40,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/shared-context.ts#L40"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 283,
					"name": "isolationLevel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the isolation level of the context. Possible values are "
							},
							{
								"kind": "code",
								"text": "`READ UNCOMMITTED`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`READ COMMITTED`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`REPEATABLE READ`"
							},
							{
								"kind": "text",
								"text": ", or "
							},
							{
								"kind": "code",
								"text": "`SERIALIZABLE`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/shared-context.ts",
							"line": 36,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/shared-context.ts#L36"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 282,
					"name": "manager",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of a manager, typically an entity manager, of type "
							},
							{
								"kind": "code",
								"text": "`TManager`"
							},
							{
								"kind": "text",
								"text": ", which is a typed parameter passed to the context to specify the type of the "
							},
							{
								"kind": "code",
								"text": "`manager`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/shared-context.ts",
							"line": 32,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/shared-context.ts#L32"
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TManager",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 285,
					"name": "transactionId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the ID of the current transaction."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/shared-context.ts",
							"line": 44,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/shared-context.ts#L44"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 281,
					"name": "transactionManager",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of a transaction manager of type "
							},
							{
								"kind": "code",
								"text": "`TManager`"
							},
							{
								"kind": "text",
								"text": ", which is a typed parameter passed to the context to specify the type of the "
							},
							{
								"kind": "code",
								"text": "`transactionManager`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/shared-context.ts",
							"line": 28,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/shared-context.ts#L28"
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TManager",
						"refersToTypeParameter": true
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						284,
						283,
						282,
						285,
						281
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/shared-context.ts",
					"line": 24,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/shared-context.ts#L24"
				}
			],
			"typeParameters": [
				{
					"id": 286,
					"name": "TManager",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			]
		},
		{
			"id": 478,
			"name": "CreateProductCategoryDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product category to create."
					}
				]
			},
			"children": [
				{
					"id": 480,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product category's handle."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 334,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L334"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 481,
					"name": "is_active",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product category is active."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 338,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L338"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 482,
					"name": "is_internal",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product category is internal. This can be used to only show the product category to admins and hide it from customers."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 342,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L342"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 485,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 354,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L354"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 479,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product category's name."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 330,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L330"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 484,
					"name": "parent_category_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the parent product category, if it has any."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 350,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L350"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 483,
					"name": "rank",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ranking of the category among sibling categories."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 346,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L346"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						480,
						481,
						482,
						485,
						479,
						484,
						483
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 326,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L326"
				}
			]
		},
		{
			"id": 444,
			"name": "CreateProductCollectionDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product collection to create."
					}
				]
			},
			"children": [
				{
					"id": 446,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product collection's handle. If not provided, the value of this attribute is set to the slug version of the title."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 835,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L835"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 448,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 843,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L843"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 447,
					"name": "product_ids",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The products to associate with the collection."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 839,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L839"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 445,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product collection's title."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 831,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L831"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						446,
						448,
						447,
						445
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 827,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L827"
				}
			]
		},
		{
			"id": 494,
			"name": "CreateProductDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product to create."
					}
				]
			},
			"children": [
				{
					"id": 511,
					"name": "categories",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product categories to associate with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1224,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1224"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 512,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"children": [
									{
										"id": 513,
										"name": "id",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/types/src/product/common.ts",
												"line": 1224,
												"character": 17,
												"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1224"
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"children": [
											513
										]
									}
								],
								"sources": [
									{
										"fileName": "packages/types/src/product/common.ts",
										"line": 1224,
										"character": 15,
										"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1224"
									}
								]
							}
						}
					}
				},
				{
					"id": 509,
					"name": "collection_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product collection to be associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1216,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1216"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 497,
					"name": "description",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The description of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1178,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1178"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 499,
					"name": "discountable",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product can be discounted."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1186,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1186"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 505,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The handle of the product. The handle can be used to create slug URL paths.\nIf not supplied, the value of the "
							},
							{
								"kind": "code",
								"text": "`handle`"
							},
							{
								"kind": "text",
								"text": " attribute of the product is set to the slug version of the "
							},
							{
								"kind": "code",
								"text": "`title`"
							},
							{
								"kind": "text",
								"text": " attribute."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1200,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1200"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 517,
					"name": "height",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The height of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1240,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1240"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 521,
					"name": "hs_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The HS Code of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1256,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1256"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 500,
					"name": "images",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product's images. If an array of strings is supplied, each string will be a URL and a "
							},
							{
								"kind": "code",
								"text": "`ProductImage`"
							},
							{
								"kind": "text",
								"text": " will be created\nand associated with the product. If an array of objects is supplied, you can pass along the ID of an existing "
							},
							{
								"kind": "code",
								"text": "`ProductImage`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1191,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1191"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 501,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"children": [
											{
												"id": 502,
												"name": "id",
												"variant": "declaration",
												"kind": 1024,
												"flags": {
													"isOptional": true
												},
												"sources": [
													{
														"fileName": "packages/types/src/product/common.ts",
														"line": 1191,
														"character": 24,
														"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1191"
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 503,
												"name": "url",
												"variant": "declaration",
												"kind": 1024,
												"flags": {},
												"sources": [
													{
														"fileName": "packages/types/src/product/common.ts",
														"line": 1191,
														"character": 37,
														"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1191"
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"children": [
													502,
													503
												]
											}
										],
										"sources": [
											{
												"fileName": "packages/types/src/product/common.ts",
												"line": 1191,
												"character": 22,
												"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1191"
											}
										]
									}
								}
							}
						]
					}
				},
				{
					"id": 498,
					"name": "is_giftcard",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product is a gift card."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1182,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1182"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 518,
					"name": "length",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The length of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1244,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1244"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 522,
					"name": "material",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The material of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1260,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1260"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 524,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1268,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1268"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 523,
					"name": "mid_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The MID Code of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1264,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1264"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 514,
					"name": "options",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product options to be created and associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1228,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1228"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 349,
							"name": "CreateProductOptionDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 520,
					"name": "origin_country",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The origin country of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1252,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1252"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 506,
					"name": "status",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The status of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1204,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1204"
						}
					],
					"type": {
						"type": "reference",
						"target": 587,
						"name": "ProductStatus",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 496,
					"name": "subtitle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The subttle of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1174,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1174"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 510,
					"name": "tags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product tags to be created and associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1220,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1220"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 313,
							"name": "CreateProductTagDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 504,
					"name": "thumbnail",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The URL of the product's thumbnail."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1195,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1195"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 495,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The title of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1170,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1170"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 507,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product type to create and associate with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1208,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1208"
						}
					],
					"type": {
						"type": "reference",
						"target": 328,
						"name": "CreateProductTypeDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 508,
					"name": "type_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product type to be associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1212,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1212"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 515,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product variants to be created and associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1232,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1232"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 411,
							"name": "CreateProductVariantDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 519,
					"name": "weight",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The weight of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1248,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1248"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 516,
					"name": "width",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The width of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1236,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1236"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						511,
						509,
						497,
						499,
						505,
						517,
						521,
						500,
						498,
						518,
						522,
						524,
						523,
						514,
						520,
						506,
						496,
						510,
						504,
						495,
						507,
						508,
						515,
						519,
						516
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 1166,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1166"
				}
			]
		},
		{
			"id": 349,
			"name": "CreateProductOptionDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product option to create."
					}
				]
			},
			"children": [
				{
					"id": 351,
					"name": "product_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 970,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L970"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 350,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product option's title."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 966,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L966"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						351,
						350
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 962,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L962"
				}
			]
		},
		{
			"id": 313,
			"name": "CreateProductTagDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product tag to create."
					}
				]
			},
			"children": [
				{
					"id": 314,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the product tag."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 932,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L932"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						314
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 928,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L928"
				}
			]
		},
		{
			"id": 328,
			"name": "CreateProductTypeDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product type to create."
					}
				]
			},
			"children": [
				{
					"id": 329,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product type's ID."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 887,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L887"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 331,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 895,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L895"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 330,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product type's value."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 891,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L891"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						329,
						331,
						330
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 883,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L883"
				}
			]
		},
		{
			"id": 411,
			"name": "CreateProductVariantDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product variant to create."
					}
				]
			},
			"children": [
				{
					"id": 418,
					"name": "allow_backorder",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product variant can be ordered when it's out of stock."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1026,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1026"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 415,
					"name": "barcode",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The barcode of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1014,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1014"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 416,
					"name": "ean",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The EAN of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1018,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1018"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 427,
					"name": "height",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The height of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1062,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1062"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 421,
					"name": "hs_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The HS Code of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1038,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1038"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 419,
					"name": "inventory_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The inventory quantiy of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1030,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1030"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 426,
					"name": "length",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The length of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1058,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1058"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 420,
					"name": "manage_inventory",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product variant's inventory should be managed by the core system."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1034,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1034"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 424,
					"name": "material",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The material of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1050,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1050"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 430,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1074,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1074"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 423,
					"name": "mid_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The MID Code of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1046,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1046"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 429,
					"name": "options",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product variant options to create and associate with the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1070,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1070"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 630,
							"name": "CreateProductVariantOptionDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 422,
					"name": "origin_country",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The origin country of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1042,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1042"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 412,
					"name": "product_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The id of the product"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1002,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1002"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 414,
					"name": "sku",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The SKU of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1010,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1010"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 413,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The tile of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1006,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1006"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 417,
					"name": "upc",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The UPC of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1022,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1022"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 425,
					"name": "weight",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The weight of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1054,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1054"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 428,
					"name": "width",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The width of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1066,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1066"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						418,
						415,
						416,
						427,
						421,
						419,
						426,
						420,
						424,
						430,
						423,
						429,
						422,
						412,
						414,
						413,
						417,
						425,
						428
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 998,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L998"
				}
			]
		},
		{
			"id": 630,
			"name": "CreateProductVariantOptionDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product variant option to create."
					}
				]
			},
			"children": [
				{
					"id": 632,
					"name": "option_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 990,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L990"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 631,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of a product variant option."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 988,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L988"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						632,
						631
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 984,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L984"
				}
			]
		},
		{
			"id": 468,
			"name": "FilterableProductCategoryProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The filters to apply on retrieved product categories."
					}
				]
			},
			"children": [
				{
					"id": 476,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L14"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 468,
									"name": "FilterableProductCategoryProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 468,
											"name": "FilterableProductCategoryProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 598,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 477,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L18"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 468,
									"name": "FilterableProductCategoryProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 468,
											"name": "FilterableProductCategoryProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 599,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 472,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The handles to filter product categories by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 802,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L802"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 469,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter product categories by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 790,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L790"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 475,
					"name": "include_descendants_tree",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether to include children of retrieved product categories."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 814,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L814"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 473,
					"name": "is_active",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filter product categories by whether they're active."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 806,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L806"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 474,
					"name": "is_internal",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filter product categories by whether they're internal."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 810,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L810"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 470,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The names to filter product categories by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 794,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L794"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 471,
					"name": "parent_category_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filter product categories by their parent category's ID."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 798,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L798"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						476,
						477,
						472,
						469,
						475,
						473,
						474,
						470,
						471
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 785,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L785"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 597,
					"typeArguments": [
						{
							"type": "reference",
							"target": 468,
							"name": "FilterableProductCategoryProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 438,
			"name": "FilterableProductCollectionProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The filters to apply on retrieved product collections."
					}
				]
			},
			"children": [
				{
					"id": 442,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L14"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 438,
									"name": "FilterableProductCollectionProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 438,
											"name": "FilterableProductCollectionProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 598,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 443,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L18"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 438,
									"name": "FilterableProductCollectionProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 438,
											"name": "FilterableProductCollectionProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 599,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 440,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The handles to filter product collections by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 730,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L730"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 439,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter product collections by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 726,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L726"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 441,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The title to filter product collections by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 734,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L734"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						442,
						443,
						440,
						439,
						441
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 721,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L721"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 597,
					"typeArguments": [
						{
							"type": "reference",
							"target": 438,
							"name": "FilterableProductCollectionProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 343,
			"name": "FilterableProductOptionProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The filters to apply on retrieved product options."
					}
				]
			},
			"children": [
				{
					"id": 347,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L14"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 343,
									"name": "FilterableProductOptionProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 343,
											"name": "FilterableProductOptionProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 598,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 348,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L18"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 343,
									"name": "FilterableProductOptionProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 343,
											"name": "FilterableProductOptionProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 599,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 344,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter product options by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 702,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L702"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 346,
					"name": "product_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filter the product options by their associated products' IDs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 710,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L710"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 345,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The titles to filter product options by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 706,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L706"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						347,
						348,
						344,
						346,
						345
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 697,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L697"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 597,
					"typeArguments": [
						{
							"type": "reference",
							"target": 343,
							"name": "FilterableProductOptionProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 287,
			"name": "FilterableProductProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The filters to apply on retrieved products."
					}
				]
			},
			"children": [
				{
					"id": 301,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L14"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 287,
									"name": "FilterableProductProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 287,
											"name": "FilterableProductProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 598,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 302,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L18"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 287,
									"name": "FilterableProductProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 287,
											"name": "FilterableProductProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 599,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 294,
					"name": "categories",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filters on a product's categories."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 624,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L624"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 295,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 296,
									"name": "id",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "IDs to filter categories by."
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/product/common.ts",
											"line": 628,
											"character": 4,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L628"
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "reference",
												"target": 601,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												],
												"name": "OperatorMap",
												"package": "@medusajs/types"
											}
										]
									}
								},
								{
									"id": 298,
									"name": "is_active",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filter categories by whether they're active."
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/product/common.ts",
											"line": 636,
											"character": 4,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L636"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 297,
									"name": "is_internal",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filter categories by whether they're internal"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/product/common.ts",
											"line": 632,
											"character": 4,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L632"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										296,
										298,
										297
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/types/src/product/common.ts",
									"line": 624,
									"character": 15,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L624"
								}
							]
						}
					}
				},
				{
					"id": 299,
					"name": "category_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filter a product by the IDs of their associated categories."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 641,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L641"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"type": "reference",
								"target": 601,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "OperatorMap",
								"package": "@medusajs/types"
							}
						]
					}
				},
				{
					"id": 300,
					"name": "collection_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filters a product by its associated collections."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 645,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L645"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"type": "reference",
								"target": 601,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "OperatorMap",
								"package": "@medusajs/types"
							}
						]
					}
				},
				{
					"id": 289,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The handles to filter products by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 607,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L607"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 290,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter products by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 611,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L611"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 288,
					"name": "q",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Search through the products' attributes, such as titles and descriptions, using this search term."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 603,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L603"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 291,
					"name": "tags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filters on a product's tags."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 615,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L615"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 292,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 293,
									"name": "value",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Values to filter product tags by."
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/product/common.ts",
											"line": 619,
											"character": 4,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L619"
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										293
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/types/src/product/common.ts",
									"line": 615,
									"character": 9,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L615"
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						301,
						302,
						294,
						299,
						300,
						289,
						290,
						288,
						291
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 598,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L598"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 597,
					"typeArguments": [
						{
							"type": "reference",
							"target": 287,
							"name": "FilterableProductProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 308,
			"name": "FilterableProductTagProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The filters to apply on retrieved product tags."
					}
				]
			},
			"children": [
				{
					"id": 311,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L14"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 308,
									"name": "FilterableProductTagProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 308,
											"name": "FilterableProductTagProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 598,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 312,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L18"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 308,
									"name": "FilterableProductTagProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 308,
											"name": "FilterableProductTagProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 599,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 309,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter product tags by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 661,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L661"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 310,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value to filter product tags by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 665,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L665"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						311,
						312,
						309,
						310
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 656,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L656"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 597,
					"typeArguments": [
						{
							"type": "reference",
							"target": 308,
							"name": "FilterableProductTagProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 323,
			"name": "FilterableProductTypeProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The filters to apply on retrieved product types."
					}
				]
			},
			"children": [
				{
					"id": 326,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L14"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 323,
									"name": "FilterableProductTypeProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 323,
											"name": "FilterableProductTypeProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 598,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 327,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L18"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 323,
									"name": "FilterableProductTypeProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 323,
											"name": "FilterableProductTypeProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 599,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 324,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter product types by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 681,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L681"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 325,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value to filter product types by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 685,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L685"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						326,
						327,
						324,
						325
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 676,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L676"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 597,
					"typeArguments": [
						{
							"type": "reference",
							"target": 323,
							"name": "FilterableProductTypeProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 382,
			"name": "FilterableProductVariantProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The filters to apply on retrieved product variants."
					}
				]
			},
			"children": [
				{
					"id": 389,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L14"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 382,
									"name": "FilterableProductVariantProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 382,
											"name": "FilterableProductVariantProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 598,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 390,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/index.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/index.ts#L18"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 382,
									"name": "FilterableProductVariantProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 597,
									"typeArguments": [
										{
											"type": "reference",
											"target": 382,
											"name": "FilterableProductVariantProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 599,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 383,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter product variants by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 752,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L752"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 386,
					"name": "options",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filter product variants by their associated options."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 764,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L764"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 387,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 388,
									"name": "id",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "IDs to filter options by."
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/product/common.ts",
											"line": 768,
											"character": 4,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L768"
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										388
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/types/src/product/common.ts",
									"line": 764,
									"character": 12,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L764"
								}
							]
						}
					}
				},
				{
					"id": 385,
					"name": "product_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filter the product variants by their associated products' IDs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 760,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L760"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 384,
					"name": "sku",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The SKUs to filter product variants by."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 756,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L756"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						389,
						390,
						383,
						386,
						385,
						384
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 747,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L747"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 597,
					"typeArguments": [
						{
							"type": "reference",
							"target": 382,
							"name": "FilterableProductVariantProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 239,
			"name": "FindConfig",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An object that is used to configure how an entity is retrieved from the database. It accepts as a typed parameter an "
					},
					{
						"kind": "code",
						"text": "`Entity`"
					},
					{
						"kind": "text",
						"text": " class,\nwhich provides correct typing of field names in its properties."
					}
				]
			},
			"children": [
				{
					"id": 244,
					"name": "order",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An object used to specify how to sort the returned records. Its keys are the names of attributes of the entity, and a key's value can either be "
							},
							{
								"kind": "code",
								"text": "`ASC`"
							},
							{
								"kind": "text",
								"text": "\nto sort retrieved records in an ascending order, or "
							},
							{
								"kind": "code",
								"text": "`DESC`"
							},
							{
								"kind": "text",
								"text": " to sort retrieved records in a descending order."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/common/common.ts",
							"line": 70,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/common/common.ts#L70"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 245,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/src/common/common.ts",
									"line": 70,
									"character": 10,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/common/common.ts#L70"
								}
							],
							"indexSignature": {
								"id": 246,
								"name": "__index",
								"variant": "signature",
								"kind": 8192,
								"flags": {},
								"sources": [
									{
										"fileName": "packages/types/src/common/common.ts",
										"line": 70,
										"character": 12,
										"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/common/common.ts#L70"
									}
								],
								"parameters": [
									{
										"id": 247,
										"name": "K",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": "ASC"
										},
										{
											"type": "literal",
											"value": "DESC"
										}
									]
								}
							}
						}
					}
				},
				{
					"id": 243,
					"name": "relations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of strings, each being relation names of the entity to retrieve in the result."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/common/common.ts",
							"line": 65,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/common/common.ts#L65"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 240,
					"name": "select",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of strings, each being attribute names of the entity to retrieve in the result."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/common/common.ts",
							"line": 53,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/common/common.ts#L53"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "typeOperator",
									"operator": "keyof",
									"target": {
										"type": "reference",
										"target": -1,
										"name": "Entity",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				},
				{
					"id": 241,
					"name": "skip",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A number indicating the number of records to skip before retrieving the results."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/common/common.ts",
							"line": 57,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/common/common.ts#L57"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 242,
					"name": "take",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A number indicating the number of records to return in the result."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/common/common.ts",
							"line": 61,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/common/common.ts#L61"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 248,
					"name": "withDeleted",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A boolean indicating whether deleted records should also be retrieved as part of the result. This only works if the entity extends the\n"
							},
							{
								"kind": "code",
								"text": "`SoftDeletableEntity`"
							},
							{
								"kind": "text",
								"text": " class."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/common/common.ts",
							"line": 75,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/common/common.ts#L75"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						244,
						243,
						240,
						241,
						242,
						248
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/common/common.ts",
					"line": 49,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/common/common.ts#L49"
				}
			],
			"typeParameters": [
				{
					"id": 249,
					"name": "Entity",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			]
		},
		{
			"id": 1,
			"name": "IProductModuleService",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 182,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2392,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2392"
						}
					],
					"signatures": [
						{
							"id": 183,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create a product."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of created products."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function createProduct (title: string) {\n  const productModule = await initializeProductModule()\n\n  const products = await productModule.create([\n    {\n      title\n    }\n  ])\n\n  // do something with the products or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2392,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2392"
								}
							],
							"parameters": [
								{
									"id": 184,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to be created."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 494,
											"name": "CreateProductDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 185,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 250,
											"name": "ProductDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 169,
					"name": "createCategory",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2314,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2314"
						}
					],
					"signatures": [
						{
							"id": 170,
							"name": "createCategory",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The created product category."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function createCategory (name: string, parent_category_id: string | null) {\n  const productModule = await initializeProductModule()\n\n  const category = await productModule.createCategory({\n    name,\n    parent_category_id\n  })\n\n  // do something with the product category or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2314,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2314"
								}
							],
							"parameters": [
								{
									"id": 171,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product category to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 478,
										"name": "CreateProductCategoryDTO",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 172,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 456,
										"name": "ProductCategoryDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 142,
					"name": "createCollections",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1967,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1967"
						}
					],
					"signatures": [
						{
							"id": 143,
							"name": "createCollections",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create product collections."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of created product collections."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function createCollection (title: string) {\n  const productModule = await initializeProductModule()\n\n  const collections = await productModule.createCollections([\n    {\n      title\n    }\n  ])\n\n  // do something with the product collections or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1967,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1967"
								}
							],
							"parameters": [
								{
									"id": 144,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product collections to be created."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 444,
											"name": "CreateProductCollectionDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 145,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 431,
											"name": "ProductCollectionDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 88,
					"name": "createOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1279,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1279"
						}
					],
					"signatures": [
						{
							"id": 89,
							"name": "createOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create product options."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of created product options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function createProductOption (title: string, productId: string) {\n  const productModule = await initializeProductModule()\n\n  const productOptions = await productModule.createOptions([\n    {\n      title,\n      product_id: productId\n    }\n  ])\n\n  // do something with the product options or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1279,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1279"
								}
							],
							"parameters": [
								{
									"id": 90,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product options to be created."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 349,
											"name": "CreateProductOptionDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 91,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 336,
											"name": "ProductOptionDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 34,
					"name": "createTags",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 593,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L593"
						}
					],
					"signatures": [
						{
							"id": 35,
							"name": "createTags",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create product tags."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product tags."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function createProductTags (values: string[]) {\n  const productModule = await initializeProductModule()\n\n  const productTags = await productModule.createTags(\n    values.map((value) => ({\n      value\n    }))\n  )\n\n  // do something with the product tags or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 593,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L593"
								}
							],
							"parameters": [
								{
									"id": 36,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product tags to create."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 313,
											"name": "CreateProductTagDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 37,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 303,
											"name": "ProductTagDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 61,
					"name": "createTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 936,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L936"
						}
					],
					"signatures": [
						{
							"id": 62,
							"name": "createTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create a product type."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of created product types."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function createProductType (value: string) {\n  const productModule = await initializeProductModule()\n\n  const productTypes = await productModule.createTypes([\n    {\n      value\n    }\n  ])\n\n  // do something with the product types or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 936,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L936"
								}
							],
							"parameters": [
								{
									"id": 63,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product types to be created."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 328,
											"name": "CreateProductTypeDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 64,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 318,
											"name": "ProductTypeDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 114,
					"name": "createVariants",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1545,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1545"
						}
					],
					"signatures": [
						{
							"id": 115,
							"name": "createVariants",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create variants for a product."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The created product variants' details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function createProductVariants (items: {\n  product_id: string,\n  title: string\n}[]) {\n  const productModule = await initializeProductModule()\n\n  const productVariants = await productModule.createVariants(items)\n\n  // do something with the product variants or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1545,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1545"
								}
							],
							"parameters": [
								{
									"id": 116,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variants to create."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 411,
											"name": "CreateProductVariantDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 117,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 356,
											"name": "ProductVariantDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 190,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2445,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2445"
						}
					],
					"signatures": [
						{
							"id": 191,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete products. Unlike the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "softDelete",
										"target": 194,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method, this method will completely remove the products and they can no longer be accessed or retrieved."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the products are successfully deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function deleteProducts (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  await productModule.delete(ids)\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2445,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2445"
								}
							],
							"parameters": [
								{
									"id": 192,
									"name": "productIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the products to be deleted."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 193,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 178,
					"name": "deleteCategory",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2366,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2366"
						}
					],
					"signatures": [
						{
							"id": 179,
							"name": "deleteCategory",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete a product category by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the product category is successfully deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function deleteCategory (id: string) {\n  const productModule = await initializeProductModule()\n\n  await productModule.deleteCategory(id)\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2366,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2366"
								}
							],
							"parameters": [
								{
									"id": 180,
									"name": "categoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 181,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 150,
					"name": "deleteCollections",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2022,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2022"
						}
					],
					"signatures": [
						{
							"id": 151,
							"name": "deleteCollections",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete collections by their ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the product options are successfully deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function deleteCollection (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  await productModule.deleteCollections(ids)\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2022,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2022"
								}
							],
							"parameters": [
								{
									"id": 152,
									"name": "productCollectionIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the product collections to be updated."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 153,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 96,
					"name": "deleteOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1332,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1332"
						}
					],
					"signatures": [
						{
							"id": 97,
							"name": "deleteOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete a product option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the product options are successfully deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function deleteProductOptions (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  await productModule.deleteOptions(ids)\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1332,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1332"
								}
							],
							"parameters": [
								{
									"id": 98,
									"name": "productOptionIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the product options to delete."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 99,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 42,
					"name": "deleteTags",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 647,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L647"
						}
					],
					"signatures": [
						{
							"id": 43,
							"name": "deleteTags",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete product tags by their ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the product tags are successfully deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function deleteProductTags (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  await productModule.deleteTags(ids)\n\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 647,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L647"
								}
							],
							"parameters": [
								{
									"id": 44,
									"name": "productTagIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the product tags to be deleted."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 45,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 69,
					"name": "deleteTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 989,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L989"
						}
					],
					"signatures": [
						{
							"id": 70,
							"name": "deleteTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete a product type."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the product types are successfully deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function deleteProductTypes (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  await productModule.deleteTypes(ids)\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 989,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L989"
								}
							],
							"parameters": [
								{
									"id": 71,
									"name": "productTypeIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the product types to be deleted."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 72,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 118,
					"name": "deleteVariants",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1568,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1568"
						}
					],
					"signatures": [
						{
							"id": 119,
							"name": "deleteVariants",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete ProductVariant. This method will completely remove the ProductVariant and they can no longer be accessed or retrieved."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the ProductVariant are successfully deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function deleteProducts (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  await productModule.deleteVariants(ids)\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1568,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1568"
								}
							],
							"parameters": [
								{
									"id": 120,
									"name": "productVariantIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the ProductVariant to be deleted."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 121,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 9,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 194,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L194"
						}
					],
					"signatures": [
						{
							"id": 10,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of price sets based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of products."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of products using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProducts (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const products = await productModule.list({\n    id: ids\n  })\n\n  // do something with the products or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProducts (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const products = await productModule.list({\n    id: ids\n  }, {\n    relations: [\"categories\"]\n  })\n\n  // do something with the products or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProducts (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const products = await productModule.list({\n    id: ids\n  }, {\n    relations: [\"categories\"],\n    skip,\n    take\n  })\n\n  // do something with the products or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProducts (ids: string[], title: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const products = await productModule.list({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        q: title\n      }\n    ]\n  }, {\n    relations: [\"categories\"],\n    skip,\n    take\n  })\n\n  // do something with the products or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 194,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L194"
								}
							],
							"parameters": [
								{
									"id": 11,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 287,
										"name": "FilterableProductProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 12,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the products are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 250,
												"name": "ProductDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 13,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 250,
											"name": "ProductDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 14,
					"name": "listAndCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 300,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L300"
						}
					],
					"signatures": [
						{
							"id": 15,
							"name": "listAndCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of products along with the total count of available products satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of products along with the total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of products using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProducts (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [products, count] = await productModule.listAndCount({\n    id: ids\n  })\n\n  // do something with the products or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProducts (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [products, count] = await productModule.listAndCount({\n    id: ids\n  }, {\n    relations: [\"categories\"]\n  })\n\n  // do something with the products or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProducts (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [products, count] = await productModule.listAndCount({\n    id: ids\n  }, {\n    relations: [\"categories\"],\n    skip,\n    take\n  })\n\n  // do something with the products or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProducts (ids: string[], title: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [products, count] = await productModule.listAndCount({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        q: title\n      }\n    ]\n  }, {\n    relations: [\"categories\"],\n    skip,\n    take\n  })\n\n  // do something with the products or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 300,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L300"
								}
							],
							"parameters": [
								{
									"id": 16,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 287,
										"name": "FilterableProductProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 17,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the products are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 250,
												"name": "ProductDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 18,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 250,
													"name": "ProductDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 164,
					"name": "listAndCountCategories",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2284,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2284"
						}
					],
					"signatures": [
						{
							"id": 165,
							"name": "listAndCountCategories",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product categories along with the total count of available product categories satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product categories along with their total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product categories using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCategories (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [categories, count] = await productModule.listAndCountCategories({\n    id: ids\n  })\n\n  // do something with the product category or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCategories (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [categories, count] = await productModule.listAndCountCategories({\n    id: ids\n  }, {\n    relations: [\"parent_category\"]\n  })\n\n  // do something with the product category or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCategories (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [categories, count] = await productModule.listAndCountCategories({\n    id: ids\n  }, {\n    relations: [\"parent_category\"],\n    skip,\n    take\n  })\n\n  // do something with the product category or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCategories (ids: string[], name: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [categories, count] = await productModule.listAndCountCategories({\n    $or: [\n      {\n        id: ids\n      },\n      {\n        name\n      }\n    ]\n  }, {\n    relations: [\"parent_category\"],\n    skip,\n    take\n  })\n\n  // do something with the product category or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2284,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2284"
								}
							],
							"parameters": [
								{
									"id": 166,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 468,
										"name": "FilterableProductCategoryProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 167,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product categories are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 456,
												"name": "ProductCategoryDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 168,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 456,
													"name": "ProductCategoryDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 137,
					"name": "listAndCountCollections",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1936,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1936"
						}
					],
					"signatures": [
						{
							"id": 138,
							"name": "listAndCountCollections",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product collections along with the total count of available product collections satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product collections along with the total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product collections using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCollections (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [collections, count] = await productModule.listAndCountCollections({\n    id: ids\n  })\n\n  // do something with the product collections or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product collections:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCollections (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [collections, count] = await productModule.listAndCountCollections({\n    id: ids\n  }, {\n    relations: [\"products\"]\n  })\n\n  // do something with the product collections or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCollections (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [collections, count] = await productModule.listAndCountCollections({\n    id: ids\n  }, {\n    relations: [\"products\"],\n    skip,\n    take\n  })\n\n  // do something with the product collections or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCollections (ids: string[], title: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [collections, count] = await productModule.listAndCountCollections({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        title\n      }\n    ]\n  }, {\n    relations: [\"products\"],\n    skip,\n    take\n  })\n\n  // do something with the product collections or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1936,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1936"
								}
							],
							"parameters": [
								{
									"id": 139,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters applied on the retrieved product collections."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 438,
										"name": "FilterableProductCollectionProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 140,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product collections are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 431,
												"name": "ProductCollectionDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 141,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 431,
													"name": "ProductCollectionDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 83,
					"name": "listAndCountOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1248,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1248"
						}
					],
					"signatures": [
						{
							"id": 84,
							"name": "listAndCountOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product options along with the total count of available product options satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product options along with the total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product options using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductOptions (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [productOptions, count] = await productModule.listAndCountOptions({\n    id: ids\n  })\n\n  // do something with the product options or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductOptions (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [productOptions, count] = await productModule.listAndCountOptions({\n    id: ids\n  }, {\n    relations: [\"product\"]\n  })\n\n  // do something with the product options or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductOptions (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [productOptions, count] = await productModule.listAndCountOptions({\n    id: ids\n  }, {\n    relations: [\"product\"],\n    skip,\n    take\n  })\n\n  // do something with the product options or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductOptions (ids: string[], title: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [productOptions, count] = await productModule.listAndCountOptions({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        title\n      }\n    ]\n  }, {\n    relations: [\"product\"],\n    skip,\n    take\n  })\n\n  // do something with the product options or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1248,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1248"
								}
							],
							"parameters": [
								{
									"id": 85,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters applied on the retrieved product options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 343,
										"name": "FilterableProductOptionProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 86,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product options are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 336,
												"name": "ProductOptionDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 87,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 336,
													"name": "ProductOptionDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 29,
					"name": "listAndCountTags",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 563,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L563"
						}
					],
					"signatures": [
						{
							"id": 30,
							"name": "listAndCountTags",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product tags along with the total count of available product tags satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product tags along with the total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product tags using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTag (tagIds: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [productTags, count] = await productModule.listAndCountTags({\n    id: tagIds\n  })\n\n  // do something with the product tags or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product tags:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTag (tagIds: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [productTags, count] = await productModule.listAndCountTags({\n    id: tagIds\n  }, {\n    relations: [\"products\"]\n  })\n\n  // do something with the product tags or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTag (tagIds: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [productTags, count] = await productModule.listAndCountTags({\n    id: tagIds\n  }, {\n    relations: [\"products\"],\n    skip,\n    take\n  })\n\n  // do something with the product tags or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTag (tagIds: string[], value: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [productTags, count] = await productModule.listAndCountTags({\n    $and: [\n      {\n        id: tagIds\n      },\n      {\n        value\n      }\n    ]\n  }, {\n    relations: [\"products\"],\n    skip,\n    take\n  })\n\n  // do something with the product tags or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 563,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L563"
								}
							],
							"parameters": [
								{
									"id": 31,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters applied on the retrieved product tags."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 308,
										"name": "FilterableProductTagProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 32,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product tags are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product tag."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 303,
												"name": "ProductTagDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 33,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 303,
													"name": "ProductTagDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 56,
					"name": "listAndCountTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 906,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L906"
						}
					],
					"signatures": [
						{
							"id": 57,
							"name": "listAndCountTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product types along with the total count of available product types satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product types along with their total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product types using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTypes (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [productTypes, count] = await productModule.listAndCountTypes({\n    id: ids\n  })\n\n  // do something with the product types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify attributes that should be retrieved within the product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTypes (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [productTypes, count] = await productModule.listAndCountTypes({\n    id: ids\n  }, {\n    select: [\"value\"]\n  })\n\n  // do something with the product types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTypes (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [productTypes, count] = await productModule.listAndCountTypes({\n    id: ids\n  }, {\n    select: [\"value\"],\n    skip,\n    take\n  })\n\n  // do something with the product types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTypes (ids: string[], value: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [productTypes, count] = await productModule.listAndCountTypes({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        value\n      }\n    ]\n  }, {\n    select: [\"value\"],\n    skip,\n    take\n  })\n\n  // do something with the product types or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 906,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L906"
								}
							],
							"parameters": [
								{
									"id": 58,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to be applied on the retrieved product type."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 323,
										"name": "FilterableProductTypeProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 59,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product types are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product type."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 318,
												"name": "ProductTypeDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 60,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 318,
													"name": "ProductTypeDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 122,
					"name": "listAndCountVariants",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1673,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1673"
						}
					],
					"signatures": [
						{
							"id": 123,
							"name": "listAndCountVariants",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product variants along with the total count of available product variants satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product variants along with their total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product variants using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductVariants (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [variants, count] = await productModule.listAndCountVariants({\n    id: ids\n  })\n\n  // do something with the product variants or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductVariants (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const [variants, count] = await productModule.listAndCountVariants({\n    id: ids\n  }, {\n    relations: [\"options\"]\n  })\n\n  // do something with the product variants or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductVariants (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [variants, count] = await productModule.listAndCountVariants({\n    id: ids\n  }, {\n    relations: [\"options\"],\n    skip,\n    take\n  })\n\n  // do something with the product variants or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductVariants (ids: string[], sku: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const [variants, count] = await productModule.listAndCountVariants({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        sku\n      }\n    ]\n  }, {\n    relations: [\"options\"],\n    skip,\n    take\n  })\n\n  // do something with the product variants or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1673,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1673"
								}
							],
							"parameters": [
								{
									"id": 124,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters applied on the retrieved product variants."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 382,
										"name": "FilterableProductVariantProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 125,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product variants are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 356,
												"name": "ProductVariantDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 126,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 356,
													"name": "ProductVariantDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 159,
					"name": "listCategories",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2178,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2178"
						}
					],
					"signatures": [
						{
							"id": 160,
							"name": "listCategories",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product categories based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product categories."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product categories using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCategories (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const categories = await productModule.listCategories({\n    id: ids\n  })\n\n  // do something with the product category or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCategories (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const categories = await productModule.listCategories({\n    id: ids\n  }, {\n    relations: [\"parent_category\"]\n  })\n\n  // do something with the product category or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCategories (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const categories = await productModule.listCategories({\n    id: ids\n  }, {\n    relations: [\"parent_category\"],\n    skip,\n    take\n  })\n\n  // do something with the product category or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCategories (ids: string[], name: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const categories = await productModule.listCategories({\n    $or: [\n      {\n        id: ids\n      },\n      {\n        name\n      }\n    ]\n  }, {\n    relations: [\"parent_category\"],\n    skip,\n    take\n  })\n\n  // do something with the product category or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2178,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2178"
								}
							],
							"parameters": [
								{
									"id": 161,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to be applied on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 468,
										"name": "FilterableProductCategoryProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 162,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product categories are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 456,
												"name": "ProductCategoryDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 163,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 456,
											"name": "ProductCategoryDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 132,
					"name": "listCollections",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1830,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1830"
						}
					],
					"signatures": [
						{
							"id": 133,
							"name": "listCollections",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product collections based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product collections."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product collections using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCollections (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const collections = await productModule.listCollections({\n    id: ids\n  })\n\n  // do something with the product collections or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product collections:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCollections (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const collections = await productModule.listCollections({\n    id: ids\n  }, {\n    relations: [\"products\"]\n  })\n\n  // do something with the product collections or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCollections (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const collections = await productModule.listCollections({\n    id: ids\n  }, {\n    relations: [\"products\"],\n    skip,\n    take\n  })\n\n  // do something with the product collections or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCollections (ids: string[], title: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const collections = await productModule.listCollections({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        title\n      }\n    ]\n  }, {\n    relations: [\"products\"],\n    skip,\n    take\n  })\n\n  // do something with the product collections or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1830,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1830"
								}
							],
							"parameters": [
								{
									"id": 134,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters applied on the retrieved product collections."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 438,
										"name": "FilterableProductCollectionProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 135,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product collections are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 431,
												"name": "ProductCollectionDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 136,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 431,
											"name": "ProductCollectionDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 78,
					"name": "listOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1142,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1142"
						}
					],
					"signatures": [
						{
							"id": 79,
							"name": "listOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product options based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product options using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductOptions (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const productOptions = await productModule.listOptions({\n    id: ids\n  })\n\n  // do something with the product options or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductOptions (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const productOptions = await productModule.listOptions({\n    id: ids\n  }, {\n    relations: [\"product\"]\n  })\n\n  // do something with the product options or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductOptions (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const productOptions = await productModule.listOptions({\n    id: ids\n  }, {\n    relations: [\"product\"],\n    skip,\n    take\n  })\n\n  // do something with the product options or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductOptions (ids: string[], title: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const productOptions = await productModule.listOptions({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        title\n      }\n    ]\n  }, {\n    relations: [\"product\"],\n    skip,\n    take\n  })\n\n  // do something with the product options or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1142,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1142"
								}
							],
							"parameters": [
								{
									"id": 80,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters applied on the retrieved product options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 343,
										"name": "FilterableProductOptionProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 81,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product options are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 336,
												"name": "ProductOptionDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 82,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 336,
											"name": "ProductOptionDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 24,
					"name": "listTags",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 457,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L457"
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "listTags",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of tags based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product tags."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product tags using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTag (tagIds: string[]) {\n  const productModule = await initializeProductModule()\n\n  const productTags = await productModule.listTags({\n    id: tagIds\n  })\n\n  // do something with the product tags or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product tags:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTag (tagIds: string[]) {\n  const productModule = await initializeProductModule()\n\n  const productTags = await productModule.listTags({\n    id: tagIds\n  }, {\n    relations: [\"products\"]\n  })\n\n  // do something with the product tags or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTag (tagIds: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const productTags = await productModule.listTags({\n    id: tagIds\n  }, {\n    relations: [\"products\"],\n    skip,\n    take\n  })\n\n  // do something with the product tags or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTag (tagIds: string[], value: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const productTags = await productModule.listTags({\n    $and: [\n      {\n        id: tagIds\n      },\n      {\n        value\n      }\n    ]\n  }, {\n    relations: [\"products\"],\n    skip,\n    take\n  })\n\n  // do something with the product tags or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 457,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L457"
								}
							],
							"parameters": [
								{
									"id": 26,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters applied on the retrieved product tags."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 308,
										"name": "FilterableProductTagProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 27,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product tags are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product tag."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 303,
												"name": "ProductTagDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 28,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 303,
											"name": "ProductTagDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 51,
					"name": "listTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 800,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L800"
						}
					],
					"signatures": [
						{
							"id": 52,
							"name": "listTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product types based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product types."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product types using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTypes (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const productTypes = await productModule.listTypes({\n    id: ids\n  })\n\n  // do something with the product types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify attributes that should be retrieved within the product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTypes (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const productTypes = await productModule.listTypes({\n    id: ids\n  }, {\n    select: [\"value\"]\n  })\n\n  // do something with the product types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTypes (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const productTypes = await productModule.listTypes({\n    id: ids\n  }, {\n    select: [\"value\"],\n    skip,\n    take\n  })\n\n  // do something with the product types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTypes (ids: string[], value: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const productTypes = await productModule.listTypes({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        value\n      }\n    ]\n  }, {\n    select: [\"value\"],\n    skip,\n    take\n  })\n\n  // do something with the product types or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 800,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L800"
								}
							],
							"parameters": [
								{
									"id": 53,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved product types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 323,
										"name": "FilterableProductTypeProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 54,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product types are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product type."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 318,
												"name": "ProductTypeDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 55,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 318,
											"name": "ProductTypeDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 105,
					"name": "listVariants",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1488,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1488"
						}
					],
					"signatures": [
						{
							"id": 106,
							"name": "listVariants",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of product variants based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of product variants."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of product variants using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductVariants (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const variants = await productModule.listVariants({\n    id: ids\n  })\n\n  // do something with the product variants or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductVariants (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const variants = await productModule.listVariants({\n    id: ids\n  }, {\n    relations: [\"options\"]\n  })\n\n  // do something with the product variants or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductVariants (ids: string[], skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const variants = await productModule.listVariants({\n    id: ids\n  }, {\n    relations: [\"options\"],\n    skip,\n    take\n  })\n\n  // do something with the product variants or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductVariants (ids: string[], sku: string, skip: number, take: number) {\n  const productModule = await initializeProductModule()\n\n  const variants = await productModule.listVariants({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        sku\n      }\n    ]\n  }, {\n    relations: [\"options\"],\n    skip,\n    take\n  })\n\n  // do something with the product variants or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1488,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1488"
								}
							],
							"parameters": [
								{
									"id": 107,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters applied on the retrieved product variants."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 382,
										"name": "FilterableProductVariantProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 108,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product variants are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 356,
												"name": "ProductVariantDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 109,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 356,
											"name": "ProductVariantDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 200,
					"name": "restore",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2509,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2509"
						}
					],
					"signatures": [
						{
							"id": 201,
							"name": "restore",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to restore products which were deleted using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "softDelete",
										"target": 194,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object that includes the IDs of related records that were restored, such as the ID of associated product variants. The object's keys are the ID attribute names of the product entity's relations, such as "
											},
											{
												"kind": "code",
												"text": "`variant_id`"
											},
											{
												"kind": "text",
												"text": ", and its value is an array of strings, each being the ID of the record associated with the product through this relation, such as the IDs of associated product variants.\n\nIf there are no related records that were restored, the promise resolved to "
											},
											{
												"kind": "code",
												"text": "`void`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function restoreProducts (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const cascadedEntities = await productModule.restore(ids, {\n    returnLinkableKeys: [\"variant_id\"]\n  })\n\n  // do something with the returned cascaded entity IDs or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2509,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2509"
								}
							],
							"typeParameter": [
								{
									"id": 202,
									"name": "TReturnableLinkableKeys",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 203,
									"name": "productIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the products to restore."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 204,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations determining which relations to restore along with each of the products. You can pass to its "
											},
											{
												"kind": "code",
												"text": "`returnLinkableKeys`"
											},
											{
												"kind": "text",
												"text": "\nproperty any of the product's relation attribute names, such as "
											},
											{
												"kind": "code",
												"text": "`variant_id`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 563,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "TReturnableLinkableKeys",
												"refersToTypeParameter": true
											}
										],
										"name": "RestoreReturn",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 205,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": 560,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 206,
					"name": "restoreVariants",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2541,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2541"
						}
					],
					"signatures": [
						{
							"id": 207,
							"name": "restoreVariants",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to restore product varaints that were soft deleted. Product variants are soft deleted when they're not \nprovided in a product's details passed to the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "update",
										"target": 186,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object that includes the IDs of related records that were restored. The object's keys are the ID attribute names of the product variant entity's relations \nand its value is an array of strings, each being the ID of the record associated with the product variant through this relation.\n\nIf there are no related records that were restored, the promise resolved to "
											},
											{
												"kind": "code",
												"text": "`void`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function restoreProductVariants (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  await productModule.restoreVariants(ids)\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2541,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2541"
								}
							],
							"typeParameter": [
								{
									"id": 208,
									"name": "TReturnableLinkableKeys",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 209,
									"name": "variantIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the variants to restore."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 210,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations determining which relations to restore along with each of the product variants. You can pass to its "
											},
											{
												"kind": "code",
												"text": "`returnLinkableKeys`"
											},
											{
												"kind": "text",
												"text": "\nproperty any of the product variant's relation attribute names."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 563,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "TReturnableLinkableKeys",
												"refersToTypeParameter": true
											}
										],
										"name": "RestoreReturn",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 211,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": 560,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 4,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 88,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L88"
						}
					],
					"signatures": [
						{
							"id": 5,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a product by its ID"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved product."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProduct (id: string) {\n  const productModule = await initializeProductModule()\n\n  const product = await productModule.retrieve(id)\n\n  // do something with the product or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProduct (id: string) {\n  const productModule = await initializeProductModule()\n\n  const product = await productModule.retrieve(id, {\n    relations: [\"categories\"]\n  })\n\n  // do something with the product or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 88,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L88"
								}
							],
							"parameters": [
								{
									"id": 6,
									"name": "productId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 7,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 250,
												"name": "ProductDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 8,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 250,
										"name": "ProductDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 154,
					"name": "retrieveCategory",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2072,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2072"
						}
					],
					"signatures": [
						{
							"id": 155,
							"name": "retrieveCategory",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a product category by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved product category."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product category by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCategory (id: string) {\n  const productModule = await initializeProductModule()\n\n  const category = await productModule.retrieveCategory(id)\n\n  // do something with the product category or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCategory (id: string) {\n  const productModule = await initializeProductModule()\n\n  const category = await productModule.retrieveCategory(id, {\n    relations: [\"parent_category\"]\n  })\n\n  // do something with the product category or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2072,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2072"
								}
							],
							"parameters": [
								{
									"id": 156,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 157,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product category is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 456,
												"name": "ProductCategoryDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 158,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 456,
										"name": "ProductCategoryDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 127,
					"name": "retrieveCollection",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1724,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1724"
						}
					],
					"signatures": [
						{
							"id": 128,
							"name": "retrieveCollection",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a product collection by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved product collection."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product collection by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCollection (id: string) {\n  const productModule = await initializeProductModule()\n\n  const collection = await productModule.retrieveCollection(id)\n\n  // do something with the product collection or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveCollection (id: string) {\n  const productModule = await initializeProductModule()\n\n  const collection = await productModule.retrieveCollection(id, {\n    relations: [\"products\"]\n  })\n\n  // do something with the product collection or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1724,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1724"
								}
							],
							"parameters": [
								{
									"id": 129,
									"name": "productCollectionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 130,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product collection is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 431,
												"name": "ProductCollectionDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 131,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 431,
										"name": "ProductCollectionDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 73,
					"name": "retrieveOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1036,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1036"
						}
					],
					"signatures": [
						{
							"id": 74,
							"name": "retrieveOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a product option by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved product option."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product option by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductOption (id: string) {\n  const productModule = await initializeProductModule()\n\n  const productOption = await productModule.retrieveOption(id)\n\n  // do something with the product option or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductOption (id: string) {\n  const productModule = await initializeProductModule()\n\n  const productOption = await productModule.retrieveOption(id, {\n    relations: [\"product\"]\n  })\n\n  // do something with the product option or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1036,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1036"
								}
							],
							"parameters": [
								{
									"id": 75,
									"name": "optionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product option to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 76,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product option is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 336,
												"name": "ProductOptionDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 77,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 336,
										"name": "ProductOptionDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 19,
					"name": "retrieveTag",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 351,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L351"
						}
					],
					"signatures": [
						{
							"id": 20,
							"name": "retrieveTag",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a tag by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved product tag."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product tag by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTag (tagId: string) {\n  const productModule = await initializeProductModule()\n\n  const productTag = await productModule.retrieveTag(tagId)\n\n  // do something with the product tag or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductTag (tagId: string) {\n  const productModule = await initializeProductModule()\n\n  const productTag = await productModule.retrieveTag(tagId, {\n    relations: [\"products\"]\n  })\n\n  // do something with the product tag or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 351,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L351"
								}
							],
							"parameters": [
								{
									"id": 21,
									"name": "tagId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the tag to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 22,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product tag is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product tag."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 303,
												"name": "ProductTagDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 23,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 303,
										"name": "ProductTagDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 46,
					"name": "retrieveType",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 694,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L694"
						}
					],
					"signatures": [
						{
							"id": 47,
							"name": "retrieveType",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a product type by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved product type."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product type by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductType (id: string) {\n  const productModule = await initializeProductModule()\n\n  const productType = await productModule.retrieveType(id)\n\n  // do something with the product type or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify attributes that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductType (id: string) {\n  const productModule = await initializeProductModule()\n\n  const productType = await productModule.retrieveType(id, {\n    select: [\"value\"]\n  })\n\n  // do something with the product type or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 694,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L694"
								}
							],
							"parameters": [
								{
									"id": 48,
									"name": "typeId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product type to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 49,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product type is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product type."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 318,
												"name": "ProductTypeDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 50,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 318,
										"name": "ProductTypeDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 100,
					"name": "retrieveVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1382,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1382"
						}
					],
					"signatures": [
						{
							"id": 101,
							"name": "retrieveVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a product variant by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved product variant."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product variant by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductVariant (id: string) {\n  const productModule = await initializeProductModule()\n\n  const variant = await productModule.retrieveVariant(id)\n\n  // do something with the product variant or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function retrieveProductVariant (id: string) {\n  const productModule = await initializeProductModule()\n\n  const variant = await productModule.retrieveVariant(id, {\n    relations: [\"options\"]\n  })\n\n  // do something with the product variant or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1382,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1382"
								}
							],
							"parameters": [
								{
									"id": 102,
									"name": "productVariantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 103,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the product variant is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 356,
												"name": "ProductVariantDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 104,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 356,
										"name": "ProductVariantDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 194,
					"name": "softDelete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2475,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2475"
						}
					],
					"signatures": [
						{
							"id": 195,
							"name": "softDelete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete products. Unlike the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "delete",
										"target": 190,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method, this method won't completely remove the product. It can still be accessed or retrieved using methods like "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "retrieve",
										"target": 4,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " if you pass the "
									},
									{
										"kind": "code",
										"text": "`withDeleted`"
									},
									{
										"kind": "text",
										"text": " property to the "
									},
									{
										"kind": "code",
										"text": "`config`"
									},
									{
										"kind": "text",
										"text": " object parameter.\n\nThe soft-deleted products can be restored using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "restore",
										"target": 200,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object that includes the IDs of related records that were also soft deleted, such as the ID of associated product variants. The object's keys are the ID attribute names of the product entity's relations, such as "
											},
											{
												"kind": "code",
												"text": "`variant_id`"
											},
											{
												"kind": "text",
												"text": ", and its value is an array of strings, each being the ID of a record associated with the product through this relation, such as the IDs of associated product variants.\n\nIf there are no related records, the promise resolved to "
											},
											{
												"kind": "code",
												"text": "`void`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function deleteProducts (ids: string[]) {\n  const productModule = await initializeProductModule()\n\n  const cascadedEntities = await productModule.softDelete(ids)\n\n  // do something with the returned cascaded entity IDs or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2475,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2475"
								}
							],
							"typeParameter": [
								{
									"id": 196,
									"name": "TReturnableLinkableKeys",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 197,
									"name": "productIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the products to soft-delete."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 198,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations determining which relations to soft delete along with the each of the products. You can pass to its "
											},
											{
												"kind": "code",
												"text": "`returnLinkableKeys`"
											},
											{
												"kind": "text",
												"text": "\nproperty any of the product's relation attribute names, such as "
											},
											{
												"kind": "code",
												"text": "`variant_id`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 557,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "TReturnableLinkableKeys",
												"refersToTypeParameter": true
											}
										],
										"name": "SoftDeleteReturn",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 199,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": 560,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 186,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2422,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2422"
						}
					],
					"signatures": [
						{
							"id": 187,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update a product."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of updated products."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function updateProduct (id: string, title: string) {\n  const productModule = await initializeProductModule()\n\n  const products = await productModule.update([\n    {\n      id,\n      title\n    }\n  ])\n\n  // do something with the products or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2422,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2422"
								}
							],
							"parameters": [
								{
									"id": 188,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to be updated, each holding the attributes that should be updated in the product."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 525,
											"name": "UpdateProductDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 189,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 250,
											"name": "ProductDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 173,
					"name": "updateCategory",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 2342,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2342"
						}
					],
					"signatures": [
						{
							"id": 174,
							"name": "updateCategory",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update a product category by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The updated product category."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function updateCategory (id: string, name: string) {\n  const productModule = await initializeProductModule()\n\n  const category = await productModule.updateCategory(id, {\n    name,\n  })\n\n  // do something with the product category or return it\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 2342,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L2342"
								}
							],
							"parameters": [
								{
									"id": 175,
									"name": "categoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 176,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in th product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 486,
										"name": "UpdateProductCategoryDTO",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 177,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 456,
										"name": "ProductCategoryDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 146,
					"name": "updateCollections",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1998,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1998"
						}
					],
					"signatures": [
						{
							"id": 147,
							"name": "updateCollections",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update existing product collections."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of updated product collections."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function updateCollection (id: string, title: string) {\n  const productModule = await initializeProductModule()\n\n  const collections = await productModule.updateCollections([\n    {\n      id,\n      title\n    }\n  ])\n\n  // do something with the product collections or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1998,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1998"
								}
							],
							"parameters": [
								{
									"id": 148,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product collections to be updated, each holding the attributes that should be updated in the product collection."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 449,
											"name": "UpdateProductCollectionDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 149,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 431,
											"name": "ProductCollectionDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 92,
					"name": "updateOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1309,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1309"
						}
					],
					"signatures": [
						{
							"id": 93,
							"name": "updateOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update existing product options."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of updated product options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function updateProductOption (id: string, title: string) {\n  const productModule = await initializeProductModule()\n\n  const productOptions = await productModule.updateOptions([\n    {\n      id,\n      title\n    }\n  ])\n\n  // do something with the product options or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1309,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1309"
								}
							],
							"parameters": [
								{
									"id": 94,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product options to be updated, each holding the attributes that should be updated in the product option."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 352,
											"name": "UpdateProductOptionDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 95,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 336,
											"name": "ProductOptionDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 38,
					"name": "updateTags",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 623,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L623"
						}
					],
					"signatures": [
						{
							"id": 39,
							"name": "updateTags",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update existing product tags."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of updated product tags."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function updateProductTag (id: string, value: string) {\n  const productModule = await initializeProductModule()\n\n  const productTags = await productModule.updateTags([\n    {\n      id,\n      value\n    }\n  ])\n\n  // do something with the product tags or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 623,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L623"
								}
							],
							"parameters": [
								{
									"id": 40,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product tags to be updated, each having the attributes that should be updated in a product tag."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 315,
											"name": "UpdateProductTagDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 41,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 303,
											"name": "ProductTagDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 65,
					"name": "updateTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 966,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L966"
						}
					],
					"signatures": [
						{
							"id": 66,
							"name": "updateTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update a product type"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of updated product types."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\n\nasync function updateProductType (id: string, value: string) {\n  const productModule = await initializeProductModule()\n\n  const productTypes = await productModule.updateTypes([\n    {\n      id,\n      value\n    }\n  ])\n\n  // do something with the product types or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 966,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L966"
								}
							],
							"parameters": [
								{
									"id": 67,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product types to be updated, each having the attributes that should be updated in the product type."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 332,
											"name": "UpdateProductTypeDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 68,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 318,
											"name": "ProductTypeDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 110,
					"name": "updateVariants",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/service.ts",
							"line": 1517,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1517"
						}
					],
					"signatures": [
						{
							"id": 111,
							"name": "updateVariants",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update a product's variants."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The updated product variants's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeProductModule,\n} from \"@medusajs/product\"\nimport { \n  UpdateProductVariantDTO\n} from \"@medusajs/product/dist/types/services/product-variant\"\n\nasync function updateProductVariants (items: UpdateProductVariantDTO[]) {\n  const productModule = await initializeProductModule()\n\n  const productVariants = await productModule.updateVariants(items)\n\n  // do something with the product variants or return them\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/product/service.ts",
									"line": 1517,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L1517"
								}
							],
							"parameters": [
								{
									"id": 112,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variants to update."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 391,
											"name": "UpdateProductVariantDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 113,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 280,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 356,
											"name": "ProductVariantDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						182,
						169,
						142,
						88,
						34,
						61,
						114,
						190,
						178,
						150,
						96,
						42,
						69,
						118,
						9,
						14,
						164,
						137,
						83,
						29,
						56,
						122,
						159,
						132,
						78,
						24,
						51,
						105,
						200,
						206,
						4,
						154,
						127,
						73,
						19,
						46,
						100,
						194,
						186,
						173,
						146,
						92,
						38,
						65,
						110
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/service.ts",
					"line": 37,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/service.ts#L37"
				}
			]
		},
		{
			"id": 1209,
			"name": "IterableIterator",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1210,
					"name": "[iterator]",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 53,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1211,
							"name": "[iterator]",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 53,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 1209,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								],
								"name": "IterableIterator",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1212,
					"name": "next",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 43,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1213,
							"name": "next",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 43,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1214,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "tuple"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1267,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "IteratorResult",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1256,
								"name": "Iterator.next"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1255,
						"name": "Iterator.next"
					}
				},
				{
					"id": 1215,
					"name": "return",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 44,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1216,
							"name": "return",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 44,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1217,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1267,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "IteratorResult",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1259,
								"name": "Iterator.return"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1258,
						"name": "Iterator.return"
					}
				},
				{
					"id": 1218,
					"name": "throw",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1219,
							"name": "throw",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 45,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1220,
									"name": "e",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1267,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "IteratorResult",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1262,
								"name": "Iterator.throw"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1261,
						"name": "Iterator.throw"
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						1210,
						1212,
						1215,
						1218
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
					"line": 52,
					"character": 10
				}
			],
			"typeParameters": [
				{
					"id": 1221,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 1254,
					"typeArguments": [
						{
							"type": "reference",
							"target": -1,
							"name": "T",
							"refersToTypeParameter": true
						}
					],
					"name": "Iterator",
					"package": "typescript"
				}
			]
		},
		{
			"id": 1254,
			"name": "Iterator",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1255,
					"name": "next",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 43,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1256,
							"name": "next",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 43,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1257,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "tuple"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "reference",
														"target": -1,
														"name": "TNext",
														"refersToTypeParameter": true
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1267,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": -1,
										"name": "TReturn",
										"refersToTypeParameter": true
									}
								],
								"name": "IteratorResult",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1258,
					"name": "return",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 44,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1259,
							"name": "return",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 44,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1260,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "TReturn",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1267,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": -1,
										"name": "TReturn",
										"refersToTypeParameter": true
									}
								],
								"name": "IteratorResult",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1261,
					"name": "throw",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1262,
							"name": "throw",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 45,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1263,
									"name": "e",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1267,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": -1,
										"name": "TReturn",
										"refersToTypeParameter": true
									}
								],
								"name": "IteratorResult",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						1255,
						1258,
						1261
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
					"line": 41,
					"character": 10
				}
			],
			"typeParameters": [
				{
					"id": 1264,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 1265,
					"name": "TReturn",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"default": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 1266,
					"name": "TNext",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"default": {
						"type": "intrinsic",
						"name": "undefined"
					}
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 1209,
					"name": "IterableIterator"
				}
			]
		},
		{
			"id": 1281,
			"name": "IteratorReturnResult",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1282,
					"name": "done",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": true
					}
				},
				{
					"id": 1283,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TReturn",
						"refersToTypeParameter": true
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1282,
						1283
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
					"line": 34,
					"character": 10
				}
			],
			"typeParameters": [
				{
					"id": 1284,
					"name": "TReturn",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			]
		},
		{
			"id": 1277,
			"name": "IteratorYieldResult",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1278,
					"name": "done",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 30,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": false
					}
				},
				{
					"id": 1279,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 31,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TYield",
						"refersToTypeParameter": true
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1278,
						1279
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
					"line": 29,
					"character": 10
				}
			],
			"typeParameters": [
				{
					"id": 1280,
					"name": "TYield",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			]
		},
		{
			"id": 569,
			"name": "JoinerServiceConfig",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 571,
					"name": "alias",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Property name to use as entrypoint to the service"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/joiner/index.ts",
							"line": 38,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L38"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 639,
								"name": "JoinerServiceConfigAlias",
								"package": "@medusajs/types"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 639,
									"name": "JoinerServiceConfigAlias",
									"package": "@medusajs/types"
								}
							}
						]
					}
				},
				{
					"id": 582,
					"name": "args",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extra arguments to pass to the remoteFetchData callback"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/joiner/index.ts",
							"line": 59,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L59"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 578,
					"name": "extends",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/types/src/joiner/index.ts",
							"line": 52,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L52"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 579,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"children": [
									{
										"id": 581,
										"name": "relationship",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/types/src/joiner/index.ts",
												"line": 54,
												"character": 4,
												"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L54"
											}
										],
										"type": {
											"type": "reference",
											"target": 642,
											"name": "JoinerRelationship",
											"package": "@medusajs/types"
										}
									},
									{
										"id": 580,
										"name": "serviceName",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/types/src/joiner/index.ts",
												"line": 53,
												"character": 4,
												"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L53"
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"children": [
											581,
											580
										]
									}
								],
								"sources": [
									{
										"fileName": "packages/types/src/joiner/index.ts",
										"line": 52,
										"character": 12,
										"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L52"
									}
								]
							}
						}
					}
				},
				{
					"id": 572,
					"name": "fieldAlias",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "alias for deeper nested relationships (e.g. { 'price': 'prices.calculated_price_set.amount' })"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/joiner/index.ts",
							"line": 42,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L42"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 573,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 575,
													"name": "forwardArgumentsOnPath",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/types/src/joiner/index.ts",
															"line": 47,
															"character": 8,
															"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L47"
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												},
												{
													"id": 574,
													"name": "path",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/types/src/joiner/index.ts",
															"line": 46,
															"character": 8,
															"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L46"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														575,
														574
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/types/src/joiner/index.ts",
													"line": 45,
													"character": 6,
													"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L45"
												}
											]
										}
									}
								]
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 576,
					"name": "primaryKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/joiner/index.ts",
							"line": 50,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L50"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 577,
					"name": "relationships",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/types/src/joiner/index.ts",
							"line": 51,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L51"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 642,
							"name": "JoinerRelationship",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 570,
					"name": "serviceName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/joiner/index.ts",
							"line": 34,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L34"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						571,
						582,
						578,
						572,
						576,
						577,
						570
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/joiner/index.ts",
					"line": 33,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L33"
				}
			]
		},
		{
			"id": 639,
			"name": "JoinerServiceConfigAlias",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 641,
					"name": "args",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extra arguments to pass to the remoteFetchData callback"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/joiner/index.ts",
							"line": 30,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L30"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 640,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/joiner/index.ts",
							"line": 26,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L26"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						641,
						640
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/joiner/index.ts",
					"line": 25,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L25"
				}
			]
		},
		{
			"id": 456,
			"name": "ProductCategoryDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product category's data."
					}
				]
			},
			"children": [
				{
					"id": 465,
					"name": "category_children",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated child categories."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 310,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L310"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 456,
							"name": "ProductCategoryDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 466,
					"name": "created_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product category was created."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 314,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L314"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 459,
					"name": "description",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The description of the product category."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 282,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L282"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 460,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The handle of the product category. The handle can be used to create slug URL paths."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 286,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L286"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 457,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product category."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 274,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L274"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 461,
					"name": "is_active",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product category is active."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 290,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L290"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 462,
					"name": "is_internal",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product category is internal. This can be used to only show the product category to admins and hide it from customers."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 294,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L294"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 458,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The name of the product category."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 278,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L278"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 464,
					"name": "parent_category",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated parent category."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 304,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L304"
						}
					],
					"type": {
						"type": "reference",
						"target": 456,
						"name": "ProductCategoryDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 463,
					"name": "rank",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ranking of the product category among sibling categories."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 298,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L298"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 467,
					"name": "updated_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product category was updated."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 318,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L318"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						465,
						466,
						459,
						460,
						457,
						461,
						462,
						458,
						464,
						463,
						467
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 270,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L270"
				}
			]
		},
		{
			"id": 431,
			"name": "ProductCollectionDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product collection's data."
					}
				]
			},
			"children": [
				{
					"id": 436,
					"name": "deleted_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product collection was deleted."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 444,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L444"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 434,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The handle of the product collection. The handle can be used to create slug URL paths."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 436,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L436"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 432,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product collection."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 428,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L428"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 435,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 440,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L440"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": 560,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 437,
					"name": "products",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated products."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 450,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L450"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 250,
							"name": "ProductDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 433,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The title of the product collection."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 432,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L432"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						436,
						434,
						432,
						435,
						437,
						433
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 424,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L424"
				}
			]
		},
		{
			"id": 250,
			"name": "ProductDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product's data."
					}
				]
			},
			"children": [
				{
					"id": 268,
					"name": "categories",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product categories."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 95,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L95"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 456,
									"name": "ProductCategoryDTO",
									"package": "@medusajs/types"
								}
							}
						]
					}
				},
				{
					"id": 267,
					"name": "collection",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product collection."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 89,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L89"
						}
					],
					"type": {
						"type": "reference",
						"target": 431,
						"name": "ProductCollectionDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 276,
					"name": "created_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product was created."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 138,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L138"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 278,
					"name": "deleted_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product was deleted."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 146,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L146"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 255,
					"name": "description",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The description of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 39,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L39"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 274,
					"name": "discountable",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product can be discounted."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 129,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L129"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 275,
					"name": "external_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product in an external system. This is useful if you're integrating the product with a third-party service and want to maintain\na reference to the ID in the integrated service."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 134,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L134"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 253,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The handle of the product. The handle can be used to create slug URL paths."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 31,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L31"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 262,
					"name": "height",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The height of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 67,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L67"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 264,
					"name": "hs_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The HS Code of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 75,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L75"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 251,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 23,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L23"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 273,
					"name": "images",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product images."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 125,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L125"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 592,
							"name": "ProductImageDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 256,
					"name": "is_giftcard",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product is a gift card."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 43,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L43"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 261,
					"name": "length",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The length of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 63,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L63"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 266,
					"name": "material",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The material of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 83,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L83"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 279,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 150,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L150"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 265,
					"name": "mid_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The MID Code of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 79,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L79"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 272,
					"name": "options",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product options."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 119,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L119"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 336,
							"name": "ProductOptionDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 263,
					"name": "origin_country",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The origin country of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 71,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L71"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 257,
					"name": "status",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The status of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 47,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L47"
						}
					],
					"type": {
						"type": "reference",
						"target": 587,
						"name": "ProductStatus",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 254,
					"name": "subtitle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The subttle of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 35,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L35"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 270,
					"name": "tags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product tags."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 107,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L107"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 303,
							"name": "ProductTagDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 258,
					"name": "thumbnail",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The URL of the product's thumbnail."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 51,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L51"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 252,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The title of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 27,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L27"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 269,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product type."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 101,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L101"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 318,
							"name": "ProductTypeDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 277,
					"name": "updated_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product was updated."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 142,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L142"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 271,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product variants."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 113,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L113"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 356,
							"name": "ProductVariantDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 260,
					"name": "weight",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The weight of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 59,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L59"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 259,
					"name": "width",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The width of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 55,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L55"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						268,
						267,
						276,
						278,
						255,
						274,
						275,
						253,
						262,
						264,
						251,
						273,
						256,
						261,
						266,
						279,
						265,
						272,
						263,
						257,
						254,
						270,
						258,
						252,
						269,
						277,
						271,
						260,
						259
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 19,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L19"
				}
			]
		},
		{
			"id": 592,
			"name": "ProductImageDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The product image's data."
					}
				]
			},
			"children": [
				{
					"id": 596,
					"name": "deleted_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product image was deleted."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 540,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L540"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 593,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product image."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 528,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L528"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 595,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 536,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L536"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": 560,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 594,
					"name": "url",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The URL of the product image."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 532,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L532"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						596,
						593,
						595,
						594
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 524,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L524"
				}
			]
		},
		{
			"id": 336,
			"name": "ProductOptionDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product option's data."
					}
				]
			},
			"children": [
				{
					"id": 342,
					"name": "deleted_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product option was deleted."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 511,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L511"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 337,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product option."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 487,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L487"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 341,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 507,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L507"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": 560,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 339,
					"name": "product",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 497,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L497"
						}
					],
					"type": {
						"type": "reference",
						"target": 250,
						"name": "ProductDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 338,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The title of the product option."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 491,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L491"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 340,
					"name": "values",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product option values."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 503,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L503"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 623,
							"name": "ProductOptionValueDTO",
							"package": "@medusajs/types"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						342,
						337,
						341,
						339,
						338,
						340
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 483,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L483"
				}
			]
		},
		{
			"id": 623,
			"name": "ProductOptionValueDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The product option value's data."
					}
				]
			},
			"children": [
				{
					"id": 629,
					"name": "deleted_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product option value was deleted."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 583,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L583"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 624,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product option value."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 559,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L559"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 628,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 579,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L579"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": 560,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 626,
					"name": "option",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product option. It may only be available if the "
							},
							{
								"kind": "code",
								"text": "`option`"
							},
							{
								"kind": "text",
								"text": " relation is expanded."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 569,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L569"
						}
					],
					"type": {
						"type": "reference",
						"target": 336,
						"name": "ProductOptionDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 625,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the product option value."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 563,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L563"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 627,
					"name": "variant",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product variant. It may only be available if the "
							},
							{
								"kind": "code",
								"text": "`variant`"
							},
							{
								"kind": "text",
								"text": " relation is expanded."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 575,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L575"
						}
					],
					"type": {
						"type": "reference",
						"target": 356,
						"name": "ProductVariantDTO",
						"package": "@medusajs/types"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						629,
						624,
						628,
						626,
						625,
						627
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 555,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L555"
				}
			]
		},
		{
			"id": 303,
			"name": "ProductTagDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product tag's data."
					}
				]
			},
			"children": [
				{
					"id": 304,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product tag."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 402,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L402"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 306,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 410,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L410"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": 560,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 307,
					"name": "products",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated products."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 416,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L416"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 250,
							"name": "ProductDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 305,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the product tag."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 406,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L406"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						304,
						306,
						307,
						305
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 398,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L398"
				}
			]
		},
		{
			"id": 318,
			"name": "ProductTypeDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product type's data."
					}
				]
			},
			"children": [
				{
					"id": 322,
					"name": "deleted_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product type was deleted."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 474,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L474"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 319,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product type."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 462,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L462"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 321,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 470,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L470"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": 560,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 320,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the product type."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 466,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L466"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						322,
						319,
						321,
						320
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 458,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L458"
				}
			]
		},
		{
			"id": 356,
			"name": "ProductVariantDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A product variant's data."
					}
				]
			},
			"children": [
				{
					"id": 364,
					"name": "allow_backorder",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product variant can be ordered when it's out of stock."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 190,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L190"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 360,
					"name": "barcode",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The barcode of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 174,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L174"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 379,
					"name": "created_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product variant was created."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 254,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L254"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 381,
					"name": "deleted_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product variant was deleted."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 262,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L262"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 361,
					"name": "ean",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The EAN of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 178,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L178"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 372,
					"name": "height",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The height of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 222,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L222"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 366,
					"name": "hs_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The HS Code of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 198,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L198"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 357,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 162,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L162"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 363,
					"name": "inventory_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The inventory quantiy of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 186,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L186"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 371,
					"name": "length",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The length of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 218,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L218"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 365,
					"name": "manage_inventory",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product variant's inventory should be managed by the core system."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 194,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L194"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 369,
					"name": "material",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The material of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 210,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L210"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 375,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 236,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L236"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": 560,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 368,
					"name": "mid_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The MID Code of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 206,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L206"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 374,
					"name": "options",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product options."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 232,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L232"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 623,
							"name": "ProductOptionValueDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 367,
					"name": "origin_country",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The origin country of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 202,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L202"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 376,
					"name": "product",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated product."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 242,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L242"
						}
					],
					"type": {
						"type": "reference",
						"target": 250,
						"name": "ProductDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 377,
					"name": "product_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 246,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L246"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 359,
					"name": "sku",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The SKU of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 170,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L170"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 358,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The tile of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 166,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L166"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 362,
					"name": "upc",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The UPC of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 182,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L182"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 380,
					"name": "updated_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the product variant was updated."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 258,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L258"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 378,
					"name": "variant_rank",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "he ranking of the variant among other variants associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 250,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L250"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 370,
					"name": "weight",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The weight of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 214,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L214"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 373,
					"name": "width",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The width of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 226,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L226"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						364,
						360,
						379,
						381,
						361,
						372,
						366,
						357,
						363,
						371,
						365,
						369,
						375,
						368,
						374,
						367,
						376,
						377,
						359,
						358,
						362,
						380,
						378,
						370,
						373
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 158,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L158"
				}
			]
		},
		{
			"id": 563,
			"name": "RestoreReturn",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An object that is used to specify an entity's related entities that should be restored when the main entity is restored."
					}
				]
			},
			"children": [
				{
					"id": 564,
					"name": "returnLinkableKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of strings, each being the ID attribute names of the entity's relations."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/repository-service.ts",
							"line": 103,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/repository-service.ts#L103"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": -1,
							"name": "TReturnableLinkableKeys",
							"refersToTypeParameter": true
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						564
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/dal/repository-service.ts",
					"line": 99,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/repository-service.ts#L99"
				}
			],
			"typeParameters": [
				{
					"id": 565,
					"name": "TReturnableLinkableKeys",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 1244,
			"name": "SharedArrayBuffer",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1250,
					"name": "[species]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
							"line": 32,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"target": 1243,
						"name": "SharedArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 1251,
					"name": "[toStringTag]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
							"line": 33,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": "SharedArrayBuffer"
					}
				},
				{
					"id": 1245,
					"name": "byteLength",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Read-only. The length of the ArrayBuffer (in bytes)."
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
							"line": 26,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1246,
					"name": "slice",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
							"line": 31,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1247,
							"name": "slice",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a section of an SharedArrayBuffer."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
									"line": 31,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1248,
									"name": "begin",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1249,
									"name": "end",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1243,
								"name": "SharedArrayBuffer",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1250,
						1251,
						1245
					]
				},
				{
					"title": "Methods",
					"children": [
						1246
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
					"line": 22,
					"character": 10
				},
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
					"line": 40,
					"character": 12
				}
			]
		},
		{
			"id": 1272,
			"name": "SharedArrayBufferConstructor",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1274,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
							"line": 36,
							"character": 10
						}
					],
					"signatures": [
						{
							"id": 1275,
							"name": "new SharedArrayBufferConstructor",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
									"line": 38,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1276,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1243,
								"name": "SharedArrayBuffer",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1273,
					"name": "prototype",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
							"line": 37,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"target": 1243,
						"name": "SharedArrayBuffer",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1274
					]
				},
				{
					"title": "Properties",
					"children": [
						1273
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
					"line": 36,
					"character": 10
				}
			]
		},
		{
			"id": 557,
			"name": "SoftDeleteReturn",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An object that is used to specify an entity's related entities that should be soft-deleted when the main entity is soft-deleted."
					}
				]
			},
			"children": [
				{
					"id": 558,
					"name": "returnLinkableKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of strings, each being the ID attribute names of the entity's relations."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/dal/repository-service.ts",
							"line": 91,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/repository-service.ts#L91"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": -1,
							"name": "TReturnableLinkableKeys",
							"refersToTypeParameter": true
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						558
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/dal/repository-service.ts",
					"line": 87,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/repository-service.ts#L87"
				}
			],
			"typeParameters": [
				{
					"id": 559,
					"name": "TReturnableLinkableKeys",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 486,
			"name": "UpdateProductCategoryDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a product category."
					}
				]
			},
			"children": [
				{
					"id": 488,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The handle of the product category."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 370,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L370"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 489,
					"name": "is_active",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product category is active."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 374,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L374"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 490,
					"name": "is_internal",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product category is internal. This can be used to only show the product category to admins and hide it from customers."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 378,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L378"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 493,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 390,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L390"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 487,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The name of the product category."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 366,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L366"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 492,
					"name": "parent_category_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the parent product category, if it has any."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 386,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L386"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 491,
					"name": "rank",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ranking of the category among sibling categories."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 382,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L382"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						488,
						489,
						490,
						493,
						487,
						492,
						491
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 362,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L362"
				}
			]
		},
		{
			"id": 449,
			"name": "UpdateProductCollectionDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a product collection. The "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " is used to identify which product collection to update."
					}
				]
			},
			"children": [
				{
					"id": 453,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The handle of the product collection."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 867,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L867"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 450,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product collection to update."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 855,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L855"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 455,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 875,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L875"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 454,
					"name": "product_ids",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs of the products to associate with the product collection."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 871,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L871"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 452,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The title of the product collection."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 863,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L863"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 451,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the product collection."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 859,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L859"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						453,
						450,
						455,
						454,
						452,
						451
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 851,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L851"
				}
			]
		},
		{
			"id": 525,
			"name": "UpdateProductDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a product. The "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " is used to identify which product to update."
					}
				]
			},
			"children": [
				{
					"id": 543,
					"name": "categories",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product categories to associate with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1338,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1338"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 544,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"children": [
									{
										"id": 545,
										"name": "id",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/types/src/product/common.ts",
												"line": 1338,
												"character": 17,
												"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1338"
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"children": [
											545
										]
									}
								],
								"sources": [
									{
										"fileName": "packages/types/src/product/common.ts",
										"line": 1338,
										"character": 15,
										"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1338"
									}
								]
							}
						}
					}
				},
				{
					"id": 541,
					"name": "collection_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product collection to be associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1330,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1330"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 529,
					"name": "description",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The description of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1292,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1292"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 531,
					"name": "discountable",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product can be discounted."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1300,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1300"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 537,
					"name": "handle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The handle of the product. The handle can be used to create slug URL paths.\nIf not supplied, the value of the "
							},
							{
								"kind": "code",
								"text": "`handle`"
							},
							{
								"kind": "text",
								"text": " attribute of the product is set to the slug version of the "
							},
							{
								"kind": "code",
								"text": "`title`"
							},
							{
								"kind": "text",
								"text": " attribute."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1314,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1314"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 549,
					"name": "height",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The height of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1354,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1354"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 553,
					"name": "hs_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The HS Code of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1370,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1370"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 526,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product to update."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1280,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1280"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 532,
					"name": "images",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product's images. If an array of strings is supplied, each string will be a URL and a "
							},
							{
								"kind": "code",
								"text": "`ProductImage`"
							},
							{
								"kind": "text",
								"text": " will be created\nand associated with the product. If an array of objects is supplied, you can pass along the ID of an existing "
							},
							{
								"kind": "code",
								"text": "`ProductImage`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1305,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1305"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 533,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"children": [
											{
												"id": 534,
												"name": "id",
												"variant": "declaration",
												"kind": 1024,
												"flags": {
													"isOptional": true
												},
												"sources": [
													{
														"fileName": "packages/types/src/product/common.ts",
														"line": 1305,
														"character": 24,
														"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1305"
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 535,
												"name": "url",
												"variant": "declaration",
												"kind": 1024,
												"flags": {},
												"sources": [
													{
														"fileName": "packages/types/src/product/common.ts",
														"line": 1305,
														"character": 37,
														"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1305"
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"children": [
													534,
													535
												]
											}
										],
										"sources": [
											{
												"fileName": "packages/types/src/product/common.ts",
												"line": 1305,
												"character": 22,
												"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1305"
											}
										]
									}
								}
							}
						]
					}
				},
				{
					"id": 530,
					"name": "is_giftcard",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product is a gift card."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1296,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1296"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 550,
					"name": "length",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The length of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1358,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1358"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 554,
					"name": "material",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The material of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1374,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1374"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 556,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1382,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1382"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 555,
					"name": "mid_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The MID Code of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1378,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1378"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 546,
					"name": "options",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product options to be created and associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1342,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1342"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 349,
							"name": "CreateProductOptionDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 552,
					"name": "origin_country",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The origin country of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1366,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1366"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 538,
					"name": "status",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The status of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1318,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1318"
						}
					],
					"type": {
						"type": "reference",
						"target": 587,
						"name": "ProductStatus",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 528,
					"name": "subtitle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The subttle of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1288,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1288"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 542,
					"name": "tags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product tags to be created and associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1334,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1334"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 313,
							"name": "CreateProductTagDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 536,
					"name": "thumbnail",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The URL of the product's thumbnail."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1309,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1309"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 527,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The title of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1284,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1284"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 539,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product type to create and associate with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1322,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1322"
						}
					],
					"type": {
						"type": "reference",
						"target": 328,
						"name": "CreateProductTypeDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 540,
					"name": "type_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product type to be associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1326,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1326"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 547,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product variants to be created and associated with the product. You can also update existing product variants associated with the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1346,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1346"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 411,
									"name": "CreateProductVariantDTO",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 391,
									"name": "UpdateProductVariantDTO",
									"package": "@medusajs/types"
								}
							]
						}
					}
				},
				{
					"id": 551,
					"name": "weight",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The weight of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1362,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1362"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 548,
					"name": "width",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The width of the product."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1350,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1350"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						543,
						541,
						529,
						531,
						537,
						549,
						553,
						526,
						532,
						530,
						550,
						554,
						556,
						555,
						546,
						552,
						538,
						528,
						542,
						536,
						527,
						539,
						540,
						547,
						551,
						548
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 1276,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1276"
				}
			]
		},
		{
			"id": 352,
			"name": "UpdateProductOptionDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 353,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 974,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L974"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 355,
					"name": "product_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 976,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L976"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 354,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 975,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L975"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						353,
						355,
						354
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 973,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L973"
				}
			]
		},
		{
			"id": 315,
			"name": "UpdateProductTagDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a product tag. The "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " is used to identify which product tag to update."
					}
				]
			},
			"children": [
				{
					"id": 316,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product tag to update."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 950,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L950"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 317,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the product tag."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 954,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L954"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						316,
						317
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 946,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L946"
				}
			]
		},
		{
			"id": 332,
			"name": "UpdateProductTypeDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a product type. The "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " is used to identify which product type to update."
					}
				]
			},
			"children": [
				{
					"id": 333,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product type to update."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 912,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L912"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 335,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 920,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L920"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 334,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The new value of the product type."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 916,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L916"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						333,
						335,
						334
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 908,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L908"
				}
			]
		},
		{
			"id": 391,
			"name": "UpdateProductVariantDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a product variant. The "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " is used to identify which product variant to update."
					}
				]
			},
			"children": [
				{
					"id": 398,
					"name": "allow_backorder",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product variant can be ordered when it's out of stock."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1110,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1110"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 395,
					"name": "barcode",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The barcode of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1098,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1098"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 396,
					"name": "ean",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The EAN of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1102,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1102"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 407,
					"name": "height",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The height of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1146,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1146"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 401,
					"name": "hs_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The HS Code of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1122,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1122"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 392,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the product variant to update."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1086,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1086"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 399,
					"name": "inventory_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The inventory quantiy of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1114,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1114"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 406,
					"name": "length",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The length of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1142,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1142"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 400,
					"name": "manage_inventory",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the product variant's inventory should be managed by the core system."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1118,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1118"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 404,
					"name": "material",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The material of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1134,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1134"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 410,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Holds custom data in key-value pairs."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1158,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1158"
						}
					],
					"type": {
						"type": "reference",
						"target": 560,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 403,
					"name": "mid_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The MID Code of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1130,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1130"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 409,
					"name": "options",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The product variant options to create and associate with the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1154,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1154"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 630,
							"name": "CreateProductVariantOptionDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 402,
					"name": "origin_country",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The origin country of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1126,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1126"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 394,
					"name": "sku",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The SKU of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1094,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1094"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 393,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The tile of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1090,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1090"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 397,
					"name": "upc",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The UPC of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1106,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1106"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 405,
					"name": "weight",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The weight of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1138,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1138"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 408,
					"name": "width",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The width of the product variant."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/src/product/common.ts",
							"line": 1150,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1150"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						398,
						395,
						396,
						407,
						401,
						392,
						399,
						406,
						400,
						404,
						410,
						403,
						409,
						402,
						394,
						393,
						397,
						405,
						408
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/src/product/common.ts",
					"line": 1082,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/product/common.ts#L1082"
				}
			]
		},
		{
			"id": 1222,
			"name": "ArrayBufferLike",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1701,
					"character": 5
				}
			],
			"type": {
				"type": "indexedAccess",
				"indexType": {
					"type": "typeOperator",
					"operator": "keyof",
					"target": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBufferTypes"
						},
						"name": "ArrayBufferTypes",
						"package": "typescript"
					}
				},
				"objectType": {
					"type": "reference",
					"target": {
						"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "ArrayBufferTypes"
					},
					"name": "ArrayBufferTypes",
					"package": "typescript"
				}
			}
		},
		{
			"id": 1252,
			"name": "ArrayBufferView",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/globals.d.ts",
					"line": 271,
					"character": 9
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": 1253,
						"name": "TypedArray",
						"package": "@types/node",
						"qualifiedName": "NodeJS.TypedArray"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "DataView"
						},
						"name": "DataView",
						"package": "typescript"
					}
				]
			}
		},
		{
			"id": 1208,
			"name": "BufferEncoding",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
					"line": 232,
					"character": 13
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "ascii"
					},
					{
						"type": "literal",
						"value": "utf8"
					},
					{
						"type": "literal",
						"value": "utf-8"
					},
					{
						"type": "literal",
						"value": "utf16le"
					},
					{
						"type": "literal",
						"value": "utf-16le"
					},
					{
						"type": "literal",
						"value": "ucs2"
					},
					{
						"type": "literal",
						"value": "ucs-2"
					},
					{
						"type": "literal",
						"value": "base64"
					},
					{
						"type": "literal",
						"value": "base64url"
					},
					{
						"type": "literal",
						"value": "latin1"
					},
					{
						"type": "literal",
						"value": "binary"
					},
					{
						"type": "literal",
						"value": "hex"
					}
				]
			}
		},
		{
			"id": 636,
			"name": "Exclude",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Exclude from T those types that are assignable to U"
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1606,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 637,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 638,
					"name": "U",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "reference",
					"target": -1,
					"name": "U",
					"refersToTypeParameter": true
				},
				"trueType": {
					"type": "intrinsic",
					"name": "never"
				},
				"falseType": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				}
			}
		},
		{
			"id": 654,
			"name": "ExpandScalar",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/dal/utils.ts",
					"line": 13,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L13"
				}
			],
			"typeParameters": [
				{
					"id": 655,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": null
					},
					{
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"target": -1,
							"name": "T",
							"refersToTypeParameter": true
						},
						"extendsType": {
							"type": "intrinsic",
							"name": "string"
						},
						"trueType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "RegExp"
									},
									"name": "RegExp",
									"package": "typescript"
								}
							]
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							},
							"extendsType": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							},
							"trueType": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Date"
										},
										"name": "Date",
										"package": "typescript"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"falseType": {
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						}
					}
				]
			}
		},
		{
			"id": 660,
			"name": "FilterQuery",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/dal/utils.ts",
					"line": 87,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L87"
				}
			],
			"typeParameters": [
				{
					"id": 664,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 665,
					"name": "Prev",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"default": {
						"type": "literal",
						"value": 3
					}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": -1,
					"name": "Prev",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "intrinsic",
					"name": "never"
				},
				"trueType": {
					"type": "intrinsic",
					"name": "never"
				},
				"falseType": {
					"type": "mapped",
					"parameter": "Key",
					"parameterType": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reference",
							"target": -1,
							"name": "T",
							"refersToTypeParameter": true
						}
					},
					"templateType": {
						"type": "conditional",
						"checkType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "reference",
								"target": -1,
								"name": "Key",
								"refersToTypeParameter": true
							},
							"objectType": {
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						},
						"extendsType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "boolean"
								},
								{
									"type": "intrinsic",
									"name": "number"
								},
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "intrinsic",
									"name": "bigint"
								},
								{
									"type": "intrinsic",
									"name": "symbol"
								},
								{
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Date"
									},
									"name": "Date",
									"package": "typescript"
								}
							]
						},
						"trueType": {
							"type": "union",
							"types": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "reference",
										"target": -1,
										"name": "Key",
										"refersToTypeParameter": true
									},
									"objectType": {
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								},
								{
									"type": "reference",
									"target": 601,
									"typeArguments": [
										{
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"target": -1,
												"name": "Key",
												"refersToTypeParameter": true
											},
											"objectType": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										}
									],
									"name": "OperatorMap",
									"package": "@medusajs/types"
								}
							]
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "indexedAccess",
								"indexType": {
									"type": "reference",
									"target": -1,
									"name": "Key",
									"refersToTypeParameter": true
								},
								"objectType": {
									"type": "reference",
									"target": -1,
									"name": "T",
									"refersToTypeParameter": true
								}
							},
							"extendsType": {
								"type": "inferred",
								"name": "U"
							},
							"trueType": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": -1,
									"name": "U",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reflection",
									"declaration": {
										"id": 661,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/types/src/dal/utils.ts",
												"line": 99,
												"character": 20,
												"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L99"
											}
										],
										"indexSignature": {
											"id": 662,
											"name": "__index",
											"variant": "signature",
											"kind": 8192,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/types/src/dal/utils.ts",
													"line": 99,
													"character": 22,
													"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L99"
												}
											],
											"parameters": [
												{
													"id": 663,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "inferred",
												"name": "V"
											}
										}
									}
								},
								"trueType": {
									"type": "conditional",
									"checkType": {
										"type": "reference",
										"target": -1,
										"name": "V",
										"refersToTypeParameter": true
									},
									"extendsType": {
										"type": "intrinsic",
										"name": "object"
									},
									"trueType": {
										"type": "reference",
										"target": 660,
										"typeArguments": [
											{
												"type": "reference",
												"target": 1134,
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "V",
														"refersToTypeParameter": true
													}
												],
												"name": "Partial",
												"package": "typescript"
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"target": -1,
													"name": "Prev",
													"refersToTypeParameter": true
												},
												"objectType": {
													"type": "reference",
													"target": 1136,
													"name": "PrevLimit",
													"package": "@medusajs/types"
												}
											}
										],
										"name": "FilterQuery",
										"package": "@medusajs/types"
									},
									"falseType": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							},
							"falseType": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					},
					"optionalModifier": "+"
				}
			}
		},
		{
			"id": 666,
			"name": "FilterValue",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/dal/utils.ts",
					"line": 79,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L79"
				}
			],
			"typeParameters": [
				{
					"id": 667,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": 601,
						"typeArguments": [
							{
								"type": "reference",
								"target": 1137,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								],
								"name": "FilterValue2",
								"package": "@medusajs/types"
							}
						],
						"name": "OperatorMap",
						"package": "@medusajs/types"
					},
					{
						"type": "reference",
						"target": 1137,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						],
						"name": "FilterValue2",
						"package": "@medusajs/types"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 1137,
							"typeArguments": [
								{
									"type": "reference",
									"target": -1,
									"name": "T",
									"refersToTypeParameter": true
								}
							],
							"name": "FilterValue2",
							"package": "@medusajs/types"
						}
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 1137,
			"name": "FilterValue2",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/dal/utils.ts",
					"line": 78,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L78"
				}
			],
			"typeParameters": [
				{
					"id": 1138,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					},
					{
						"type": "reference",
						"target": 654,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						],
						"name": "ExpandScalar",
						"package": "@medusajs/types"
					},
					{
						"type": "reference",
						"target": 1228,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						],
						"name": "Primary",
						"package": "@medusajs/types"
					}
				]
			}
		},
		{
			"id": 1267,
			"name": "IteratorResult",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
					"line": 39,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 1268,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 1269,
					"name": "TReturn",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"default": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": 1277,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						],
						"name": "IteratorYieldResult",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": 1281,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "TReturn",
								"refersToTypeParameter": true
							}
						],
						"name": "IteratorReturnResult",
						"package": "typescript"
					}
				]
			}
		},
		{
			"id": 642,
			"name": "JoinerRelationship",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/joiner/index.ts",
					"line": 1,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L1"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 643,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 644,
							"name": "alias",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/src/joiner/index.ts",
									"line": 2,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L2"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 651,
							"name": "args",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Extra arguments to pass to the remoteFetchData callback"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/joiner/index.ts",
									"line": 22,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L22"
								}
							],
							"type": {
								"type": "reference",
								"target": 560,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 645,
							"name": "foreignKey",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/src/joiner/index.ts",
									"line": 3,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L3"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 649,
							"name": "inverse",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "In an inverted relationship the foreign key is on the other service and the primary key is on the current service"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/joiner/index.ts",
									"line": 14,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L14"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 648,
							"name": "isInternalService",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If true, the relationship is an internal service from the medusa core\nTODO: Remove when there are no more \"internal\" services"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/joiner/index.ts",
									"line": 10,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L10"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 650,
							"name": "isList",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Force the relationship to return a list"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/src/joiner/index.ts",
									"line": 18,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L18"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 646,
							"name": "primaryKey",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/src/joiner/index.ts",
									"line": 4,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L4"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 647,
							"name": "serviceName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/src/joiner/index.ts",
									"line": 5,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L5"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								644,
								651,
								645,
								649,
								648,
								650,
								646,
								647
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/types/src/joiner/index.ts",
							"line": 1,
							"character": 33,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/joiner/index.ts#L1"
						}
					]
				}
			}
		},
		{
			"id": 212,
			"name": "ModuleJoinerConfig",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/modules-sdk/index.ts",
					"line": 132,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L132"
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": 566,
						"typeArguments": [
							{
								"type": "reference",
								"target": 569,
								"name": "JoinerServiceConfig",
								"package": "@medusajs/types"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "serviceName"
									},
									{
										"type": "literal",
										"value": "primaryKeys"
									},
									{
										"type": "literal",
										"value": "relationships"
									},
									{
										"type": "literal",
										"value": "extends"
									}
								]
							}
						],
						"name": "Omit",
						"package": "typescript"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 213,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 229,
									"name": "databaseConfig",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 167,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L167"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 230,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 233,
													"name": "extraFields",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "packages/types/src/modules-sdk/index.ts",
															"line": 176,
															"character": 4,
															"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L176"
														}
													],
													"type": {
														"type": "reference",
														"target": 560,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 234,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 236,
																			"name": "defaultValue",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "packages/types/src/modules-sdk/index.ts",
																					"line": 201,
																					"character": 8,
																					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L201"
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 237,
																			"name": "nullable",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "packages/types/src/modules-sdk/index.ts",
																					"line": 202,
																					"character": 8,
																					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L202"
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 238,
																			"name": "options",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"summary": [
																					{
																						"kind": "text",
																						"text": "Mikro-orm options for the column"
																					}
																				]
																			},
																			"sources": [
																				{
																					"fileName": "packages/types/src/modules-sdk/index.ts",
																					"line": 206,
																					"character": 8,
																					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L206"
																				}
																			],
																			"type": {
																				"type": "reference",
																				"target": 560,
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "string"
																					},
																					{
																						"type": "intrinsic",
																						"name": "unknown"
																					}
																				],
																				"name": "Record",
																				"package": "typescript"
																			}
																		},
																		{
																			"id": 235,
																			"name": "type",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "packages/types/src/modules-sdk/index.ts",
																					"line": 179,
																					"character": 8,
																					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L179"
																				}
																			],
																			"type": {
																				"type": "union",
																				"types": [
																					{
																						"type": "literal",
																						"value": "date"
																					},
																					{
																						"type": "literal",
																						"value": "time"
																					},
																					{
																						"type": "literal",
																						"value": "datetime"
																					},
																					{
																						"type": "literal",
																						"value": "bigint"
																					},
																					{
																						"type": "literal",
																						"value": "blob"
																					},
																					{
																						"type": "literal",
																						"value": "uint8array"
																					},
																					{
																						"type": "literal",
																						"value": "array"
																					},
																					{
																						"type": "literal",
																						"value": "enumArray"
																					},
																					{
																						"type": "literal",
																						"value": "enum"
																					},
																					{
																						"type": "literal",
																						"value": "json"
																					},
																					{
																						"type": "literal",
																						"value": "integer"
																					},
																					{
																						"type": "literal",
																						"value": "smallint"
																					},
																					{
																						"type": "literal",
																						"value": "tinyint"
																					},
																					{
																						"type": "literal",
																						"value": "mediumint"
																					},
																					{
																						"type": "literal",
																						"value": "float"
																					},
																					{
																						"type": "literal",
																						"value": "double"
																					},
																					{
																						"type": "literal",
																						"value": "boolean"
																					},
																					{
																						"type": "literal",
																						"value": "decimal"
																					},
																					{
																						"type": "literal",
																						"value": "string"
																					},
																					{
																						"type": "literal",
																						"value": "uuid"
																					},
																					{
																						"type": "literal",
																						"value": "text"
																					}
																				]
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [
																				236,
																				237,
																				238,
																				235
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "packages/types/src/modules-sdk/index.ts",
																			"line": 178,
																			"character": 6,
																			"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L178"
																		}
																	]
																}
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												},
												{
													"id": 232,
													"name": "idPrefix",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Prefix for the id column. If not provided it is \"link\""
															}
														]
													},
													"sources": [
														{
															"fileName": "packages/types/src/modules-sdk/index.ts",
															"line": 175,
															"character": 4,
															"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L175"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 231,
													"name": "tableName",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Name of the pivot table. If not provided it is auto generated"
															}
														]
													},
													"sources": [
														{
															"fileName": "packages/types/src/modules-sdk/index.ts",
															"line": 171,
															"character": 4,
															"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L171"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														233,
														232,
														231
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/types/src/modules-sdk/index.ts",
													"line": 167,
													"character": 19,
													"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L167"
												}
											]
										}
									}
								},
								{
									"id": 216,
									"name": "extends",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 141,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L141"
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 217,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"children": [
													{
														"id": 219,
														"name": "fieldAlias",
														"variant": "declaration",
														"kind": 1024,
														"flags": {
															"isOptional": true
														},
														"sources": [
															{
																"fileName": "packages/types/src/modules-sdk/index.ts",
																"line": 143,
																"character": 4,
																"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L143"
															}
														],
														"type": {
															"type": "reference",
															"target": 560,
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "union",
																	"types": [
																		{
																			"type": "intrinsic",
																			"name": "string"
																		},
																		{
																			"type": "reflection",
																			"declaration": {
																				"id": 220,
																				"name": "__type",
																				"variant": "declaration",
																				"kind": 65536,
																				"flags": {},
																				"children": [
																					{
																						"id": 222,
																						"name": "forwardArgumentsOnPath",
																						"variant": "declaration",
																						"kind": 1024,
																						"flags": {},
																						"sources": [
																							{
																								"fileName": "packages/types/src/modules-sdk/index.ts",
																								"line": 148,
																								"character": 10,
																								"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L148"
																							}
																						],
																						"type": {
																							"type": "array",
																							"elementType": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					},
																					{
																						"id": 221,
																						"name": "path",
																						"variant": "declaration",
																						"kind": 1024,
																						"flags": {},
																						"sources": [
																							{
																								"fileName": "packages/types/src/modules-sdk/index.ts",
																								"line": 147,
																								"character": 10,
																								"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L147"
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"groups": [
																					{
																						"title": "Properties",
																						"children": [
																							222,
																							221
																						]
																					}
																				],
																				"sources": [
																					{
																						"fileName": "packages/types/src/modules-sdk/index.ts",
																						"line": 146,
																						"character": 8,
																						"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L146"
																					}
																				]
																			}
																		}
																	]
																}
															],
															"name": "Record",
															"package": "typescript"
														}
													},
													{
														"id": 223,
														"name": "relationship",
														"variant": "declaration",
														"kind": 1024,
														"flags": {},
														"sources": [
															{
																"fileName": "packages/types/src/modules-sdk/index.ts",
																"line": 151,
																"character": 4,
																"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L151"
															}
														],
														"type": {
															"type": "reference",
															"target": 583,
															"name": "ModuleJoinerRelationship",
															"package": "@medusajs/types"
														}
													},
													{
														"id": 218,
														"name": "serviceName",
														"variant": "declaration",
														"kind": 1024,
														"flags": {},
														"sources": [
															{
																"fileName": "packages/types/src/modules-sdk/index.ts",
																"line": 142,
																"character": 4,
																"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L142"
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"children": [
															219,
															223,
															218
														]
													}
												],
												"sources": [
													{
														"fileName": "packages/types/src/modules-sdk/index.ts",
														"line": 141,
														"character": 12,
														"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L141"
													}
												]
											}
										}
									}
								},
								{
									"id": 226,
									"name": "isLink",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If the module is a link module"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 158,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L158"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 228,
									"name": "isReadOnlyLink",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true it expands a RemoteQuery property but doesn't create a pivot table"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 166,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L166"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 227,
									"name": "linkableKeys",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Keys that can be used to link to other modules. e.g { product_id: \"Product\" } \"Product\" being the entity it refers to"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 162,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L162"
										}
									],
									"type": {
										"type": "reference",
										"target": 560,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 225,
									"name": "primaryKeys",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 154,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L154"
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 215,
									"name": "relationships",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 140,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L140"
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 583,
											"name": "ModuleJoinerRelationship",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 214,
									"name": "schema",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "GraphQL schema for the all module's available entities and fields"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 139,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L139"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 224,
									"name": "serviceName",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 153,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L153"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										229,
										216,
										226,
										228,
										227,
										225,
										215,
										214,
										224
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/types/src/modules-sdk/index.ts",
									"line": 135,
									"character": 4,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L135"
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 583,
			"name": "ModuleJoinerRelationship",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/modules-sdk/index.ts",
					"line": 212,
					"character": 20,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L212"
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": 642,
						"name": "JoinerRelationship",
						"package": "@medusajs/types"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 584,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 586,
									"name": "deleteCascade",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true, the link joiner will cascade deleting the relationship"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 220,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L220"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 585,
									"name": "isInternalService",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true, the relationship is an internal service from the medusa core TODO: Remove when there are no more \"internal\" services"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/src/modules-sdk/index.ts",
											"line": 216,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L216"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										586,
										585
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/types/src/modules-sdk/index.ts",
									"line": 212,
									"character": 68,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/modules-sdk/index.ts#L212"
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 566,
			"name": "Omit",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Construct a type with the properties of T except for those in type K."
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1616,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 567,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 568,
					"name": "K",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			],
			"type": {
				"type": "reference",
				"target": 633,
				"typeArguments": [
					{
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					},
					{
						"type": "reference",
						"target": 636,
						"typeArguments": [
							{
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"target": -1,
									"name": "T",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": -1,
								"name": "K",
								"refersToTypeParameter": true
							}
						],
						"name": "Exclude",
						"package": "typescript"
					}
				],
				"name": "Pick",
				"package": "typescript"
			}
		},
		{
			"id": 601,
			"name": "OperatorMap",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/dal/utils.ts",
					"line": 56,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L56"
				}
			],
			"typeParameters": [
				{
					"id": 622,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 602,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 603,
							"name": "$and",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 57,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L57"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 652,
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									],
									"name": "Query",
									"package": "@medusajs/types"
								}
							}
						},
						{
							"id": 620,
							"name": "$contained",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 74,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L74"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 619,
							"name": "$contains",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 73,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L73"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 605,
							"name": "$eq",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 59,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L59"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": 654,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										],
										"name": "ExpandScalar",
										"package": "@medusajs/types"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 654,
											"typeArguments": [
												{
													"type": "reference",
													"target": -1,
													"name": "T",
													"refersToTypeParameter": true
												}
											],
											"name": "ExpandScalar",
											"package": "@medusajs/types"
										}
									}
								]
							}
						},
						{
							"id": 621,
							"name": "$exists",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 75,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L75"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 617,
							"name": "$fulltext",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 71,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L71"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 610,
							"name": "$gt",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 64,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L64"
								}
							],
							"type": {
								"type": "reference",
								"target": 654,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								],
								"name": "ExpandScalar",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 611,
							"name": "$gte",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 65,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L65"
								}
							],
							"type": {
								"type": "reference",
								"target": 654,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								],
								"name": "ExpandScalar",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 616,
							"name": "$ilike",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 70,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L70"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 607,
							"name": "$in",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 61,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L61"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 654,
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									],
									"name": "ExpandScalar",
									"package": "@medusajs/types"
								}
							}
						},
						{
							"id": 614,
							"name": "$like",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 68,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L68"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 612,
							"name": "$lt",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 66,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L66"
								}
							],
							"type": {
								"type": "reference",
								"target": 654,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								],
								"name": "ExpandScalar",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 613,
							"name": "$lte",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 67,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L67"
								}
							],
							"type": {
								"type": "reference",
								"target": 654,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								],
								"name": "ExpandScalar",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 606,
							"name": "$ne",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 60,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L60"
								}
							],
							"type": {
								"type": "reference",
								"target": 654,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								],
								"name": "ExpandScalar",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 608,
							"name": "$nin",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 62,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L62"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 654,
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									],
									"name": "ExpandScalar",
									"package": "@medusajs/types"
								}
							}
						},
						{
							"id": 609,
							"name": "$not",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 63,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L63"
								}
							],
							"type": {
								"type": "reference",
								"target": 652,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								],
								"name": "Query",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 604,
							"name": "$or",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 58,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L58"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 652,
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									],
									"name": "Query",
									"package": "@medusajs/types"
								}
							}
						},
						{
							"id": 618,
							"name": "$overlap",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 72,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L72"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 615,
							"name": "$re",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 69,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L69"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								603,
								620,
								619,
								605,
								621,
								617,
								610,
								611,
								616,
								607,
								614,
								612,
								613,
								606,
								608,
								609,
								604,
								618,
								615
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/types/src/dal/utils.ts",
							"line": 56,
							"character": 29,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L56"
						}
					]
				}
			}
		},
		{
			"id": 1134,
			"name": "Partial",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Make all properties in T optional"
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1571,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 1135,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "P",
				"parameterType": {
					"type": "typeOperator",
					"operator": "keyof",
					"target": {
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					}
				},
				"templateType": {
					"type": "indexedAccess",
					"indexType": {
						"type": "reference",
						"target": -1,
						"name": "P",
						"refersToTypeParameter": true
					},
					"objectType": {
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					}
				},
				"optionalModifier": "+"
			}
		},
		{
			"id": 633,
			"name": "Pick",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "From T, pick a set of properties whose keys are in the union K"
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1592,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 634,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 635,
					"name": "K",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reference",
							"target": -1,
							"name": "T",
							"refersToTypeParameter": true
						}
					}
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "P",
				"parameterType": {
					"type": "reference",
					"target": -1,
					"name": "K",
					"refersToTypeParameter": true
				},
				"templateType": {
					"type": "indexedAccess",
					"indexType": {
						"type": "reference",
						"target": -1,
						"name": "P",
						"refersToTypeParameter": true
					},
					"objectType": {
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					}
				}
			}
		},
		{
			"id": 1136,
			"name": "PrevLimit",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/dal/utils.ts",
					"line": 85,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L85"
				}
			],
			"type": {
				"type": "tuple",
				"elements": [
					{
						"type": "intrinsic",
						"name": "never"
					},
					{
						"type": "literal",
						"value": 1
					},
					{
						"type": "literal",
						"value": 2
					},
					{
						"type": "literal",
						"value": 3
					}
				]
			}
		},
		{
			"id": 1228,
			"name": "Primary",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/dal/utils.ts",
					"line": 38,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L38"
				}
			],
			"typeParameters": [
				{
					"id": 1237,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "reflection",
					"declaration": {
						"id": 1229,
						"name": "__type",
						"variant": "declaration",
						"kind": 65536,
						"flags": {},
						"children": [
							{
								"id": 1230,
								"name": "[PrimaryKeyType]",
								"variant": "declaration",
								"kind": 1024,
								"flags": {
									"isOptional": true
								},
								"sources": [
									{
										"fileName": "packages/types/src/dal/utils.ts",
										"line": 39,
										"character": 2,
										"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L39"
									}
								],
								"type": {
									"type": "inferred",
									"name": "PK"
								}
							}
						],
						"groups": [
							{
								"title": "Properties",
								"children": [
									1230
								]
							}
						],
						"sources": [
							{
								"fileName": "packages/types/src/dal/utils.ts",
								"line": 38,
								"character": 28,
								"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L38"
							}
						]
					}
				},
				"trueType": {
					"type": "reference",
					"target": 1270,
					"typeArguments": [
						{
							"type": "reference",
							"target": -1,
							"name": "PK",
							"refersToTypeParameter": true
						}
					],
					"name": "ReadonlyPrimary",
					"package": "@medusajs/types"
				},
				"falseType": {
					"type": "conditional",
					"checkType": {
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					},
					"extendsType": {
						"type": "reflection",
						"declaration": {
							"id": 1231,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 1232,
									"name": "_id",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/src/dal/utils.ts",
											"line": 43,
											"character": 6,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L43"
										}
									],
									"type": {
										"type": "inferred",
										"name": "PK"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1232
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 42,
									"character": 14,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L42"
								}
							]
						}
					},
					"trueType": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 1270,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "PK",
										"refersToTypeParameter": true
									}
								],
								"name": "ReadonlyPrimary",
								"package": "@medusajs/types"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"falseType": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"target": -1,
							"name": "T",
							"refersToTypeParameter": true
						},
						"extendsType": {
							"type": "reflection",
							"declaration": {
								"id": 1233,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"children": [
									{
										"id": 1234,
										"name": "uuid",
										"variant": "declaration",
										"kind": 1024,
										"flags": {
											"isOptional": true
										},
										"sources": [
											{
												"fileName": "packages/types/src/dal/utils.ts",
												"line": 47,
												"character": 6,
												"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L47"
											}
										],
										"type": {
											"type": "inferred",
											"name": "PK"
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"children": [
											1234
										]
									}
								],
								"sources": [
									{
										"fileName": "packages/types/src/dal/utils.ts",
										"line": 46,
										"character": 14,
										"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L46"
									}
								]
							}
						},
						"trueType": {
							"type": "reference",
							"target": 1270,
							"typeArguments": [
								{
									"type": "reference",
									"target": -1,
									"name": "PK",
									"refersToTypeParameter": true
								}
							],
							"name": "ReadonlyPrimary",
							"package": "@medusajs/types"
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							},
							"extendsType": {
								"type": "reflection",
								"declaration": {
									"id": 1235,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 1236,
											"name": "id",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/types/src/dal/utils.ts",
													"line": 51,
													"character": 6,
													"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L51"
												}
											],
											"type": {
												"type": "inferred",
												"name": "PK"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												1236
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/types/src/dal/utils.ts",
											"line": 50,
											"character": 14,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L50"
										}
									]
								}
							},
							"trueType": {
								"type": "reference",
								"target": 1270,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "PK",
										"refersToTypeParameter": true
									}
								],
								"name": "ReadonlyPrimary",
								"package": "@medusajs/types"
							},
							"falseType": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					}
				}
			}
		},
		{
			"id": 652,
			"name": "Query",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/dal/utils.ts",
					"line": 7,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L7"
				}
			],
			"typeParameters": [
				{
					"id": 653,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "intrinsic",
					"name": "object"
				},
				"trueType": {
					"type": "conditional",
					"checkType": {
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					},
					"extendsType": {
						"type": "reference",
						"target": 656,
						"name": "Scalar",
						"package": "@medusajs/types"
					},
					"trueType": {
						"type": "intrinsic",
						"name": "never"
					},
					"falseType": {
						"type": "reference",
						"target": 660,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						],
						"name": "FilterQuery",
						"package": "@medusajs/types"
					}
				},
				"falseType": {
					"type": "reference",
					"target": 666,
					"typeArguments": [
						{
							"type": "reference",
							"target": -1,
							"name": "T",
							"refersToTypeParameter": true
						}
					],
					"name": "FilterValue",
					"package": "@medusajs/types"
				}
			}
		},
		{
			"id": 1285,
			"name": "Readonly",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Make all properties in T readonly"
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1585,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 1286,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "P",
				"parameterType": {
					"type": "typeOperator",
					"operator": "keyof",
					"target": {
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					}
				},
				"templateType": {
					"type": "indexedAccess",
					"indexType": {
						"type": "reference",
						"target": -1,
						"name": "P",
						"refersToTypeParameter": true
					},
					"objectType": {
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					}
				},
				"readonlyModifier": "+"
			}
		},
		{
			"id": 1270,
			"name": "ReadonlyPrimary",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/dal/utils.ts",
					"line": 35,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L35"
				}
			],
			"typeParameters": [
				{
					"id": 1271,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "array",
					"elementType": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				"trueType": {
					"type": "reference",
					"target": 1285,
					"typeArguments": [
						{
							"type": "reference",
							"target": -1,
							"name": "T",
							"refersToTypeParameter": true
						}
					],
					"name": "Readonly",
					"package": "typescript"
				},
				"falseType": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				}
			}
		},
		{
			"id": 560,
			"name": "Record",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Construct a type with a set of properties K of type T"
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1599,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 561,
					"name": "K",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 562,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "P",
				"parameterType": {
					"type": "reference",
					"target": -1,
					"name": "K",
					"refersToTypeParameter": true
				},
				"templateType": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				}
			}
		},
		{
			"id": 656,
			"name": "Scalar",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/src/dal/utils.ts",
					"line": 16,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L16"
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "boolean"
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "bigint"
					},
					{
						"type": "intrinsic",
						"name": "symbol"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Date"
						},
						"name": "Date",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "RegExp"
						},
						"name": "RegExp",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": 668,
						"name": "Buffer",
						"package": "@types/node",
						"qualifiedName": "__global.Buffer"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 657,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 658,
									"name": "toHexString",
									"variant": "declaration",
									"kind": 2048,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/types/src/dal/utils.ts",
											"line": 26,
											"character": 6,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L26"
										}
									],
									"signatures": [
										{
											"id": 659,
											"name": "toHexString",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/types/src/dal/utils.ts",
													"line": 26,
													"character": 6,
													"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L26"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"children": [
										658
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/types/src/dal/utils.ts",
									"line": 25,
									"character": 4,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/types/src/dal/utils.ts#L25"
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 1253,
			"name": "TypedArray",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/globals.d.ts",
					"line": 259,
					"character": 9
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8ClampedArray"
						},
						"name": "Uint8ClampedArray",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint16Array"
						},
						"name": "Uint16Array",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint32Array"
						},
						"name": "Uint32Array",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Int8Array"
						},
						"name": "Int8Array",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Int16Array"
						},
						"name": "Int16Array",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Int32Array"
						},
						"name": "Int32Array",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es2020.bigint.d.ts",
							"qualifiedName": "BigUint64Array"
						},
						"name": "BigUint64Array",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es2020.bigint.d.ts",
							"qualifiedName": "BigInt64Array"
						},
						"name": "BigInt64Array",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Float32Array"
						},
						"name": "Float32Array",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Float64Array"
						},
						"name": "Float64Array",
						"package": "typescript"
					}
				]
			}
		},
		{
			"id": 1238,
			"name": "WithImplicitCoercion",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
					"line": 245,
					"character": 13
				}
			],
			"typeParameters": [
				{
					"id": 1242,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 1239,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {
								"isExternal": true
							},
							"children": [
								{
									"id": 1240,
									"name": "valueOf",
									"variant": "declaration",
									"kind": 2048,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
											"line": 248,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1241,
											"name": "valueOf",
											"variant": "signature",
											"kind": 4096,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
													"line": 248,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"children": [
										1240
									]
								}
							],
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
									"line": 247,
									"character": 14
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 668,
			"name": "Buffer",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
					"line": 631,
					"character": 18
				},
				{
					"fileName": "docs-util/node_modules/@types/node/buffer.d.ts",
					"line": 2314,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"target": 1139,
				"name": "BufferConstructor",
				"package": "@types/node",
				"qualifiedName": "__global.BufferConstructor"
			}
		},
		{
			"id": 1243,
			"name": "SharedArrayBuffer",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
					"line": 22,
					"character": 10
				},
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
					"line": 40,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"target": 1272,
				"name": "SharedArrayBufferConstructor",
				"package": "typescript"
			}
		}
	],
	"groups": [
		{
			"title": "Enumerations",
			"children": [
				587
			]
		},
		{
			"title": "Interfaces",
			"children": [
				1223,
				597,
				669,
				1139,
				280,
				478,
				444,
				494,
				349,
				313,
				328,
				411,
				630,
				468,
				438,
				343,
				287,
				308,
				323,
				382,
				239,
				1,
				1209,
				1254,
				1281,
				1277,
				569,
				639,
				456,
				431,
				250,
				592,
				336,
				623,
				303,
				318,
				356,
				563,
				1244,
				1272,
				557,
				486,
				449,
				525,
				352,
				315,
				332,
				391
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				1222,
				1252,
				1208,
				636,
				654,
				660,
				666,
				1137,
				1267,
				642,
				212,
				583,
				566,
				601,
				1134,
				633,
				1136,
				1228,
				652,
				1285,
				1270,
				560,
				656,
				1253,
				1238
			]
		},
		{
			"title": "Variables",
			"children": [
				668,
				1243
			]
		}
	],
	"packageName": "@medusajs/types",
	"symbolIdMap": {
		"0": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService"
		},
		"4": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieve"
		},
		"5": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieve"
		},
		"6": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productId"
		},
		"7": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"8": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"9": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.list"
		},
		"10": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.list"
		},
		"11": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"12": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"13": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"14": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCount"
		},
		"15": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCount"
		},
		"16": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"17": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"18": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"19": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveTag"
		},
		"20": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveTag"
		},
		"21": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "tagId"
		},
		"22": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"23": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"24": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listTags"
		},
		"25": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listTags"
		},
		"26": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"27": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"28": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"29": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountTags"
		},
		"30": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountTags"
		},
		"31": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"32": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"33": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"34": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createTags"
		},
		"35": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createTags"
		},
		"36": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"37": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"38": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateTags"
		},
		"39": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateTags"
		},
		"40": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"41": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"42": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteTags"
		},
		"43": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteTags"
		},
		"44": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productTagIds"
		},
		"45": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"46": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveType"
		},
		"47": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveType"
		},
		"48": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "typeId"
		},
		"49": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"50": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"51": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listTypes"
		},
		"52": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listTypes"
		},
		"53": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"54": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"55": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"56": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountTypes"
		},
		"57": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountTypes"
		},
		"58": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"59": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"60": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"61": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createTypes"
		},
		"62": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createTypes"
		},
		"63": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"64": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"65": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateTypes"
		},
		"66": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateTypes"
		},
		"67": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"68": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"69": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteTypes"
		},
		"70": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteTypes"
		},
		"71": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productTypeIds"
		},
		"72": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"73": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveOption"
		},
		"74": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveOption"
		},
		"75": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "optionId"
		},
		"76": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"77": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"78": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listOptions"
		},
		"79": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listOptions"
		},
		"80": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"81": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"82": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"83": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountOptions"
		},
		"84": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountOptions"
		},
		"85": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"86": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"87": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"88": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createOptions"
		},
		"89": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createOptions"
		},
		"90": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"91": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"92": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateOptions"
		},
		"93": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateOptions"
		},
		"94": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"95": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"96": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteOptions"
		},
		"97": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteOptions"
		},
		"98": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productOptionIds"
		},
		"99": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"100": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveVariant"
		},
		"101": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveVariant"
		},
		"102": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productVariantId"
		},
		"103": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"104": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"105": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listVariants"
		},
		"106": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listVariants"
		},
		"107": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"108": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"109": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"110": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateVariants"
		},
		"111": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateVariants"
		},
		"112": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"113": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"114": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createVariants"
		},
		"115": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createVariants"
		},
		"116": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"117": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"118": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteVariants"
		},
		"119": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteVariants"
		},
		"120": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productVariantIds"
		},
		"121": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"122": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountVariants"
		},
		"123": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountVariants"
		},
		"124": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"125": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"126": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"127": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveCollection"
		},
		"128": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveCollection"
		},
		"129": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productCollectionId"
		},
		"130": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"131": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"132": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listCollections"
		},
		"133": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listCollections"
		},
		"134": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"135": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"136": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"137": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountCollections"
		},
		"138": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountCollections"
		},
		"139": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"140": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"141": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"142": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createCollections"
		},
		"143": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createCollections"
		},
		"144": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"145": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"146": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateCollections"
		},
		"147": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateCollections"
		},
		"148": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"149": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"150": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteCollections"
		},
		"151": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteCollections"
		},
		"152": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productCollectionIds"
		},
		"153": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"154": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveCategory"
		},
		"155": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.retrieveCategory"
		},
		"156": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productCategoryId"
		},
		"157": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"158": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"159": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listCategories"
		},
		"160": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listCategories"
		},
		"161": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"162": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"163": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"164": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountCategories"
		},
		"165": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.listAndCountCategories"
		},
		"166": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "filters"
		},
		"167": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"168": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"169": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createCategory"
		},
		"170": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.createCategory"
		},
		"171": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"172": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"173": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateCategory"
		},
		"174": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.updateCategory"
		},
		"175": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "categoryId"
		},
		"176": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"177": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"178": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteCategory"
		},
		"179": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.deleteCategory"
		},
		"180": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "categoryId"
		},
		"181": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"182": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.create"
		},
		"183": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.create"
		},
		"184": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"185": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"186": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.update"
		},
		"187": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.update"
		},
		"188": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "data"
		},
		"189": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"190": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.delete"
		},
		"191": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.delete"
		},
		"192": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productIds"
		},
		"193": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"194": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.softDelete"
		},
		"195": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.softDelete"
		},
		"196": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"197": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productIds"
		},
		"198": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"199": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"200": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.restore"
		},
		"201": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.restore"
		},
		"202": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"203": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "productIds"
		},
		"204": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"205": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"206": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.restoreVariants"
		},
		"207": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "IProductModuleService.restoreVariants"
		},
		"208": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"209": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "variantIds"
		},
		"210": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "config"
		},
		"211": {
			"sourceFileName": "../../../packages/types/src/product/service.ts",
			"qualifiedName": "sharedContext"
		},
		"212": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "ModuleJoinerConfig"
		},
		"213": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"214": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.schema"
		},
		"215": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.relationships"
		},
		"216": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.extends"
		},
		"217": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"218": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"219": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.fieldAlias"
		},
		"220": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"221": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.path"
		},
		"222": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.forwardArgumentsOnPath"
		},
		"223": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.relationship"
		},
		"224": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"225": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.primaryKeys"
		},
		"226": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.isLink"
		},
		"227": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.linkableKeys"
		},
		"228": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.isReadOnlyLink"
		},
		"229": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.databaseConfig"
		},
		"230": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"231": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.tableName"
		},
		"232": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.idPrefix"
		},
		"233": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.extraFields"
		},
		"234": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"235": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.type"
		},
		"236": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.defaultValue"
		},
		"237": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.nullable"
		},
		"238": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.options"
		},
		"239": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig"
		},
		"240": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.select"
		},
		"241": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.skip"
		},
		"242": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.take"
		},
		"243": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.relations"
		},
		"244": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.order"
		},
		"245": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "__type"
		},
		"246": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "__type.__index"
		},
		"248": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.withDeleted"
		},
		"249": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.Entity"
		},
		"250": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO"
		},
		"251": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.id"
		},
		"252": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.title"
		},
		"253": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.handle"
		},
		"254": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.subtitle"
		},
		"255": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.description"
		},
		"256": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.is_giftcard"
		},
		"257": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.status"
		},
		"258": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.thumbnail"
		},
		"259": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.width"
		},
		"260": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.weight"
		},
		"261": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.length"
		},
		"262": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.height"
		},
		"263": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.origin_country"
		},
		"264": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.hs_code"
		},
		"265": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.mid_code"
		},
		"266": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.material"
		},
		"267": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.collection"
		},
		"268": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.categories"
		},
		"269": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.type"
		},
		"270": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.tags"
		},
		"271": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.variants"
		},
		"272": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.options"
		},
		"273": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.images"
		},
		"274": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.discountable"
		},
		"275": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.external_id"
		},
		"276": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.created_at"
		},
		"277": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.updated_at"
		},
		"278": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.deleted_at"
		},
		"279": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductDTO.metadata"
		},
		"280": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "Context"
		},
		"281": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.transactionManager"
		},
		"282": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.manager"
		},
		"283": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.isolationLevel"
		},
		"284": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.enableNestedTransactions"
		},
		"285": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.transactionId"
		},
		"286": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "TManager"
		},
		"287": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductProps"
		},
		"288": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductProps.q"
		},
		"289": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductProps.handle"
		},
		"290": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductProps.id"
		},
		"291": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductProps.tags"
		},
		"292": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type"
		},
		"293": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.value"
		},
		"294": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductProps.categories"
		},
		"295": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type"
		},
		"296": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.id"
		},
		"297": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.is_internal"
		},
		"298": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.is_active"
		},
		"299": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductProps.category_id"
		},
		"300": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductProps.collection_id"
		},
		"301": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"302": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"303": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductTagDTO"
		},
		"304": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductTagDTO.id"
		},
		"305": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductTagDTO.value"
		},
		"306": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductTagDTO.metadata"
		},
		"307": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductTagDTO.products"
		},
		"308": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductTagProps"
		},
		"309": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductTagProps.id"
		},
		"310": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductTagProps.value"
		},
		"311": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"312": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"313": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductTagDTO"
		},
		"314": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductTagDTO.value"
		},
		"315": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductTagDTO"
		},
		"316": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductTagDTO.id"
		},
		"317": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductTagDTO.value"
		},
		"318": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductTypeDTO"
		},
		"319": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductTypeDTO.id"
		},
		"320": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductTypeDTO.value"
		},
		"321": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductTypeDTO.metadata"
		},
		"322": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductTypeDTO.deleted_at"
		},
		"323": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductTypeProps"
		},
		"324": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductTypeProps.id"
		},
		"325": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductTypeProps.value"
		},
		"326": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"327": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"328": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductTypeDTO"
		},
		"329": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductTypeDTO.id"
		},
		"330": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductTypeDTO.value"
		},
		"331": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductTypeDTO.metadata"
		},
		"332": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductTypeDTO"
		},
		"333": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductTypeDTO.id"
		},
		"334": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductTypeDTO.value"
		},
		"335": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductTypeDTO.metadata"
		},
		"336": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionDTO"
		},
		"337": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionDTO.id"
		},
		"338": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionDTO.title"
		},
		"339": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionDTO.product"
		},
		"340": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionDTO.values"
		},
		"341": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionDTO.metadata"
		},
		"342": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionDTO.deleted_at"
		},
		"343": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductOptionProps"
		},
		"344": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductOptionProps.id"
		},
		"345": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductOptionProps.title"
		},
		"346": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductOptionProps.product_id"
		},
		"347": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"348": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"349": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductOptionDTO"
		},
		"350": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductOptionDTO.title"
		},
		"351": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductOptionDTO.product_id"
		},
		"352": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductOptionDTO"
		},
		"353": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductOptionDTO.id"
		},
		"354": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductOptionDTO.title"
		},
		"355": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductOptionDTO.product_id"
		},
		"356": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO"
		},
		"357": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.id"
		},
		"358": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.title"
		},
		"359": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.sku"
		},
		"360": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.barcode"
		},
		"361": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.ean"
		},
		"362": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.upc"
		},
		"363": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.inventory_quantity"
		},
		"364": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.allow_backorder"
		},
		"365": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.manage_inventory"
		},
		"366": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.hs_code"
		},
		"367": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.origin_country"
		},
		"368": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.mid_code"
		},
		"369": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.material"
		},
		"370": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.weight"
		},
		"371": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.length"
		},
		"372": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.height"
		},
		"373": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.width"
		},
		"374": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.options"
		},
		"375": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.metadata"
		},
		"376": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.product"
		},
		"377": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.product_id"
		},
		"378": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.variant_rank"
		},
		"379": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.created_at"
		},
		"380": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.updated_at"
		},
		"381": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductVariantDTO.deleted_at"
		},
		"382": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductVariantProps"
		},
		"383": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductVariantProps.id"
		},
		"384": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductVariantProps.sku"
		},
		"385": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductVariantProps.product_id"
		},
		"386": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductVariantProps.options"
		},
		"387": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type"
		},
		"388": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.id"
		},
		"389": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"390": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"391": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO"
		},
		"392": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.id"
		},
		"393": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.title"
		},
		"394": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.sku"
		},
		"395": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.barcode"
		},
		"396": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.ean"
		},
		"397": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.upc"
		},
		"398": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.allow_backorder"
		},
		"399": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.inventory_quantity"
		},
		"400": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.manage_inventory"
		},
		"401": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.hs_code"
		},
		"402": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.origin_country"
		},
		"403": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.mid_code"
		},
		"404": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.material"
		},
		"405": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.weight"
		},
		"406": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.length"
		},
		"407": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.height"
		},
		"408": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.width"
		},
		"409": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.options"
		},
		"410": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductVariantDTO.metadata"
		},
		"411": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO"
		},
		"412": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.product_id"
		},
		"413": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.title"
		},
		"414": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.sku"
		},
		"415": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.barcode"
		},
		"416": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.ean"
		},
		"417": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.upc"
		},
		"418": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.allow_backorder"
		},
		"419": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.inventory_quantity"
		},
		"420": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.manage_inventory"
		},
		"421": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.hs_code"
		},
		"422": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.origin_country"
		},
		"423": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.mid_code"
		},
		"424": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.material"
		},
		"425": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.weight"
		},
		"426": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.length"
		},
		"427": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.height"
		},
		"428": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.width"
		},
		"429": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.options"
		},
		"430": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantDTO.metadata"
		},
		"431": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCollectionDTO"
		},
		"432": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCollectionDTO.id"
		},
		"433": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCollectionDTO.title"
		},
		"434": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCollectionDTO.handle"
		},
		"435": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCollectionDTO.metadata"
		},
		"436": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCollectionDTO.deleted_at"
		},
		"437": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCollectionDTO.products"
		},
		"438": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCollectionProps"
		},
		"439": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCollectionProps.id"
		},
		"440": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCollectionProps.handle"
		},
		"441": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCollectionProps.title"
		},
		"442": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"443": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"444": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCollectionDTO"
		},
		"445": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCollectionDTO.title"
		},
		"446": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCollectionDTO.handle"
		},
		"447": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCollectionDTO.product_ids"
		},
		"448": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCollectionDTO.metadata"
		},
		"449": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCollectionDTO"
		},
		"450": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCollectionDTO.id"
		},
		"451": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCollectionDTO.value"
		},
		"452": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCollectionDTO.title"
		},
		"453": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCollectionDTO.handle"
		},
		"454": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCollectionDTO.product_ids"
		},
		"455": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCollectionDTO.metadata"
		},
		"456": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO"
		},
		"457": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.id"
		},
		"458": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.name"
		},
		"459": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.description"
		},
		"460": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.handle"
		},
		"461": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.is_active"
		},
		"462": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.is_internal"
		},
		"463": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.rank"
		},
		"464": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.parent_category"
		},
		"465": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.category_children"
		},
		"466": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.created_at"
		},
		"467": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductCategoryDTO.updated_at"
		},
		"468": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCategoryProps"
		},
		"469": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCategoryProps.id"
		},
		"470": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCategoryProps.name"
		},
		"471": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCategoryProps.parent_category_id"
		},
		"472": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCategoryProps.handle"
		},
		"473": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCategoryProps.is_active"
		},
		"474": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCategoryProps.is_internal"
		},
		"475": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "FilterableProductCategoryProps.include_descendants_tree"
		},
		"476": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"477": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"478": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCategoryDTO"
		},
		"479": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCategoryDTO.name"
		},
		"480": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCategoryDTO.handle"
		},
		"481": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCategoryDTO.is_active"
		},
		"482": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCategoryDTO.is_internal"
		},
		"483": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCategoryDTO.rank"
		},
		"484": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCategoryDTO.parent_category_id"
		},
		"485": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductCategoryDTO.metadata"
		},
		"486": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCategoryDTO"
		},
		"487": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCategoryDTO.name"
		},
		"488": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCategoryDTO.handle"
		},
		"489": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCategoryDTO.is_active"
		},
		"490": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCategoryDTO.is_internal"
		},
		"491": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCategoryDTO.rank"
		},
		"492": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCategoryDTO.parent_category_id"
		},
		"493": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductCategoryDTO.metadata"
		},
		"494": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO"
		},
		"495": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.title"
		},
		"496": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.subtitle"
		},
		"497": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.description"
		},
		"498": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.is_giftcard"
		},
		"499": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.discountable"
		},
		"500": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.images"
		},
		"501": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type"
		},
		"502": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.id"
		},
		"503": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.url"
		},
		"504": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.thumbnail"
		},
		"505": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.handle"
		},
		"506": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.status"
		},
		"507": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.type"
		},
		"508": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.type_id"
		},
		"509": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.collection_id"
		},
		"510": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.tags"
		},
		"511": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.categories"
		},
		"512": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type"
		},
		"513": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.id"
		},
		"514": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.options"
		},
		"515": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.variants"
		},
		"516": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.width"
		},
		"517": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.height"
		},
		"518": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.length"
		},
		"519": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.weight"
		},
		"520": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.origin_country"
		},
		"521": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.hs_code"
		},
		"522": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.material"
		},
		"523": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.mid_code"
		},
		"524": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductDTO.metadata"
		},
		"525": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO"
		},
		"526": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.id"
		},
		"527": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.title"
		},
		"528": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.subtitle"
		},
		"529": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.description"
		},
		"530": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.is_giftcard"
		},
		"531": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.discountable"
		},
		"532": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.images"
		},
		"533": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type"
		},
		"534": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.id"
		},
		"535": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.url"
		},
		"536": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.thumbnail"
		},
		"537": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.handle"
		},
		"538": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.status"
		},
		"539": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.type"
		},
		"540": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.type_id"
		},
		"541": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.collection_id"
		},
		"542": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.tags"
		},
		"543": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.categories"
		},
		"544": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type"
		},
		"545": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "__type.id"
		},
		"546": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.options"
		},
		"547": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.variants"
		},
		"548": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.width"
		},
		"549": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.height"
		},
		"550": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.length"
		},
		"551": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.weight"
		},
		"552": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.origin_country"
		},
		"553": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.hs_code"
		},
		"554": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.material"
		},
		"555": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.mid_code"
		},
		"556": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "UpdateProductDTO.metadata"
		},
		"557": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "SoftDeleteReturn"
		},
		"558": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "__type.returnLinkableKeys"
		},
		"559": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"560": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Record"
		},
		"561": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "K"
		},
		"562": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		},
		"563": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "RestoreReturn"
		},
		"564": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "__type.returnLinkableKeys"
		},
		"565": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"566": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Omit"
		},
		"567": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		},
		"568": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "K"
		},
		"569": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig"
		},
		"570": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.serviceName"
		},
		"571": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.alias"
		},
		"572": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.fieldAlias"
		},
		"573": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type"
		},
		"574": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.path"
		},
		"575": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.forwardArgumentsOnPath"
		},
		"576": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.primaryKeys"
		},
		"577": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.relationships"
		},
		"578": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.extends"
		},
		"579": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type"
		},
		"580": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"581": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.relationship"
		},
		"582": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.args"
		},
		"583": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "ModuleJoinerRelationship"
		},
		"584": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"585": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.isInternalService"
		},
		"586": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.deleteCascade"
		},
		"587": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductStatus"
		},
		"588": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductStatus.DRAFT"
		},
		"589": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductStatus.PROPOSED"
		},
		"590": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductStatus.PUBLISHED"
		},
		"591": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductStatus.REJECTED"
		},
		"592": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductImageDTO"
		},
		"593": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductImageDTO.id"
		},
		"594": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductImageDTO.url"
		},
		"595": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductImageDTO.metadata"
		},
		"596": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductImageDTO.deleted_at"
		},
		"597": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable"
		},
		"598": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"599": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"600": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.T"
		},
		"601": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "OperatorMap"
		},
		"602": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type"
		},
		"603": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$and"
		},
		"604": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$or"
		},
		"605": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$eq"
		},
		"606": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$ne"
		},
		"607": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$in"
		},
		"608": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$nin"
		},
		"609": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$not"
		},
		"610": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$gt"
		},
		"611": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$gte"
		},
		"612": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$lt"
		},
		"613": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$lte"
		},
		"614": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$like"
		},
		"615": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$re"
		},
		"616": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$ilike"
		},
		"617": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$fulltext"
		},
		"618": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$overlap"
		},
		"619": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$contains"
		},
		"620": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$contained"
		},
		"621": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.$exists"
		},
		"622": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "T"
		},
		"623": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionValueDTO"
		},
		"624": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionValueDTO.id"
		},
		"625": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionValueDTO.value"
		},
		"626": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionValueDTO.option"
		},
		"627": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionValueDTO.variant"
		},
		"628": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionValueDTO.metadata"
		},
		"629": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "ProductOptionValueDTO.deleted_at"
		},
		"630": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantOptionDTO"
		},
		"631": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantOptionDTO.value"
		},
		"632": {
			"sourceFileName": "../../../packages/types/src/product/common.ts",
			"qualifiedName": "CreateProductVariantOptionDTO.option_id"
		},
		"633": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Pick"
		},
		"634": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		},
		"635": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "K"
		},
		"636": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Exclude"
		},
		"637": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		},
		"638": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "U"
		},
		"639": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfigAlias"
		},
		"640": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfigAlias.name"
		},
		"641": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfigAlias.args"
		},
		"642": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerRelationship"
		},
		"643": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type"
		},
		"644": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.alias"
		},
		"645": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.foreignKey"
		},
		"646": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.primaryKey"
		},
		"647": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"648": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.isInternalService"
		},
		"649": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.inverse"
		},
		"650": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.isList"
		},
		"651": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.args"
		},
		"652": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "Query"
		},
		"653": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "T"
		},
		"654": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "ExpandScalar"
		},
		"655": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "T"
		},
		"656": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "Scalar"
		},
		"657": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type"
		},
		"658": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.toHexString"
		},
		"659": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.toHexString"
		},
		"660": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "FilterQuery"
		},
		"661": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type"
		},
		"662": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.__index"
		},
		"664": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "T"
		},
		"665": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "Prev"
		},
		"666": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "FilterValue"
		},
		"667": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "T"
		},
		"668": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer"
		},
		"669": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer"
		},
		"670": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.write"
		},
		"671": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.write"
		},
		"672": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "string"
		},
		"673": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"674": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.write"
		},
		"675": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "string"
		},
		"676": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"677": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"678": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.write"
		},
		"679": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "string"
		},
		"680": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"681": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "length"
		},
		"682": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"683": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.toString"
		},
		"684": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.toString"
		},
		"685": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"686": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "start"
		},
		"687": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "end"
		},
		"688": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.toJSON"
		},
		"689": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.toJSON"
		},
		"690": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__type"
		},
		"691": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__type.type"
		},
		"692": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__type.data"
		},
		"693": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.equals"
		},
		"694": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.equals"
		},
		"695": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "otherBuffer"
		},
		"696": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.compare"
		},
		"697": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.compare"
		},
		"698": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "target"
		},
		"699": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "targetStart"
		},
		"700": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "targetEnd"
		},
		"701": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "sourceStart"
		},
		"702": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "sourceEnd"
		},
		"703": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.copy"
		},
		"704": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.copy"
		},
		"705": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "target"
		},
		"706": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "targetStart"
		},
		"707": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "sourceStart"
		},
		"708": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "sourceEnd"
		},
		"709": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.slice"
		},
		"710": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.slice"
		},
		"711": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "start"
		},
		"712": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "end"
		},
		"713": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.subarray"
		},
		"714": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.subarray"
		},
		"715": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "start"
		},
		"716": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "end"
		},
		"717": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigInt64BE"
		},
		"718": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigInt64BE"
		},
		"719": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"720": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"721": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigInt64LE"
		},
		"722": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigInt64LE"
		},
		"723": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"724": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"725": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigUInt64BE"
		},
		"726": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigUInt64BE"
		},
		"727": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"728": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"729": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigUint64BE"
		},
		"730": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigUint64BE"
		},
		"731": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"732": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"733": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigUInt64LE"
		},
		"734": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigUInt64LE"
		},
		"735": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"736": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"737": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigUint64LE"
		},
		"738": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeBigUint64LE"
		},
		"739": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"740": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"741": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUIntLE"
		},
		"742": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUIntLE"
		},
		"743": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"744": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"745": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"746": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUintLE"
		},
		"747": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUintLE"
		},
		"748": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"749": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"750": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"751": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUIntBE"
		},
		"752": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUIntBE"
		},
		"753": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"754": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"755": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"756": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUintBE"
		},
		"757": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUintBE"
		},
		"758": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"759": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"760": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"761": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeIntLE"
		},
		"762": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeIntLE"
		},
		"763": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"764": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"765": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"766": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeIntBE"
		},
		"767": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeIntBE"
		},
		"768": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"769": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"770": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"771": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigUInt64BE"
		},
		"772": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigUInt64BE"
		},
		"773": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"774": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigUint64BE"
		},
		"775": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigUint64BE"
		},
		"776": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"777": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigUInt64LE"
		},
		"778": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigUInt64LE"
		},
		"779": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"780": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigUint64LE"
		},
		"781": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigUint64LE"
		},
		"782": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"783": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigInt64BE"
		},
		"784": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigInt64BE"
		},
		"785": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"786": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigInt64LE"
		},
		"787": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readBigInt64LE"
		},
		"788": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"789": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUIntLE"
		},
		"790": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUIntLE"
		},
		"791": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"792": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"793": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUintLE"
		},
		"794": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUintLE"
		},
		"795": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"796": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"797": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUIntBE"
		},
		"798": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUIntBE"
		},
		"799": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"800": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"801": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUintBE"
		},
		"802": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUintBE"
		},
		"803": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"804": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"805": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readIntLE"
		},
		"806": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readIntLE"
		},
		"807": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"808": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"809": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readIntBE"
		},
		"810": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readIntBE"
		},
		"811": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"812": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteLength"
		},
		"813": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUInt8"
		},
		"814": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUInt8"
		},
		"815": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"816": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUint8"
		},
		"817": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUint8"
		},
		"818": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"819": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUInt16LE"
		},
		"820": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUInt16LE"
		},
		"821": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"822": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUint16LE"
		},
		"823": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUint16LE"
		},
		"824": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"825": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUInt16BE"
		},
		"826": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUInt16BE"
		},
		"827": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"828": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUint16BE"
		},
		"829": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUint16BE"
		},
		"830": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"831": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUInt32LE"
		},
		"832": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUInt32LE"
		},
		"833": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"834": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUint32LE"
		},
		"835": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUint32LE"
		},
		"836": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"837": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUInt32BE"
		},
		"838": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUInt32BE"
		},
		"839": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"840": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUint32BE"
		},
		"841": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readUint32BE"
		},
		"842": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"843": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readInt8"
		},
		"844": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readInt8"
		},
		"845": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"846": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readInt16LE"
		},
		"847": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readInt16LE"
		},
		"848": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"849": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readInt16BE"
		},
		"850": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readInt16BE"
		},
		"851": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"852": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readInt32LE"
		},
		"853": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readInt32LE"
		},
		"854": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"855": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readInt32BE"
		},
		"856": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readInt32BE"
		},
		"857": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"858": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readFloatLE"
		},
		"859": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readFloatLE"
		},
		"860": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"861": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readFloatBE"
		},
		"862": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readFloatBE"
		},
		"863": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"864": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readDoubleLE"
		},
		"865": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readDoubleLE"
		},
		"866": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"867": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readDoubleBE"
		},
		"868": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.readDoubleBE"
		},
		"869": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"870": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.reverse"
		},
		"871": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.reverse"
		},
		"872": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.swap16"
		},
		"873": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.swap16"
		},
		"874": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.swap32"
		},
		"875": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.swap32"
		},
		"876": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.swap64"
		},
		"877": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.swap64"
		},
		"878": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUInt8"
		},
		"879": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUInt8"
		},
		"880": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"881": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"882": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUint8"
		},
		"883": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUint8"
		},
		"884": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"885": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"886": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUInt16LE"
		},
		"887": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUInt16LE"
		},
		"888": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"889": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"890": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUint16LE"
		},
		"891": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUint16LE"
		},
		"892": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"893": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"894": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUInt16BE"
		},
		"895": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUInt16BE"
		},
		"896": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"897": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"898": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUint16BE"
		},
		"899": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUint16BE"
		},
		"900": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"901": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"902": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUInt32LE"
		},
		"903": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUInt32LE"
		},
		"904": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"905": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"906": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUint32LE"
		},
		"907": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUint32LE"
		},
		"908": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"909": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"910": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUInt32BE"
		},
		"911": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUInt32BE"
		},
		"912": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"913": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"914": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUint32BE"
		},
		"915": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeUint32BE"
		},
		"916": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"917": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"918": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeInt8"
		},
		"919": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeInt8"
		},
		"920": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"921": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"922": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeInt16LE"
		},
		"923": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeInt16LE"
		},
		"924": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"925": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"926": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeInt16BE"
		},
		"927": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeInt16BE"
		},
		"928": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"929": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"930": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeInt32LE"
		},
		"931": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeInt32LE"
		},
		"932": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"933": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"934": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeInt32BE"
		},
		"935": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeInt32BE"
		},
		"936": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"937": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"938": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeFloatLE"
		},
		"939": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeFloatLE"
		},
		"940": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"941": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"942": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeFloatBE"
		},
		"943": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeFloatBE"
		},
		"944": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"945": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"946": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeDoubleLE"
		},
		"947": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeDoubleLE"
		},
		"948": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"949": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"950": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeDoubleBE"
		},
		"951": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.writeDoubleBE"
		},
		"952": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"953": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"954": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.fill"
		},
		"955": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.fill"
		},
		"956": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"957": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"958": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "end"
		},
		"959": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"960": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.indexOf"
		},
		"961": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.indexOf"
		},
		"962": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"963": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteOffset"
		},
		"964": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"965": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.lastIndexOf"
		},
		"966": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.lastIndexOf"
		},
		"967": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"968": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteOffset"
		},
		"969": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"970": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.entries"
		},
		"971": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.entries"
		},
		"972": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.includes"
		},
		"973": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.includes"
		},
		"974": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "value"
		},
		"975": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteOffset"
		},
		"976": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"977": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.keys"
		},
		"978": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.keys"
		},
		"979": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.values"
		},
		"980": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.Buffer.values"
		},
		"981": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.BYTES_PER_ELEMENT"
		},
		"982": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.buffer"
		},
		"983": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.byteLength"
		},
		"984": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.byteOffset"
		},
		"985": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.copyWithin"
		},
		"986": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.copyWithin"
		},
		"987": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "target"
		},
		"988": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "start"
		},
		"989": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "end"
		},
		"990": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.every"
		},
		"991": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.every"
		},
		"992": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "predicate"
		},
		"993": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"994": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"995": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "value"
		},
		"996": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "index"
		},
		"997": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"998": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "thisArg"
		},
		"999": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.filter"
		},
		"1000": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.filter"
		},
		"1001": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "predicate"
		},
		"1002": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1003": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1004": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "value"
		},
		"1005": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "index"
		},
		"1006": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1007": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "thisArg"
		},
		"1008": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.find"
		},
		"1009": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.find"
		},
		"1010": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "predicate"
		},
		"1011": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1012": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1013": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "value"
		},
		"1014": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "index"
		},
		"1015": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "obj"
		},
		"1016": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "thisArg"
		},
		"1017": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.findIndex"
		},
		"1018": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.findIndex"
		},
		"1019": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "predicate"
		},
		"1020": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1021": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1022": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "value"
		},
		"1023": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "index"
		},
		"1024": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "obj"
		},
		"1025": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "thisArg"
		},
		"1026": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.forEach"
		},
		"1027": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.forEach"
		},
		"1028": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "callbackfn"
		},
		"1029": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1030": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1031": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "value"
		},
		"1032": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "index"
		},
		"1033": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1034": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "thisArg"
		},
		"1035": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.join"
		},
		"1036": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.join"
		},
		"1037": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "separator"
		},
		"1038": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.length"
		},
		"1039": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.map"
		},
		"1040": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.map"
		},
		"1041": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "callbackfn"
		},
		"1042": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1043": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1044": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "value"
		},
		"1045": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "index"
		},
		"1046": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1047": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "thisArg"
		},
		"1048": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.reduce"
		},
		"1049": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.reduce"
		},
		"1050": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "callbackfn"
		},
		"1051": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1052": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1053": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "previousValue"
		},
		"1054": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentValue"
		},
		"1055": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentIndex"
		},
		"1056": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1057": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.reduce"
		},
		"1058": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "callbackfn"
		},
		"1059": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1060": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1061": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "previousValue"
		},
		"1062": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentValue"
		},
		"1063": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentIndex"
		},
		"1064": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1065": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "initialValue"
		},
		"1066": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.reduce"
		},
		"1067": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "U"
		},
		"1068": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "callbackfn"
		},
		"1069": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1070": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1071": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "previousValue"
		},
		"1072": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentValue"
		},
		"1073": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentIndex"
		},
		"1074": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1075": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "initialValue"
		},
		"1076": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.reduceRight"
		},
		"1077": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.reduceRight"
		},
		"1078": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "callbackfn"
		},
		"1079": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1080": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1081": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "previousValue"
		},
		"1082": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentValue"
		},
		"1083": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentIndex"
		},
		"1084": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1085": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.reduceRight"
		},
		"1086": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "callbackfn"
		},
		"1087": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1088": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1089": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "previousValue"
		},
		"1090": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentValue"
		},
		"1091": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentIndex"
		},
		"1092": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1093": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "initialValue"
		},
		"1094": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.reduceRight"
		},
		"1095": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "U"
		},
		"1096": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "callbackfn"
		},
		"1097": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1098": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1099": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "previousValue"
		},
		"1100": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentValue"
		},
		"1101": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "currentIndex"
		},
		"1102": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1103": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "initialValue"
		},
		"1104": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.set"
		},
		"1105": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.set"
		},
		"1106": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1107": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "offset"
		},
		"1108": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.some"
		},
		"1109": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.some"
		},
		"1110": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "predicate"
		},
		"1111": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1112": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1113": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "value"
		},
		"1114": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "index"
		},
		"1115": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "array"
		},
		"1116": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "thisArg"
		},
		"1117": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.sort"
		},
		"1118": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.sort"
		},
		"1119": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "compareFn"
		},
		"1120": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1121": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1122": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "a"
		},
		"1123": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "b"
		},
		"1124": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.toLocaleString"
		},
		"1125": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.toLocaleString"
		},
		"1126": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.valueOf"
		},
		"1127": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Uint8Array.valueOf"
		},
		"1128": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Uint8Array.[iterator]"
		},
		"1129": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Uint8Array.[iterator]"
		},
		"1130": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
			"qualifiedName": "Uint8Array.[toStringTag]"
		},
		"1131": {
			"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
			"qualifiedName": "RelativeIndexable.at"
		},
		"1132": {
			"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
			"qualifiedName": "RelativeIndexable.at"
		},
		"1133": {
			"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
			"qualifiedName": "index"
		},
		"1134": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Partial"
		},
		"1135": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		},
		"1136": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "PrevLimit"
		},
		"1137": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "FilterValue2"
		},
		"1138": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "T"
		},
		"1139": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor"
		},
		"1140": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.from"
		},
		"1141": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.from"
		},
		"1142": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "arrayBuffer"
		},
		"1143": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "byteOffset"
		},
		"1144": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "length"
		},
		"1145": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.from"
		},
		"1146": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "data"
		},
		"1147": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.from"
		},
		"1148": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "data"
		},
		"1149": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.from"
		},
		"1150": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "str"
		},
		"1151": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__type"
		},
		"1152": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__type.[toPrimitive]"
		},
		"1153": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__type.[toPrimitive]"
		},
		"1154": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "hint"
		},
		"1155": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"1156": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.of"
		},
		"1157": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.of"
		},
		"1158": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "items"
		},
		"1159": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.isBuffer"
		},
		"1160": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.isBuffer"
		},
		"1161": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "obj"
		},
		"1162": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.isEncoding"
		},
		"1163": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.isEncoding"
		},
		"1164": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"1165": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.byteLength"
		},
		"1166": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.byteLength"
		},
		"1167": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "string"
		},
		"1168": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"1169": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.concat"
		},
		"1170": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.concat"
		},
		"1171": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "list"
		},
		"1172": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "totalLength"
		},
		"1173": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.copyBytesFrom"
		},
		"1174": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.copyBytesFrom"
		},
		"1175": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "view"
		},
		"1176": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "offset"
		},
		"1177": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "length"
		},
		"1178": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.compare"
		},
		"1179": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.compare"
		},
		"1180": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "buf1"
		},
		"1181": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "buf2"
		},
		"1182": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.alloc"
		},
		"1183": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.alloc"
		},
		"1184": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "size"
		},
		"1185": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "fill"
		},
		"1186": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"1187": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.allocUnsafe"
		},
		"1188": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.allocUnsafe"
		},
		"1189": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "size"
		},
		"1190": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.allocUnsafeSlow"
		},
		"1191": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.allocUnsafeSlow"
		},
		"1192": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "size"
		},
		"1193": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor.poolSize"
		},
		"1194": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor"
		},
		"1195": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor"
		},
		"1196": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "str"
		},
		"1197": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "encoding"
		},
		"1198": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor"
		},
		"1199": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "size"
		},
		"1200": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor"
		},
		"1201": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "array"
		},
		"1202": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor"
		},
		"1203": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "arrayBuffer"
		},
		"1204": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor"
		},
		"1205": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "array"
		},
		"1206": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferConstructor"
		},
		"1207": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "buffer"
		},
		"1208": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.BufferEncoding"
		},
		"1209": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IterableIterator"
		},
		"1210": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IterableIterator.[iterator]"
		},
		"1211": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IterableIterator.[iterator]"
		},
		"1212": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.next"
		},
		"1213": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.next"
		},
		"1214": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "args"
		},
		"1215": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.return"
		},
		"1216": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.return"
		},
		"1217": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "value"
		},
		"1218": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.throw"
		},
		"1219": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.throw"
		},
		"1220": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "e"
		},
		"1221": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IterableIterator.T"
		},
		"1222": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "ArrayBufferLike"
		},
		"1223": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "ArrayLike"
		},
		"1224": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "ArrayLike.length"
		},
		"1225": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "ArrayLike.T"
		},
		"1226": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "ArrayLike.__index"
		},
		"1228": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "Primary"
		},
		"1229": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type"
		},
		"1230": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.[PrimaryKeyType]"
		},
		"1231": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type"
		},
		"1232": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type._id"
		},
		"1233": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type"
		},
		"1234": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.uuid"
		},
		"1235": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type"
		},
		"1236": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "__type.id"
		},
		"1237": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "T"
		},
		"1238": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__global.WithImplicitCoercion"
		},
		"1239": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__type"
		},
		"1240": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__type.valueOf"
		},
		"1241": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "__type.valueOf"
		},
		"1242": {
			"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
			"qualifiedName": "T"
		},
		"1243": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBuffer"
		},
		"1244": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBuffer"
		},
		"1245": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBuffer.byteLength"
		},
		"1246": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBuffer.slice"
		},
		"1247": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBuffer.slice"
		},
		"1248": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "begin"
		},
		"1249": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "end"
		},
		"1250": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBuffer.[species]"
		},
		"1251": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBuffer.[toStringTag]"
		},
		"1252": {
			"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
			"qualifiedName": "NodeJS.ArrayBufferView"
		},
		"1253": {
			"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
			"qualifiedName": "NodeJS.TypedArray"
		},
		"1254": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator"
		},
		"1255": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.next"
		},
		"1256": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.next"
		},
		"1257": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "args"
		},
		"1258": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.return"
		},
		"1259": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.return"
		},
		"1260": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "value"
		},
		"1261": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.throw"
		},
		"1262": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.throw"
		},
		"1263": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "e"
		},
		"1264": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.T"
		},
		"1265": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.TReturn"
		},
		"1266": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "Iterator.TNext"
		},
		"1267": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorResult"
		},
		"1268": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "T"
		},
		"1269": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "TReturn"
		},
		"1270": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "ReadonlyPrimary"
		},
		"1271": {
			"sourceFileName": "../../../packages/types/src/dal/utils.ts",
			"qualifiedName": "T"
		},
		"1272": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBufferConstructor"
		},
		"1273": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBufferConstructor.prototype"
		},
		"1274": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBufferConstructor"
		},
		"1275": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "SharedArrayBufferConstructor"
		},
		"1276": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
			"qualifiedName": "byteLength"
		},
		"1277": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorYieldResult"
		},
		"1278": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorYieldResult.done"
		},
		"1279": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorYieldResult.value"
		},
		"1280": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorYieldResult.TYield"
		},
		"1281": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorReturnResult"
		},
		"1282": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorReturnResult.done"
		},
		"1283": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorReturnResult.value"
		},
		"1284": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorReturnResult.TReturn"
		},
		"1285": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Readonly"
		},
		"1286": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		}
	}
}