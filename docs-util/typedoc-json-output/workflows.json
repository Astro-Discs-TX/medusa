{
	"id": 0,
	"name": "workflows",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1030,
			"name": "EventEmitter",
			"variant": "declaration",
			"kind": 4,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1031,
					"name": "EventEmitter",
					"variant": "reference",
					"kind": 4194304,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 451,
							"character": 29
						}
					],
					"target": 908
				},
				{
					"id": 1065,
					"name": "EventEmitterAsyncResource",
					"variant": "declaration",
					"kind": 128,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Integrates "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " with "
							},
							{
								"kind": "code",
								"text": "`AsyncResource`"
							},
							{
								"kind": "text",
								"text": " for "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": "s that\nrequire manual async tracking. Specifically, all events emitted by instances\nof "
							},
							{
								"kind": "code",
								"text": "`events.EventEmitterAsyncResource`"
							},
							{
								"kind": "text",
								"text": " will run within its "
							},
							{
								"kind": "code",
								"text": "`async context`"
							},
							{
								"kind": "text",
								"text": ".\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitterAsyncResource, EventEmitter } from 'node:events';\nimport { notStrictEqual, strictEqual } from 'node:assert';\nimport { executionAsyncId, triggerAsyncId } from 'node:async_hooks';\n\n// Async tracking tooling will identify this as 'Q'.\nconst ee1 = new EventEmitterAsyncResource({ name: 'Q' });\n\n// 'foo' listeners will run in the EventEmitters async context.\nee1.on('foo', () => {\n  strictEqual(executionAsyncId(), ee1.asyncId);\n  strictEqual(triggerAsyncId(), ee1.triggerAsyncId);\n});\n\nconst ee2 = new EventEmitter();\n\n// 'foo' listeners on ordinary EventEmitters that do not track async\n// context, however, run in the same async context as the emit().\nee2.on('foo', () => {\n  notStrictEqual(executionAsyncId(), ee2.asyncId);\n  notStrictEqual(triggerAsyncId(), ee2.triggerAsyncId);\n});\n\nPromise.resolve().then(() => {\n  ee1.emit('foo');\n  ee2.emit('foo');\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`EventEmitterAsyncResource`"
							},
							{
								"kind": "text",
								"text": " class has the same methods and takes the\nsame options as "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`AsyncResource`"
							},
							{
								"kind": "text",
								"text": " themselves."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v17.4.0, v16.14.0"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1106,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 514,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1107,
									"name": "new EventEmitterAsyncResource",
									"variant": "signature",
									"kind": 16384,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 514,
											"character": 12
										}
									],
									"parameters": [
										{
											"id": 1108,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Only optional in child class."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 1060,
												"name": "EventEmitterAsyncResourceOptions",
												"package": "@types/node",
												"qualifiedName": "EventEmitter.EventEmitterAsyncResourceOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1065,
										"name": "EventEmitterAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
									},
									"overwrites": {
										"type": "reference",
										"target": 950,
										"name": "EventEmitter.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 949,
								"name": "EventEmitter.constructor"
							}
						},
						{
							"id": 1111,
							"name": "asyncId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The unique "
									},
									{
										"kind": "code",
										"text": "`asyncId`"
									},
									{
										"kind": "text",
										"text": " assigned to the resource."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 525,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1113,
							"name": "asyncResource",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The returned "
									},
									{
										"kind": "code",
										"text": "`AsyncResource`"
									},
									{
										"kind": "text",
										"text": " object has an additional "
									},
									{
										"kind": "code",
										"text": "`eventEmitter`"
									},
									{
										"kind": "text",
										"text": " property\nthat provides a reference to this "
									},
									{
										"kind": "code",
										"text": "`EventEmitterAsyncResource`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 534,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"target": 1034,
								"name": "EventEmitterReferencingAsyncResource",
								"package": "@types/node",
								"qualifiedName": "EventEmitter.EventEmitterReferencingAsyncResource"
							}
						},
						{
							"id": 1112,
							"name": "triggerAsyncId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The same triggerAsyncId that is passed to the AsyncResource constructor."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 529,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1103,
							"name": "captureRejectionSymbol",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: "
									},
									{
										"kind": "code",
										"text": "`Symbol.for('nodejs.rejection')`"
									},
									{
										"kind": "text",
										"text": "\n\nSee how to write a custom "
									},
									{
										"kind": "code",
										"text": "`rejection handler`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 402,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 746,
									"name": "captureRejectionSymbol",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.captureRejectionSymbol"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 946,
								"name": "EventEmitter.captureRejectionSymbol"
							}
						},
						{
							"id": 1104,
							"name": "captureRejections",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
									},
									{
										"kind": "code",
										"text": "`captureRejections`"
									},
									{
										"kind": "text",
										"text": " option on all new "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " objects."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 409,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 947,
								"name": "EventEmitter.captureRejections"
							}
						},
						{
							"id": 1105,
							"name": "defaultMaxListeners",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default, a maximum of "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances\nusing the "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " method. To change the default\nfor _all_"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": "property can be used. If this value is not a positive number, a "
									},
									{
										"kind": "code",
										"text": "`RangeError`"
									},
									{
										"kind": "text",
										"text": "is thrown.\n\nTake caution when setting the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": " because the\nchange affects _all_"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, including those created before\nthe change is made. However, calling "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " still has\nprecedence over "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis is not a hard limit. The "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`emitter.getMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": "methods can be used to\ntemporarily avoid this warning:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe "
									},
									{
										"kind": "code",
										"text": "`--trace-warnings`"
									},
									{
										"kind": "text",
										"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
									},
									{
										"kind": "code",
										"text": "`process.on('warning')`"
									},
									{
										"kind": "text",
										"text": " and will\nhave the additional "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`count`"
									},
									{
										"kind": "text",
										"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " property is set to "
									},
									{
										"kind": "code",
										"text": "`'MaxListenersExceededWarning'`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.2"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 446,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 948,
								"name": "EventEmitter.defaultMaxListeners"
							}
						},
						{
							"id": 1102,
							"name": "errorMonitor",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This symbol shall be used to install a listener for only monitoring "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": "events. Listeners installed using this symbol are called before the regular"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is emitted. Therefore, the process will still crash if no\nregular "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listener is installed."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 395,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 745,
									"name": "errorMonitor",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.errorMonitor"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 945,
								"name": "EventEmitter.errorMonitor"
							}
						},
						{
							"id": 1114,
							"name": "[captureRejectionSymbol]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 112,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 1115,
									"name": "[captureRejectionSymbol]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 112,
											"character": 8
										}
									],
									"parameters": [
										{
											"id": 1116,
											"name": "error",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 1308,
												"name": "Error",
												"package": "typescript"
											}
										},
										{
											"id": 1117,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1118,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 953,
										"name": "EventEmitter.[captureRejectionSymbol]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 952,
								"name": "EventEmitter.[captureRejectionSymbol]"
							}
						},
						{
							"id": 1119,
							"name": "addListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 545,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1120,
									"name": "addListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "code",
												"text": "`emitter.on(eventName, listener)`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 545,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1121,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1122,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1123,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 545,
															"character": 66
														}
													],
													"signatures": [
														{
															"id": 1124,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/events.d.ts",
																	"line": 545,
																	"character": 66
																}
															],
															"parameters": [
																{
																	"id": 1125,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1065,
										"name": "EventEmitterAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 958,
										"name": "EventEmitter.addListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 957,
								"name": "EventEmitter.addListener"
							}
						},
						{
							"id": 1168,
							"name": "emit",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 807,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1169,
									"name": "emit",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Synchronously calls each of the listeners registered for the event named"
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
											},
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": " if the event had listeners, "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": " otherwise.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 807,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1170,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1171,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1007,
										"name": "EventEmitter.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1006,
								"name": "EventEmitter.emit"
							}
						},
						{
							"id": 1109,
							"name": "emitDestroy",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 521,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1110,
									"name": "emitDestroy",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Call all "
											},
											{
												"kind": "code",
												"text": "`destroy`"
											},
											{
												"kind": "text",
												"text": " hooks. This should only ever be called once. An error will\nbe thrown if it is called more than once. This **must** be manually called. If\nthe resource is left to be collected by the GC then the "
											},
											{
												"kind": "code",
												"text": "`destroy`"
											},
											{
												"kind": "text",
												"text": " hooks will\nnever be called."
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 521,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1190,
							"name": "eventNames",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 870,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1191,
									"name": "eventNames",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
											},
											{
												"kind": "code",
												"text": "`Symbol`"
											},
											{
												"kind": "text",
												"text": "s.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 870,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1029,
										"name": "EventEmitter.eventNames"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1028,
								"name": "EventEmitter.eventNames"
							}
						},
						{
							"id": 1160,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 722,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1161,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the current max listener value for the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " which is either\nset by "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners(n)`"
											},
											{
												"kind": "text",
												"text": " or defaults to "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "defaultMaxListeners",
												"target": 1105
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v1.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 722,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 999,
										"name": "EventEmitter.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 998,
								"name": "EventEmitter.getMaxListeners"
							}
						},
						{
							"id": 1172,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 816,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1173,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the number of listeners listening for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\nIf "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v3.2.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 816,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1174,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event being listened for"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1175,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event handler function"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Function"
												},
												"name": "Function",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1011,
										"name": "EventEmitter.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1010,
								"name": "EventEmitter.listenerCount"
							}
						},
						{
							"id": 1162,
							"name": "listeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 735,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1163,
									"name": "listeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 735,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1164,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1001,
										"name": "EventEmitter.listeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1000,
								"name": "EventEmitter.listeners"
							}
						},
						{
							"id": 1147,
							"name": "off",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 695,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1148,
									"name": "off",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "code",
												"text": "`emitter.removeListener()`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v10.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 695,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1149,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1150,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1151,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 695,
															"character": 58
														}
													],
													"signatures": [
														{
															"id": 1152,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/events.d.ts",
																	"line": 695,
																	"character": 58
																}
															],
															"parameters": [
																{
																	"id": 1153,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1065,
										"name": "EventEmitterAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 986,
										"name": "EventEmitter.off"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 985,
								"name": "EventEmitter.off"
							}
						},
						{
							"id": 1126,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 577,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1127,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the end of the listeners array for the\nevent named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has\nalready been added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": "and "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple\ntimes.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
											},
											{
												"kind": "code",
												"text": "`emitter.prependListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.101"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 577,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1128,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1129,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1130,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 577,
															"character": 57
														}
													],
													"signatures": [
														{
															"id": 1131,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/events.d.ts",
																	"line": 577,
																	"character": 57
																}
															],
															"parameters": [
																{
																	"id": 1132,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1065,
										"name": "EventEmitterAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 965,
										"name": "EventEmitter.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 964,
								"name": "EventEmitter.on"
							}
						},
						{
							"id": 1133,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 607,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1134,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time**"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". The\nnext time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this listener is removed and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
											},
											{
												"kind": "code",
												"text": "`emitter.prependOnceListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 607,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1135,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1136,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1137,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 607,
															"character": 59
														}
													],
													"signatures": [
														{
															"id": 1138,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/events.d.ts",
																	"line": 607,
																	"character": 59
																}
															],
															"parameters": [
																{
																	"id": 1139,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1065,
										"name": "EventEmitterAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 972,
										"name": "EventEmitter.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 971,
								"name": "EventEmitter.once"
							}
						},
						{
							"id": 1176,
							"name": "prependListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 834,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1177,
									"name": "prependListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the _beginning_ of the listeners array for the\nevent named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has\nalready been added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": "and "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple\ntimes.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 834,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1178,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1179,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1180,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 834,
															"character": 70
														}
													],
													"signatures": [
														{
															"id": 1181,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/events.d.ts",
																	"line": 834,
																	"character": 70
																}
															],
															"parameters": [
																{
																	"id": 1182,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1065,
										"name": "EventEmitterAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1015,
										"name": "EventEmitter.prependListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1014,
								"name": "EventEmitter.prependListener"
							}
						},
						{
							"id": 1183,
							"name": "prependOnceListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 850,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1184,
									"name": "prependOnceListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time**"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " to the _beginning_ of the listeners array. The next time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 850,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1185,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1186,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1187,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 850,
															"character": 74
														}
													],
													"signatures": [
														{
															"id": 1188,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/events.d.ts",
																	"line": 850,
																	"character": 74
																}
															],
															"parameters": [
																{
																	"id": 1189,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1065,
										"name": "EventEmitterAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1022,
										"name": "EventEmitter.prependOnceListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1021,
								"name": "EventEmitter.prependOnceListener"
							}
						},
						{
							"id": 1165,
							"name": "rawListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 766,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1166,
									"name": "rawListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ",\nincluding any wrappers (such as those created by "
											},
											{
												"kind": "code",
												"text": "`.once()`"
											},
											{
												"kind": "text",
												"text": ").\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v9.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 766,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1167,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1004,
										"name": "EventEmitter.rawListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1003,
								"name": "EventEmitter.rawListeners"
							}
						},
						{
							"id": 1154,
							"name": "removeAllListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 706,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1155,
									"name": "removeAllListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes all listeners, or those of the specified "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 706,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1156,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1065,
										"name": "EventEmitterAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 993,
										"name": "EventEmitter.removeAllListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 992,
								"name": "EventEmitter.removeAllListeners"
							}
						},
						{
							"id": 1140,
							"name": "removeListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 690,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1141,
									"name": "removeListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes the specified "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " from the listener array for the event named"
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
											},
											{
												"kind": "text",
												"text": "\n\n"
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ", then "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`removeAllListeners()`"
											},
											{
												"kind": "text",
												"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
											},
											{
												"kind": "code",
												"text": "`emit()`"
											},
											{
												"kind": "text",
												"text": " in progress. Subsequent events behave as expected.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
											},
											{
												"kind": "code",
												"text": "`emitter.listeners()`"
											},
											{
												"kind": "text",
												"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " will remove the most\nrecently added instance. In the example the "
											},
											{
												"kind": "code",
												"text": "`once('ping')`"
											},
											{
												"kind": "text",
												"text": "listener is removed:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 690,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1142,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1143,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1144,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 690,
															"character": 69
														}
													],
													"signatures": [
														{
															"id": 1145,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/events.d.ts",
																	"line": 690,
																	"character": 69
																}
															],
															"parameters": [
																{
																	"id": 1146,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1065,
										"name": "EventEmitterAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 979,
										"name": "EventEmitter.removeListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 978,
								"name": "EventEmitter.removeListener"
							}
						},
						{
							"id": 1157,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 716,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1158,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "By default "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s will print a warning if more than "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners()`"
											},
											{
												"kind": "text",
												"text": " method allows the limit to be\nmodified for this specific "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance. The value can be set to"
											},
											{
												"kind": "code",
												"text": "`Infinity`"
											},
											{
												"kind": "text",
												"text": " (or "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.5"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 716,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1159,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1065,
										"name": "EventEmitterAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 996,
										"name": "EventEmitter.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 995,
								"name": "EventEmitter.setMaxListeners"
							}
						},
						{
							"id": 1095,
							"name": "addAbortListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 387,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 1096,
									"name": "addAbortListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Listens once to the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " event on the provided "
											},
											{
												"kind": "code",
												"text": "`signal`"
											},
											{
												"kind": "text",
												"text": ".\n\nListening to the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
											},
											{
												"kind": "code",
												"text": "`e.stopImmediatePropagation()`"
											},
											{
												"kind": "text",
												"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
											},
											{
												"kind": "code",
												"text": "`stopImmediatePropagation`"
											},
											{
												"kind": "text",
												"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v20.5.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Disposable that removes the "
													},
													{
														"kind": "code",
														"text": "`abort`"
													},
													{
														"kind": "text",
														"text": " listener."
													}
												]
											}
										],
										"modifierTags": [
											"@experimental"
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 387,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 1097,
											"name": "signal",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "AbortSignal"
												},
												"name": "AbortSignal",
												"package": "typescript"
											}
										},
										{
											"id": 1098,
											"name": "resource",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1099,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 387,
															"character": 63
														}
													],
													"signatures": [
														{
															"id": 1100,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/events.d.ts",
																	"line": 387,
																	"character": 63
																}
															],
															"parameters": [
																{
																	"id": 1101,
																	"name": "event",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
																			"qualifiedName": "Event"
																		},
																		"name": "Event",
																		"package": "typescript"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1305,
										"name": "Disposable",
										"package": "@types/node"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 939,
										"name": "EventEmitter.addAbortListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 938,
								"name": "EventEmitter.addAbortListener"
							}
						},
						{
							"id": 1084,
							"name": "getEventListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 308,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 1085,
									"name": "getEventListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.listeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.2.0, v14.17.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 308,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 1086,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 1202,
														"name": "_DOMEventTarget",
														"package": "@types/node"
													},
													{
														"type": "reference",
														"target": 1213,
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													}
												]
											}
										},
										{
											"id": 1087,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 928,
										"name": "EventEmitter.getEventListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 927,
								"name": "EventEmitter.getEventListeners"
							}
						},
						{
							"id": 1088,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 337,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 1089,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the currently set max amount of listeners.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.getMaxListeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v19.9.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 337,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 1090,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 1202,
														"name": "_DOMEventTarget",
														"package": "@types/node"
													},
													{
														"type": "reference",
														"target": 1213,
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 932,
										"name": "EventEmitter.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 931,
								"name": "EventEmitter.getMaxListeners"
							}
						},
						{
							"id": 1080,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 280,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 1081,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A class method that returns the number of listeners for the given "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": "registered on the given "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.9.12"
													}
												]
											},
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Since v3.2.0 - Use "
													},
													{
														"kind": "code",
														"text": "`listenerCount`"
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 280,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 1082,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The emitter to query"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 1213,
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										},
										{
											"id": 1083,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event name"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 924,
										"name": "EventEmitter.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 923,
								"name": "EventEmitter.listenerCount"
							}
						},
						{
							"id": 1075,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 258,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 1076,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns an "
											},
											{
												"kind": "code",
												"text": "`AsyncIterator`"
											},
											{
												"kind": "text",
												"text": " that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events. It will throw\nif the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": ". It removes all listeners when\nexiting the loop. The "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting on events:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v13.6.0, v12.16.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "that iterates "
													},
													{
														"kind": "code",
														"text": "`eventName`"
													},
													{
														"kind": "text",
														"text": " events emitted by the "
													},
													{
														"kind": "code",
														"text": "`emitter`"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 258,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 1077,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 1213,
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										},
										{
											"id": 1078,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event being listened for"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1079,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": 1200,
												"name": "StaticEventEmitterOptions",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1292,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "AsyncIterableIterator",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 919,
										"name": "EventEmitter.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 918,
								"name": "EventEmitter.on"
							}
						},
						{
							"id": 1066,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 193,
									"character": 15
								},
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 198,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 1067,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Creates a "
											},
											{
												"kind": "code",
												"text": "`Promise`"
											},
											{
												"kind": "text",
												"text": " that is fulfilled when the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits the given\nevent or that is rejected if the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " while waiting.\nThe "
											},
											{
												"kind": "code",
												"text": "`Promise`"
											},
											{
												"kind": "text",
												"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event\nsemantics and does not listen to the "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nThe special handling of the "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event is only used when "
											},
											{
												"kind": "code",
												"text": "`events.once()`"
											},
											{
												"kind": "text",
												"text": "is used to wait for another event. If "
											},
											{
												"kind": "code",
												"text": "`events.once()`"
											},
											{
												"kind": "text",
												"text": " is used to wait for the\n'"
											},
											{
												"kind": "code",
												"text": "`error'`"
											},
											{
												"kind": "text",
												"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
											},
											{
												"kind": "text",
												"text": "\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting for the event:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v11.13.0, v10.16.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 193,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 1068,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 1192,
												"name": "_NodeEventTarget",
												"package": "@types/node"
											}
										},
										{
											"id": 1069,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1070,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": 1200,
												"name": "StaticEventEmitterOptions",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 910,
										"name": "EventEmitter.once"
									}
								},
								{
									"id": 1071,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 198,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 1072,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 1202,
												"name": "_DOMEventTarget",
												"package": "@types/node"
											}
										},
										{
											"id": 1073,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1074,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": 1200,
												"name": "StaticEventEmitterOptions",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 914,
										"name": "EventEmitter.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 909,
								"name": "EventEmitter.once"
							}
						},
						{
							"id": 1091,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 352,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 1092,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/events.d.ts",
											"line": 352,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 1093,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A non-negative number. The maximum number of listeners per "
													},
													{
														"kind": "code",
														"text": "`EventTarget`"
													},
													{
														"kind": "text",
														"text": " event."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1094,
											"name": "eventTargets",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"target": 1202,
															"name": "_DOMEventTarget",
															"package": "@types/node"
														},
														{
															"type": "reference",
															"target": 1213,
															"name": "EventEmitter",
															"package": "@types/node",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 935,
										"name": "EventEmitter.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 934,
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1106
							]
						},
						{
							"title": "Properties",
							"children": [
								1111,
								1113,
								1112,
								1103,
								1104,
								1105,
								1102
							]
						},
						{
							"title": "Methods",
							"children": [
								1114,
								1119,
								1168,
								1109,
								1190,
								1160,
								1172,
								1162,
								1147,
								1126,
								1133,
								1176,
								1183,
								1165,
								1154,
								1140,
								1157,
								1095,
								1084,
								1088,
								1080,
								1075,
								1066,
								1091
							]
						}
					],
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 510,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 908,
							"name": "EventEmitter",
							"package": "@types/node"
						}
					]
				},
				{
					"id": 1032,
					"name": "Abortable",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isExternal": true
					},
					"children": [
						{
							"id": 1033,
							"name": "signal",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When provided the corresponding "
									},
									{
										"kind": "code",
										"text": "`AbortController`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel an asynchronous action."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 456,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "AbortSignal"
								},
								"name": "AbortSignal",
								"package": "typescript"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1033
							]
						}
					],
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 452,
							"character": 25
						}
					]
				},
				{
					"id": 1060,
					"name": "EventEmitterAsyncResourceOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isExternal": true
					},
					"children": [
						{
							"id": 1064,
							"name": "captureRejections",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Enables automatic capturing of promise rejection."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 76,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1359,
								"name": "EventEmitterOptions.captureRejections"
							}
						},
						{
							"id": 1061,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of async event, this is required when instantiating "
									},
									{
										"kind": "code",
										"text": "`EventEmitterAsyncResource`"
									},
									{
										"kind": "text",
										"text": "\ndirectly rather than as a child class."
									}
								],
								"blockTags": [
									{
										"tag": "@default",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nnew.target.name if instantiated as a child class.\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 469,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1063,
							"name": "requireManualDestroy",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Disables automatic "
									},
									{
										"kind": "code",
										"text": "`emitDestroy`"
									},
									{
										"kind": "text",
										"text": " when the object is garbage collected.\nThis usually does not need to be set (even if "
									},
									{
										"kind": "code",
										"text": "`emitDestroy`"
									},
									{
										"kind": "text",
										"text": " is called\nmanually), unless the resource's "
									},
									{
										"kind": "code",
										"text": "`asyncId`"
									},
									{
										"kind": "text",
										"text": " is retrieved and the\nsensitive API's "
									},
									{
										"kind": "code",
										"text": "`emitDestroy`"
									},
									{
										"kind": "text",
										"text": " is called with it."
									}
								],
								"blockTags": [
									{
										"tag": "@default",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nfalse\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 222,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1402,
								"name": "AsyncResourceOptions.requireManualDestroy"
							}
						},
						{
							"id": 1062,
							"name": "triggerAsyncId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The ID of the execution context that created this async event."
									}
								],
								"blockTags": [
									{
										"tag": "@default",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nexecutionAsyncId()\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 214,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1401,
								"name": "AsyncResourceOptions.triggerAsyncId"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1064,
								1061,
								1063,
								1062
							]
						}
					],
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 463,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 1400,
							"name": "AsyncResourceOptions",
							"package": "@types/node",
							"qualifiedName": "\"async_hooks\".AsyncResourceOptions"
						},
						{
							"type": "reference",
							"target": 1358,
							"name": "EventEmitterOptions",
							"package": "@types/node"
						}
					]
				},
				{
					"id": 1034,
					"name": "EventEmitterReferencingAsyncResource",
					"variant": "declaration",
					"kind": 256,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The class "
							},
							{
								"kind": "code",
								"text": "`AsyncResource`"
							},
							{
								"kind": "text",
								"text": " is designed to be extended by the embedder's async\nresources. Using this, users can easily trigger the lifetime events of their\nown resources.\n\nThe "
							},
							{
								"kind": "code",
								"text": "`init`"
							},
							{
								"kind": "text",
								"text": " hook will trigger when an "
							},
							{
								"kind": "code",
								"text": "`AsyncResource`"
							},
							{
								"kind": "text",
								"text": " is instantiated.\n\nThe following is an overview of the "
							},
							{
								"kind": "code",
								"text": "`AsyncResource`"
							},
							{
								"kind": "text",
								"text": " API.\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { AsyncResource, executionAsyncId } from 'node:async_hooks';\n\n// AsyncResource() is meant to be extended. Instantiating a\n// new AsyncResource() also triggers init. If triggerAsyncId is omitted then\n// async_hook.executionAsyncId() is used.\nconst asyncResource = new AsyncResource(\n  type, { triggerAsyncId: executionAsyncId(), requireManualDestroy: false },\n);\n\n// Run a function in the execution context of the resource. This will\n// * establish the context of the resource\n// * trigger the AsyncHooks before callbacks\n// * call the provided function `fn` with the supplied arguments\n// * trigger the AsyncHooks after callbacks\n// * restore the original execution context\nasyncResource.runInAsyncScope(fn, thisArg, ...args);\n\n// Call AsyncHooks destroy callbacks.\nasyncResource.emitDestroy();\n\n// Return the unique ID assigned to the AsyncResource instance.\nasyncResource.asyncId();\n\n// Return the trigger ID for the AsyncResource instance.\nasyncResource.triggerAsyncId();\n```"
							}
						]
					},
					"children": [
						{
							"id": 1035,
							"name": "eventEmitter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 460,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"target": 1065,
								"name": "EventEmitterAsyncResource",
								"package": "@types/node",
								"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
							}
						},
						{
							"id": 1056,
							"name": "asyncId",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 315,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 1057,
									"name": "asyncId",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The unique "
													},
													{
														"kind": "code",
														"text": "`asyncId`"
													},
													{
														"kind": "text",
														"text": " assigned to the resource."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
											"line": 315,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1397,
										"name": "AsyncResource.asyncId"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1396,
								"name": "AsyncResource.asyncId"
							}
						},
						{
							"id": 1036,
							"name": "bind",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 288,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 1037,
									"name": "bind",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Binds the given function to execute to this "
											},
											{
												"kind": "code",
												"text": "`AsyncResource`"
											},
											{
												"kind": "text",
												"text": "'s scope."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v14.8.0, v12.19.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
											"line": 288,
											"character": 8
										}
									],
									"typeParameter": [
										{
											"id": 1038,
											"name": "Func",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1039,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
															"line": 288,
															"character": 26
														}
													],
													"signatures": [
														{
															"id": 1040,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
																	"line": 288,
																	"character": 26
																}
															],
															"parameters": [
																{
																	"id": 1041,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"parameters": [
										{
											"id": 1042,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The function to bind to the current "
													},
													{
														"kind": "code",
														"text": "`AsyncResource`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Func",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": -1,
										"name": "Func",
										"refersToTypeParameter": true
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1377,
										"name": "AsyncResource.bind"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1376,
								"name": "AsyncResource.bind"
							}
						},
						{
							"id": 1054,
							"name": "emitDestroy",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 311,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 1055,
									"name": "emitDestroy",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Call all "
											},
											{
												"kind": "code",
												"text": "`destroy`"
											},
											{
												"kind": "text",
												"text": " hooks. This should only ever be called once. An error will\nbe thrown if it is called more than once. This **must** be manually called. If\nthe resource is left to be collected by the GC then the "
											},
											{
												"kind": "code",
												"text": "`destroy`"
											},
											{
												"kind": "text",
												"text": " hooks will\nnever be called."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A reference to "
													},
													{
														"kind": "code",
														"text": "`asyncResource`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
											"line": 311,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"target": 1034,
										"name": "EventEmitterReferencingAsyncResource",
										"package": "@types/node",
										"qualifiedName": "EventEmitter.EventEmitterReferencingAsyncResource"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1395,
										"name": "AsyncResource.emitDestroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1394,
								"name": "AsyncResource.emitDestroy"
							}
						},
						{
							"id": 1043,
							"name": "runInAsyncScope",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 299,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 1044,
									"name": "runInAsyncScope",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Call the provided function with the provided arguments in the execution context\nof the async resource. This will establish the context, trigger the AsyncHooks\nbefore callbacks, call the function, trigger the AsyncHooks after callbacks, and\nthen restore the original execution context."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v9.6.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
											"line": 299,
											"character": 8
										}
									],
									"typeParameter": [
										{
											"id": 1045,
											"name": "This",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										},
										{
											"id": 1046,
											"name": "Result",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 1047,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The function to call in the execution context of this async resource."
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1048,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
															"line": 300,
															"character": 16
														}
													],
													"signatures": [
														{
															"id": 1049,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
																	"line": 300,
																	"character": 16
																}
															],
															"parameters": [
																{
																	"id": 1050,
																	"name": "this",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": -1,
																		"name": "This",
																		"refersToTypeParameter": true
																	}
																},
																{
																	"id": 1051,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": -1,
																"name": "Result",
																"refersToTypeParameter": true
															}
														}
													]
												}
											}
										},
										{
											"id": 1052,
											"name": "thisArg",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The receiver to be used for the function call."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "This",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1053,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Optional arguments to pass to the function."
													}
												]
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": -1,
										"name": "Result",
										"refersToTypeParameter": true
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1384,
										"name": "AsyncResource.runInAsyncScope"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1383,
								"name": "AsyncResource.runInAsyncScope"
							}
						},
						{
							"id": 1058,
							"name": "triggerAsyncId",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 319,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 1059,
									"name": "triggerAsyncId",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The same "
													},
													{
														"kind": "code",
														"text": "`triggerAsyncId`"
													},
													{
														"kind": "text",
														"text": " that is passed to the "
													},
													{
														"kind": "code",
														"text": "`AsyncResource`"
													},
													{
														"kind": "text",
														"text": " constructor."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
											"line": 319,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1399,
										"name": "AsyncResource.triggerAsyncId"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1398,
								"name": "AsyncResource.triggerAsyncId"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1035
							]
						},
						{
							"title": "Methods",
							"children": [
								1056,
								1036,
								1054,
								1043,
								1058
							]
						}
					],
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 459,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 1360,
							"name": "AsyncResource",
							"package": "@types/node",
							"qualifiedName": "\"async_hooks\".AsyncResource"
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						1031
					]
				},
				{
					"title": "Classes",
					"children": [
						1065
					]
				},
				{
					"title": "Interfaces",
					"children": [
						1032,
						1060,
						1034
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 95,
					"character": 14
				},
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 109,
					"character": 10
				},
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 449,
					"character": 14
				}
			]
		},
		{
			"id": 685,
			"name": "MODULE_RESOURCE_TYPE",
			"variant": "declaration",
			"kind": 8,
			"flags": {},
			"children": [
				{
					"id": 687,
					"name": "ISOLATED",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/dist/modules-sdk/index.d.ts",
							"line": 15,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "isolated"
					}
				},
				{
					"id": 686,
					"name": "SHARED",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/dist/modules-sdk/index.d.ts",
							"line": 14,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "shared"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						687,
						686
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
					"line": 13,
					"character": 20
				}
			]
		},
		{
			"id": 543,
			"name": "TransactionHandlerType",
			"variant": "declaration",
			"kind": 8,
			"flags": {},
			"children": [
				{
					"id": 545,
					"name": "COMPENSATE",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 3,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "compensate"
					}
				},
				{
					"id": 544,
					"name": "INVOKE",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 2,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "invoke"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						545,
						544
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/types.d.ts",
					"line": 1,
					"character": 20
				}
			]
		},
		{
			"id": 889,
			"name": "TransactionState",
			"variant": "declaration",
			"kind": 8,
			"flags": {},
			"children": [
				{
					"id": 893,
					"name": "COMPENSATING",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 28,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "compensating"
					}
				},
				{
					"id": 894,
					"name": "DONE",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 29,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "done"
					}
				},
				{
					"id": 897,
					"name": "DORMANT",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 32,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "dormant"
					}
				},
				{
					"id": 896,
					"name": "FAILED",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 31,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "failed"
					}
				},
				{
					"id": 891,
					"name": "INVOKING",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 26,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "invoking"
					}
				},
				{
					"id": 890,
					"name": "NOT_STARTED",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 25,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "not_started"
					}
				},
				{
					"id": 895,
					"name": "REVERTED",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 30,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "reverted"
					}
				},
				{
					"id": 898,
					"name": "SKIPPED",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 33,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "skipped"
					}
				},
				{
					"id": 892,
					"name": "WAITING_TO_COMPENSATE",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 27,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "waiting_to_compensate"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						893,
						894,
						897,
						896,
						891,
						890,
						895,
						898,
						892
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/types.d.ts",
					"line": 24,
					"character": 20
				}
			]
		},
		{
			"id": 1419,
			"name": "TransactionStepStatus",
			"variant": "declaration",
			"kind": 8,
			"flags": {},
			"children": [
				{
					"id": 1420,
					"name": "IDLE",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 18,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "idle"
					}
				},
				{
					"id": 1421,
					"name": "OK",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 19,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "ok"
					}
				},
				{
					"id": 1424,
					"name": "PERMANENT_FAILURE",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 22,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "permanent_failure"
					}
				},
				{
					"id": 1423,
					"name": "TEMPORARY_FAILURE",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 21,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "temp_failure"
					}
				},
				{
					"id": 1422,
					"name": "WAITING",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 20,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": "waiting_response"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						1420,
						1421,
						1424,
						1423,
						1422
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/types.d.ts",
					"line": 17,
					"character": 20
				}
			]
		},
		{
			"id": 688,
			"name": "EXTERNAL",
			"variant": "declaration",
			"kind": 16,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
					"line": 11,
					"character": 4
				}
			],
			"type": {
				"type": "literal",
				"value": "external"
			}
		},
		{
			"id": 684,
			"name": "INTERNAL",
			"variant": "declaration",
			"kind": 16,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
					"line": 10,
					"character": 4
				}
			],
			"type": {
				"type": "literal",
				"value": "internal"
			}
		},
		{
			"id": 1360,
			"name": "AsyncResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The class "
					},
					{
						"kind": "code",
						"text": "`AsyncResource`"
					},
					{
						"kind": "text",
						"text": " is designed to be extended by the embedder's async\nresources. Using this, users can easily trigger the lifetime events of their\nown resources.\n\nThe "
					},
					{
						"kind": "code",
						"text": "`init`"
					},
					{
						"kind": "text",
						"text": " hook will trigger when an "
					},
					{
						"kind": "code",
						"text": "`AsyncResource`"
					},
					{
						"kind": "text",
						"text": " is instantiated.\n\nThe following is an overview of the "
					},
					{
						"kind": "code",
						"text": "`AsyncResource`"
					},
					{
						"kind": "text",
						"text": " API.\n\n"
					},
					{
						"kind": "code",
						"text": "```js\nimport { AsyncResource, executionAsyncId } from 'node:async_hooks';\n\n// AsyncResource() is meant to be extended. Instantiating a\n// new AsyncResource() also triggers init. If triggerAsyncId is omitted then\n// async_hook.executionAsyncId() is used.\nconst asyncResource = new AsyncResource(\n  type, { triggerAsyncId: executionAsyncId(), requireManualDestroy: false },\n);\n\n// Run a function in the execution context of the resource. This will\n// * establish the context of the resource\n// * trigger the AsyncHooks before callbacks\n// * call the provided function `fn` with the supplied arguments\n// * trigger the AsyncHooks after callbacks\n// * restore the original execution context\nasyncResource.runInAsyncScope(fn, thisArg, ...args);\n\n// Call AsyncHooks destroy callbacks.\nasyncResource.emitDestroy();\n\n// Return the unique ID assigned to the AsyncResource instance.\nasyncResource.asyncId();\n\n// Return the trigger ID for the AsyncResource instance.\nasyncResource.triggerAsyncId();\n```"
					}
				]
			},
			"children": [
				{
					"id": 1372,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
							"line": 271,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 1373,
							"name": "new AsyncResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "AsyncResource() is meant to be extended. Instantiating a\nnew AsyncResource() also triggers init. If triggerAsyncId is omitted then\nasync_hook.executionAsyncId() is used."
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 271,
									"character": 8
								}
							],
							"parameters": [
								{
									"id": 1374,
									"name": "type",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of async event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1375,
									"name": "triggerAsyncId",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the execution context that created\n  this async event (default: "
											},
											{
												"kind": "code",
												"text": "`executionAsyncId()`"
											},
											{
												"kind": "text",
												"text": "), or an\n  AsyncResourceOptions object (since v9.3.0)"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"target": 1400,
												"name": "AsyncResourceOptions",
												"package": "@types/node",
												"qualifiedName": "\"async_hooks\".AsyncResourceOptions"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1360,
								"name": "AsyncResource",
								"package": "@types/node",
								"qualifiedName": "\"async_hooks\".AsyncResource"
							}
						}
					]
				},
				{
					"id": 1396,
					"name": "asyncId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
							"line": 315,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 1397,
							"name": "asyncId",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The unique "
											},
											{
												"kind": "code",
												"text": "`asyncId`"
											},
											{
												"kind": "text",
												"text": " assigned to the resource."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 315,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 1376,
					"name": "bind",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
							"line": 288,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 1377,
							"name": "bind",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Binds the given function to execute to this "
									},
									{
										"kind": "code",
										"text": "`AsyncResource`"
									},
									{
										"kind": "text",
										"text": "'s scope."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.8.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 288,
									"character": 8
								}
							],
							"typeParameter": [
								{
									"id": 1378,
									"name": "Func",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1379,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
													"line": 288,
													"character": 26
												}
											],
											"signatures": [
												{
													"id": 1380,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
															"line": 288,
															"character": 26
														}
													],
													"parameters": [
														{
															"id": 1381,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"parameters": [
								{
									"id": 1382,
									"name": "fn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The function to bind to the current "
											},
											{
												"kind": "code",
												"text": "`AsyncResource`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "Func",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": -1,
								"name": "Func",
								"refersToTypeParameter": true
							}
						}
					]
				},
				{
					"id": 1394,
					"name": "emitDestroy",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
							"line": 311,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 1395,
							"name": "emitDestroy",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Call all "
									},
									{
										"kind": "code",
										"text": "`destroy`"
									},
									{
										"kind": "text",
										"text": " hooks. This should only ever be called once. An error will\nbe thrown if it is called more than once. This **must** be manually called. If\nthe resource is left to be collected by the GC then the "
									},
									{
										"kind": "code",
										"text": "`destroy`"
									},
									{
										"kind": "text",
										"text": " hooks will\nnever be called."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A reference to "
											},
											{
												"kind": "code",
												"text": "`asyncResource`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 311,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"target": 1360,
								"name": "AsyncResource",
								"package": "@types/node",
								"qualifiedName": "\"async_hooks\".AsyncResource"
							}
						}
					]
				},
				{
					"id": 1383,
					"name": "runInAsyncScope",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
							"line": 299,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 1384,
							"name": "runInAsyncScope",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Call the provided function with the provided arguments in the execution context\nof the async resource. This will establish the context, trigger the AsyncHooks\nbefore callbacks, call the function, trigger the AsyncHooks after callbacks, and\nthen restore the original execution context."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.6.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 299,
									"character": 8
								}
							],
							"typeParameter": [
								{
									"id": 1385,
									"name": "This",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								},
								{
									"id": 1386,
									"name": "Result",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1387,
									"name": "fn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The function to call in the execution context of this async resource."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1388,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
													"line": 300,
													"character": 16
												}
											],
											"signatures": [
												{
													"id": 1389,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
															"line": 300,
															"character": 16
														}
													],
													"parameters": [
														{
															"id": 1390,
															"name": "this",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": -1,
																"name": "This",
																"refersToTypeParameter": true
															}
														},
														{
															"id": 1391,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"target": -1,
														"name": "Result",
														"refersToTypeParameter": true
													}
												}
											]
										}
									}
								},
								{
									"id": 1392,
									"name": "thisArg",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The receiver to be used for the function call."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "This",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 1393,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Optional arguments to pass to the function."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": -1,
								"name": "Result",
								"refersToTypeParameter": true
							}
						}
					]
				},
				{
					"id": 1398,
					"name": "triggerAsyncId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
							"line": 319,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 1399,
							"name": "triggerAsyncId",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The same "
											},
											{
												"kind": "code",
												"text": "`triggerAsyncId`"
											},
											{
												"kind": "text",
												"text": " that is passed to the "
											},
											{
												"kind": "code",
												"text": "`AsyncResource`"
											},
											{
												"kind": "text",
												"text": " constructor."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 319,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 1361,
					"name": "bind",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
							"line": 278,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 1362,
							"name": "bind",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Binds the given function to the current execution context."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v14.8.0, v12.19.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
									"line": 278,
									"character": 15
								}
							],
							"typeParameter": [
								{
									"id": 1363,
									"name": "Func",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1364,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
													"line": 278,
													"character": 33
												}
											],
											"signatures": [
												{
													"id": 1365,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
															"line": 278,
															"character": 33
														}
													],
													"parameters": [
														{
															"id": 1366,
															"name": "this",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": -1,
																"name": "ThisArg",
																"refersToTypeParameter": true
															}
														},
														{
															"id": 1367,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								},
								{
									"id": 1368,
									"name": "ThisArg",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1369,
									"name": "fn",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The function to bind to the current execution context."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "Func",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 1370,
									"name": "type",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional name to associate with the underlying "
											},
											{
												"kind": "code",
												"text": "`AsyncResource`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1371,
									"name": "thisArg",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "ThisArg",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": -1,
								"name": "Func",
								"refersToTypeParameter": true
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1372
					]
				},
				{
					"title": "Methods",
					"children": [
						1396,
						1376,
						1394,
						1383,
						1398,
						1361
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
					"line": 261,
					"character": 10
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 1034,
					"name": "EventEmitterReferencingAsyncResource"
				}
			]
		},
		{
			"id": 611,
			"name": "DistributedTransaction",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "DistributedTransaction represents a distributed transaction, which is a transaction that is composed of multiple steps that are executed in a specific order."
					}
				]
			},
			"children": [
				{
					"id": 617,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 69,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 618,
							"name": "new DistributedTransaction",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 69,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 619,
									"name": "flow",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 877,
										"name": "TransactionFlow",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 620,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 689,
										"name": "TransactionStepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 621,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 622,
									"name": "errors",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 662,
											"name": "TransactionStepError",
											"package": "@medusajs/orchestration"
										}
									}
								},
								{
									"id": 623,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 350,
										"name": "TransactionContext",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 611,
								"name": "DistributedTransaction",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 630,
					"name": "context",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 68,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 629,
					"name": "errors",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 67,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 624,
					"name": "flow",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 62,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 625,
					"name": "handler",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 63,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 689,
						"name": "TransactionStepHandler",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 627,
					"name": "modelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 65,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 626,
					"name": "payload",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 64,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 628,
					"name": "transactionId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 66,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 613,
					"name": "keyPrefix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 81,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 612,
					"name": "keyValueStore",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 80,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 652,
					"name": "isPartiallyCompleted",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 77,
							"character": 8
						}
					],
					"getSignature": {
						"id": 653,
						"name": "isPartiallyCompleted",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"sources": [
							{
								"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
								"line": 77,
								"character": 8
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						}
					}
				},
				{
					"id": 638,
					"name": "addError",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 73,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 639,
							"name": "addError",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 73,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 640,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 641,
									"name": "handlerType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 543,
										"name": "TransactionHandlerType",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 642,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 643,
					"name": "addResponse",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 74,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 644,
							"name": "addResponse",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 74,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 645,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 646,
									"name": "handlerType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 543,
										"name": "TransactionHandlerType",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 647,
									"name": "response",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 654,
					"name": "canInvoke",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 78,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 655,
							"name": "canInvoke",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 78,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 656,
					"name": "canRevert",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 79,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 657,
							"name": "canRevert",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 79,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 660,
					"name": "deleteCheckpoint",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 84,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 661,
							"name": "deleteCheckpoint",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 84,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 633,
					"name": "getContext",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 71,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 634,
							"name": "getContext",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 71,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 350,
								"name": "TransactionContext",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 635,
					"name": "getErrors",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 72,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 636,
							"name": "getErrors",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 72,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 637,
									"name": "handlerType",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 543,
										"name": "TransactionHandlerType",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 662,
									"name": "TransactionStepError",
									"package": "@medusajs/orchestration"
								}
							}
						}
					]
				},
				{
					"id": 631,
					"name": "getFlow",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 70,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 632,
							"name": "getFlow",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 70,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 877,
								"name": "TransactionFlow",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 650,
					"name": "getState",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 76,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 651,
							"name": "getState",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 76,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 889,
								"name": "TransactionState",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 648,
					"name": "hasFinished",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 75,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 649,
							"name": "hasFinished",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 75,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 658,
					"name": "saveCheckpoint",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 82,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 659,
							"name": "saveCheckpoint",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 82,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 868,
										"name": "TransactionCheckpoint",
										"package": "@medusajs/orchestration"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 614,
					"name": "loadTransaction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 83,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 615,
							"name": "loadTransaction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 83,
									"character": 11
								}
							],
							"parameters": [
								{
									"id": 616,
									"name": "transactionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": 868,
												"name": "TransactionCheckpoint",
												"package": "@medusajs/orchestration"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						617
					]
				},
				{
					"title": "Properties",
					"children": [
						630,
						629,
						624,
						625,
						627,
						626,
						628,
						613,
						612
					]
				},
				{
					"title": "Accessors",
					"children": [
						652
					]
				},
				{
					"title": "Methods",
					"children": [
						638,
						643,
						654,
						656,
						660,
						633,
						635,
						631,
						650,
						648,
						658,
						614
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
					"line": 61,
					"character": 21
				}
			]
		},
		{
			"id": 908,
			"name": "EventEmitter",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The "
					},
					{
						"kind": "code",
						"text": "`EventEmitter`"
					},
					{
						"kind": "text",
						"text": " class is defined and exposed by the "
					},
					{
						"kind": "code",
						"text": "`node:events`"
					},
					{
						"kind": "text",
						"text": " module:\n\n"
					},
					{
						"kind": "code",
						"text": "```js\nimport { EventEmitter } from 'node:events';\n```"
					},
					{
						"kind": "text",
						"text": "\n\nAll "
					},
					{
						"kind": "code",
						"text": "`EventEmitter`"
					},
					{
						"kind": "text",
						"text": "s emit the event "
					},
					{
						"kind": "code",
						"text": "`'newListener'`"
					},
					{
						"kind": "text",
						"text": " when new listeners are\nadded and "
					},
					{
						"kind": "code",
						"text": "`'removeListener'`"
					},
					{
						"kind": "text",
						"text": " when existing listeners are removed.\n\nIt supports the following option:"
					}
				],
				"blockTags": [
					{
						"tag": "@since",
						"content": [
							{
								"kind": "text",
								"text": "v0.1.26"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 949,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 110,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 950,
							"name": "new EventEmitter",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 110,
									"character": 8
								}
							],
							"parameters": [
								{
									"id": 951,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1358,
										"name": "EventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 908,
								"name": "EventEmitter",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "NodeJS.EventEmitter.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "NodeJS.EventEmitter.constructor"
					}
				},
				{
					"id": 946,
					"name": "captureRejectionSymbol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: "
							},
							{
								"kind": "code",
								"text": "`Symbol.for('nodejs.rejection')`"
							},
							{
								"kind": "text",
								"text": "\n\nSee how to write a custom "
							},
							{
								"kind": "code",
								"text": "`rejection handler`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 402,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 746,
							"name": "captureRejectionSymbol",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.captureRejectionSymbol"
						}
					}
				},
				{
					"id": 947,
					"name": "captureRejections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
							},
							{
								"kind": "code",
								"text": "`captureRejections`"
							},
							{
								"kind": "text",
								"text": " option on all new "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " objects."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 409,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 948,
					"name": "defaultMaxListeners",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "By default, a maximum of "
							},
							{
								"kind": "code",
								"text": "`10`"
							},
							{
								"kind": "text",
								"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances\nusing the "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " method. To change the default\nfor _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": "property can be used. If this value is not a positive number, a "
							},
							{
								"kind": "code",
								"text": "`RangeError`"
							},
							{
								"kind": "text",
								"text": "is thrown.\n\nTake caution when setting the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " because the\nchange affects _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, including those created before\nthe change is made. However, calling "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " still has\nprecedence over "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": ".\n\nThis is not a hard limit. The "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`emitter.getMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners()`"
							},
							{
								"kind": "text",
								"text": "methods can be used to\ntemporarily avoid this warning:\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`--trace-warnings`"
							},
							{
								"kind": "text",
								"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
							},
							{
								"kind": "code",
								"text": "`process.on('warning')`"
							},
							{
								"kind": "text",
								"text": " and will\nhave the additional "
							},
							{
								"kind": "code",
								"text": "`emitter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`type`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`count`"
							},
							{
								"kind": "text",
								"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": " property is set to "
							},
							{
								"kind": "code",
								"text": "`'MaxListenersExceededWarning'`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.2"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 446,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 945,
					"name": "errorMonitor",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "events. Listeners installed using this symbol are called before the regular"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted. Therefore, the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.6.0, v12.17.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 395,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 745,
							"name": "errorMonitor",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.errorMonitor"
						}
					}
				},
				{
					"id": 952,
					"name": "[captureRejectionSymbol]",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 112,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 953,
							"name": "[captureRejectionSymbol]",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 112,
									"character": 8
								}
							],
							"parameters": [
								{
									"id": 954,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1308,
										"name": "Error",
										"package": "typescript"
									}
								},
								{
									"id": 955,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 956,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1288,
								"name": "EventEmitter.[captureRejectionSymbol]"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1287,
						"name": "EventEmitter.[captureRejectionSymbol]"
					}
				},
				{
					"id": 957,
					"name": "addListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 545,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 958,
							"name": "addListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 545,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 959,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 960,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 961,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 545,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 962,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 545,
															"character": 66
														}
													],
													"parameters": [
														{
															"id": 963,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 908,
								"name": "EventEmitter",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1215,
								"name": "EventEmitter.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1214,
						"name": "EventEmitter.addListener"
					}
				},
				{
					"id": 1006,
					"name": "emit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 807,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1007,
							"name": "emit",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 807,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1008,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1009,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1264,
								"name": "EventEmitter.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1263,
						"name": "EventEmitter.emit"
					}
				},
				{
					"id": 1028,
					"name": "eventNames",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 870,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1029,
							"name": "eventNames",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 870,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1286,
								"name": "EventEmitter.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1285,
						"name": "EventEmitter.eventNames"
					}
				},
				{
					"id": 998,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 722,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 999,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 948
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 722,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1256,
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1255,
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 1010,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 816,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1011,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 816,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1012,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1013,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1268,
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1267,
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 1000,
					"name": "listeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 735,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1001,
							"name": "listeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 735,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1002,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1258,
								"name": "EventEmitter.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1257,
						"name": "EventEmitter.listeners"
					}
				},
				{
					"id": 985,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 695,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 986,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 695,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 987,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 988,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 989,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 695,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 990,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 695,
															"character": 58
														}
													],
													"parameters": [
														{
															"id": 991,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 908,
								"name": "EventEmitter",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1243,
								"name": "EventEmitter.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1242,
						"name": "EventEmitter.off"
					}
				},
				{
					"id": 964,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 577,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 965,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 577,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 966,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 967,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 968,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 577,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 969,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 577,
															"character": 57
														}
													],
													"parameters": [
														{
															"id": 970,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 908,
								"name": "EventEmitter",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1222,
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1221,
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 971,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 607,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 972,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 607,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 973,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 974,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 975,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 607,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 976,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 607,
															"character": 59
														}
													],
													"parameters": [
														{
															"id": 977,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 908,
								"name": "EventEmitter",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1229,
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1228,
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 1014,
					"name": "prependListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 834,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1015,
							"name": "prependListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 834,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1016,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1017,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1018,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 834,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 1019,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 834,
															"character": 70
														}
													],
													"parameters": [
														{
															"id": 1020,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 908,
								"name": "EventEmitter",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1272,
								"name": "EventEmitter.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1271,
						"name": "EventEmitter.prependListener"
					}
				},
				{
					"id": 1021,
					"name": "prependOnceListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 850,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1022,
							"name": "prependOnceListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 850,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1023,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1024,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1025,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 850,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 1026,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 850,
															"character": 74
														}
													],
													"parameters": [
														{
															"id": 1027,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 908,
								"name": "EventEmitter",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1279,
								"name": "EventEmitter.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1278,
						"name": "EventEmitter.prependOnceListener"
					}
				},
				{
					"id": 1003,
					"name": "rawListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 766,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1004,
							"name": "rawListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 766,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1005,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1261,
								"name": "EventEmitter.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1260,
						"name": "EventEmitter.rawListeners"
					}
				},
				{
					"id": 992,
					"name": "removeAllListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 706,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 993,
							"name": "removeAllListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 706,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 994,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 908,
								"name": "EventEmitter",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1250,
								"name": "EventEmitter.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1249,
						"name": "EventEmitter.removeAllListeners"
					}
				},
				{
					"id": 978,
					"name": "removeListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 690,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 979,
							"name": "removeListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 690,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 980,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 981,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 982,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 690,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 983,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 690,
															"character": 69
														}
													],
													"parameters": [
														{
															"id": 984,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 908,
								"name": "EventEmitter",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1236,
								"name": "EventEmitter.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1235,
						"name": "EventEmitter.removeListener"
					}
				},
				{
					"id": 995,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 716,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 996,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 716,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 997,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 908,
								"name": "EventEmitter",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1253,
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1252,
						"name": "EventEmitter.setMaxListeners"
					}
				},
				{
					"id": 938,
					"name": "addAbortListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 387,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 939,
							"name": "addAbortListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Listens once to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on the provided "
									},
									{
										"kind": "code",
										"text": "`signal`"
									},
									{
										"kind": "text",
										"text": ".\n\nListening to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
									},
									{
										"kind": "code",
										"text": "`e.stopImmediatePropagation()`"
									},
									{
										"kind": "text",
										"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
									},
									{
										"kind": "code",
										"text": "`stopImmediatePropagation`"
									},
									{
										"kind": "text",
										"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v20.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Disposable that removes the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " listener."
											}
										]
									}
								],
								"modifierTags": [
									"@experimental"
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 387,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 940,
									"name": "signal",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "AbortSignal"
										},
										"name": "AbortSignal",
										"package": "typescript"
									}
								},
								{
									"id": 941,
									"name": "resource",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 942,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 387,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 943,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 387,
															"character": 63
														}
													],
													"parameters": [
														{
															"id": 944,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
																	"qualifiedName": "Event"
																},
																"name": "Event",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1305,
								"name": "Disposable",
								"package": "@types/node"
							}
						}
					]
				},
				{
					"id": 927,
					"name": "getEventListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 308,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 928,
							"name": "getEventListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 308,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 929,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 1202,
												"name": "_DOMEventTarget",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"target": 1213,
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										]
									}
								},
								{
									"id": 930,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							}
						}
					]
				},
				{
					"id": 931,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 337,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 932,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the currently set max amount of listeners.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.getMaxListeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v19.9.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 337,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 933,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 1202,
												"name": "_DOMEventTarget",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"target": 1213,
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "NodeJS.EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "NodeJS.EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 923,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 280,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 924,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 280,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 925,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1213,
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 926,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "NodeJS.EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "NodeJS.EventEmitter.listenerCount"
					}
				},
				{
					"id": 918,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 258,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 919,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 258,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 920,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1213,
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 921,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 922,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1200,
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1292,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "NodeJS.EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "NodeJS.EventEmitter.on"
					}
				},
				{
					"id": 909,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 193,
							"character": 15
						},
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 198,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 910,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 193,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 911,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1192,
										"name": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 912,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 913,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1200,
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "NodeJS.EventEmitter.once"
							}
						},
						{
							"id": 914,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 198,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 915,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1202,
										"name": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 916,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 917,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1200,
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "NodeJS.EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "NodeJS.EventEmitter.once"
					}
				},
				{
					"id": 934,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 352,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 935,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 352,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 936,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 937,
									"name": "eventTargets",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"target": 1202,
													"name": "_DOMEventTarget",
													"package": "@types/node"
												},
												{
													"type": "reference",
													"target": 1213,
													"name": "EventEmitter",
													"package": "@types/node",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "NodeJS.EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "NodeJS.EventEmitter.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						949
					]
				},
				{
					"title": "Properties",
					"children": [
						946,
						947,
						948,
						945
					]
				},
				{
					"title": "Methods",
					"children": [
						952,
						957,
						1006,
						1028,
						998,
						1010,
						1000,
						985,
						964,
						971,
						1014,
						1021,
						1003,
						992,
						978,
						995,
						938,
						927,
						931,
						923,
						918,
						909,
						934
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 95,
					"character": 14
				},
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 109,
					"character": 10
				},
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 449,
					"character": 14
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 1213,
					"name": "EventEmitter",
					"package": "@types/node",
					"qualifiedName": "__global.NodeJS.EventEmitter"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 696,
					"name": "TransactionOrchestrator"
				},
				{
					"type": "reference",
					"target": 1065,
					"name": "EventEmitterAsyncResource"
				}
			]
		},
		{
			"id": 401,
			"name": "LocalWorkflow",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 402,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 15,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 403,
							"name": "new LocalWorkflow",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 15,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 404,
									"name": "workflowId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 405,
									"name": "modulesLoaded",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 323,
												"name": "MedusaContainer",
												"package": "@medusajs/types"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reflection",
													"declaration": {
														"id": 406,
														"name": "__type",
														"variant": "declaration",
														"kind": 65536,
														"flags": {},
														"children": [
															{
																"id": 408,
																"name": "__definition",
																"variant": "declaration",
																"kind": 1024,
																"flags": {},
																"sources": [
																	{
																		"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																		"line": 92,
																		"character": 4
																	}
																],
																"type": {
																	"type": "reference",
																	"target": 386,
																	"name": "ModuleDefinition",
																	"package": "@medusajs/types"
																}
															},
															{
																"id": 407,
																"name": "__joinerConfig",
																"variant": "declaration",
																"kind": 1024,
																"flags": {},
																"sources": [
																	{
																		"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																		"line": 91,
																		"character": 4
																	}
																],
																"type": {
																	"type": "reference",
																	"target": 359,
																	"name": "ModuleJoinerConfig",
																	"package": "@medusajs/types"
																}
															}
														],
														"groups": [
															{
																"title": "Properties",
																"children": [
																	408,
																	407
																]
															}
														],
														"sources": [
															{
																"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																"line": 90,
																"character": 37
															}
														]
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 401,
								"name": "LocalWorkflow",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 409,
					"name": "container",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 10,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"target": 323,
						"name": "MedusaContainer",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 411,
					"name": "flow",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 12,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"target": 230,
						"name": "OrchestratorBuilder",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 413,
					"name": "handlers",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 14,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Map"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": 607,
								"name": "StepHandler",
								"package": "@medusajs/orchestration"
							}
						],
						"name": "Map",
						"package": "typescript"
					}
				},
				{
					"id": 412,
					"name": "workflow",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 13,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"target": 592,
						"name": "WorkflowDefinition",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 410,
					"name": "workflowId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 11,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 433,
					"name": "addAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 21,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 434,
							"name": "addAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 21,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 435,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 436,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 607,
										"name": "StepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 437,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 523,
										"typeArguments": [
											{
												"type": "reference",
												"target": 498,
												"name": "TransactionStepsDefinition",
												"package": "@medusajs/orchestration"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 456,
					"name": "appendAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 25,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 457,
							"name": "appendAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 25,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 458,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 459,
									"name": "to",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 460,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 607,
										"name": "StepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 461,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 523,
										"typeArguments": [
											{
												"type": "reference",
												"target": 498,
												"name": "TransactionStepsDefinition",
												"package": "@medusajs/orchestration"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 481,
					"name": "assertHandler",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 31,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 482,
							"name": "assertHandler",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 31,
									"character": 14
								}
							],
							"parameters": [
								{
									"id": 483,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 607,
										"name": "StepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 484,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 414,
					"name": "commit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 16,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 415,
							"name": "commit",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 16,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 474,
					"name": "deleteAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 29,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 475,
							"name": "deleteAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 29,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 476,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 477,
									"name": "parentSteps",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 416,
					"name": "getFlow",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 17,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 417,
							"name": "getFlow",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 17,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 498,
								"name": "TransactionStepsDefinition",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 450,
					"name": "insertActionAfter",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 24,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 451,
							"name": "insertActionAfter",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 24,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 452,
									"name": "existingAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 453,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 454,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 607,
										"name": "StepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 455,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 523,
										"typeArguments": [
											{
												"type": "reference",
												"target": 498,
												"name": "TransactionStepsDefinition",
												"package": "@medusajs/orchestration"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 444,
					"name": "insertActionBefore",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 23,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 445,
							"name": "insertActionBefore",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 23,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 446,
									"name": "existingAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 447,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 448,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 607,
										"name": "StepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 449,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 523,
										"typeArguments": [
											{
												"type": "reference",
												"target": 498,
												"name": "TransactionStepsDefinition",
												"package": "@medusajs/orchestration"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 470,
					"name": "mergeActions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 28,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 471,
							"name": "mergeActions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 28,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 472,
									"name": "where",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 473,
									"name": "actions",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 462,
					"name": "moveAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 26,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 463,
							"name": "moveAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 26,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 464,
									"name": "actionToMove",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 465,
									"name": "targetAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 466,
					"name": "moveAndMergeNextAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 27,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 467,
							"name": "moveAndMergeNextAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 27,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 468,
									"name": "actionToMove",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 469,
									"name": "targetAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 478,
					"name": "pruneAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 30,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 479,
							"name": "pruneAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 30,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 480,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 428,
					"name": "registerStepFailure",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 20,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 429,
							"name": "registerStepFailure",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 20,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 430,
									"name": "idempotencyKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 431,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 432,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 343,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 423,
					"name": "registerStepSuccess",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 19,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 424,
							"name": "registerStepSuccess",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 19,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 425,
									"name": "idempotencyKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 426,
									"name": "response",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 427,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 343,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 438,
					"name": "replaceAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 22,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 439,
							"name": "replaceAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 22,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 440,
									"name": "existingAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 441,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 442,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 607,
										"name": "StepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 443,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 523,
										"typeArguments": [
											{
												"type": "reference",
												"target": 498,
												"name": "TransactionStepsDefinition",
												"package": "@medusajs/orchestration"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 418,
					"name": "run",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 18,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 419,
							"name": "run",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 18,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 420,
									"name": "uniqueTransactionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 421,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 422,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 343,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						402
					]
				},
				{
					"title": "Properties",
					"children": [
						409,
						411,
						413,
						412,
						410
					]
				},
				{
					"title": "Methods",
					"children": [
						433,
						456,
						481,
						414,
						474,
						416,
						450,
						444,
						470,
						462,
						466,
						478,
						428,
						423,
						438,
						418
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
					"line": 9,
					"character": 21
				}
			]
		},
		{
			"id": 230,
			"name": "OrchestratorBuilder",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 231,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 11,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 232,
							"name": "new OrchestratorBuilder",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 11,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 233,
									"name": "steps",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 498,
										"name": "TransactionStepsDefinition",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 235,
					"name": "hasChanges_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 9,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 234,
					"name": "steps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 8,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"target": 510,
						"name": "InternalStep",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 236,
					"name": "hasChanges",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 10,
							"character": 8
						}
					],
					"getSignature": {
						"id": 237,
						"name": "hasChanges",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"sources": [
							{
								"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
								"line": 10,
								"character": 8
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						}
					}
				},
				{
					"id": 241,
					"name": "addAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 13,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 242,
							"name": "addAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 13,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 243,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 244,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 523,
										"typeArguments": [
											{
												"type": "reference",
												"target": 498,
												"name": "TransactionStepsDefinition",
												"package": "@medusajs/orchestration"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 264,
					"name": "appendAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 18,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 265,
							"name": "appendAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 18,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 266,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 267,
									"name": "to",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 268,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 523,
										"typeArguments": [
											{
												"type": "reference",
												"target": 498,
												"name": "TransactionStepsDefinition",
												"package": "@medusajs/orchestration"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 260,
					"name": "appendTo",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 17,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 261,
							"name": "appendTo",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 17,
									"character": 14
								}
							],
							"parameters": [
								{
									"id": 262,
									"name": "step",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 510,
												"name": "InternalStep",
												"package": "@medusajs/orchestration"
											}
										]
									}
								},
								{
									"id": 263,
									"name": "newStep",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 510,
										"name": "InternalStep",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 317,
					"name": "build",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 33,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 318,
							"name": "build",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 33,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 498,
								"name": "TransactionStepsDefinition",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 289,
					"name": "deleteAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 26,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 290,
							"name": "deleteAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 26,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 291,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 292,
									"name": "steps",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 510,
										"name": "InternalStep",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 308,
					"name": "findLastStep",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 31,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 309,
							"name": "findLastStep",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 31,
									"character": 14
								}
							],
							"parameters": [
								{
									"id": 310,
									"name": "steps",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 510,
										"name": "InternalStep",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 510,
								"name": "InternalStep",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 300,
					"name": "findOrThrowStepByAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 29,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 301,
							"name": "findOrThrowStepByAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 29,
									"character": 14
								}
							],
							"parameters": [
								{
									"id": 302,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 303,
									"name": "steps",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 510,
										"name": "InternalStep",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 510,
								"name": "InternalStep",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 304,
					"name": "findParentStepByAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 30,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 305,
							"name": "findParentStepByAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 30,
									"character": 14
								}
							],
							"parameters": [
								{
									"id": 306,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 307,
									"name": "step",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 510,
										"name": "InternalStep",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": 510,
										"name": "InternalStep",
										"package": "@medusajs/orchestration"
									}
								]
							}
						}
					]
				},
				{
					"id": 296,
					"name": "findStepByAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 28,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 297,
							"name": "findStepByAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 28,
									"character": 14
								}
							],
							"parameters": [
								{
									"id": 298,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 299,
									"name": "step",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 510,
										"name": "InternalStep",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": 510,
										"name": "InternalStep",
										"package": "@medusajs/orchestration"
									}
								]
							}
						}
					]
				},
				{
					"id": 255,
					"name": "insertActionAfter",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 16,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 256,
							"name": "insertActionAfter",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 16,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 257,
									"name": "existingAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 258,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 259,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 523,
										"typeArguments": [
											{
												"type": "reference",
												"target": 498,
												"name": "TransactionStepsDefinition",
												"package": "@medusajs/orchestration"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 250,
					"name": "insertActionBefore",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 15,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 251,
							"name": "insertActionBefore",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 15,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 252,
									"name": "existingAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 253,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 254,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 523,
										"typeArguments": [
											{
												"type": "reference",
												"target": 498,
												"name": "TransactionStepsDefinition",
												"package": "@medusajs/orchestration"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 238,
					"name": "load",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 12,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 239,
							"name": "load",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 12,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 240,
									"name": "steps",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 498,
										"name": "TransactionStepsDefinition",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 285,
					"name": "mergeActions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 25,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 286,
							"name": "mergeActions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 25,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 287,
									"name": "where",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 288,
									"name": "actions",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 269,
					"name": "move",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 19,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 270,
							"name": "move",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 19,
									"character": 14
								}
							],
							"parameters": [
								{
									"id": 271,
									"name": "actionToMove",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 272,
									"name": "targetAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 273,
									"name": "__namedParameters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 274,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 276,
													"name": "mergeNext",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
															"line": 21,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 275,
													"name": "runInParallel",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
															"line": 20,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														276,
														275
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
													"line": 19,
													"character": 95
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 277,
					"name": "moveAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 23,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 278,
							"name": "moveAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 23,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 279,
									"name": "actionToMove",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 280,
									"name": "targetAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 281,
					"name": "moveAndMergeNextAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 24,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 282,
							"name": "moveAndMergeNextAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 24,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 283,
									"name": "actionToMove",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 284,
									"name": "targetAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 293,
					"name": "pruneAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 27,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 294,
							"name": "pruneAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 27,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 295,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 245,
					"name": "replaceAction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 14,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 246,
							"name": "replaceAction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 14,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 247,
									"name": "existingAction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 248,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 249,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 523,
										"typeArguments": [
											{
												"type": "reference",
												"target": 498,
												"name": "TransactionStepsDefinition",
												"package": "@medusajs/orchestration"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 311,
					"name": "updateDepths",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 32,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 312,
							"name": "updateDepths",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
									"line": 32,
									"character": 14
								}
							],
							"parameters": [
								{
									"id": 313,
									"name": "startingStep",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 510,
										"name": "InternalStep",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 314,
									"name": "parent",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 315,
									"name": "incr",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 316,
									"name": "beginFrom",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						231
					]
				},
				{
					"title": "Properties",
					"children": [
						235,
						234
					]
				},
				{
					"title": "Accessors",
					"children": [
						236
					]
				},
				{
					"title": "Methods",
					"children": [
						241,
						264,
						260,
						317,
						289,
						308,
						300,
						304,
						296,
						255,
						250,
						238,
						285,
						269,
						277,
						281,
						293,
						245,
						311
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
					"line": 7,
					"character": 21
				}
			]
		},
		{
			"id": 40,
			"name": "StepResponse",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to create the response returned by a step. A step return its data by returning an instance of "
					},
					{
						"kind": "code",
						"text": "`StepResponse`"
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 41,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
							"line": 24,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/step-response.ts#L24"
						}
					],
					"signatures": [
						{
							"id": 42,
							"name": "new StepResponse",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The constructor of the StepResponse"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
									"line": 24,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/step-response.ts#L24"
								}
							],
							"typeParameter": [
								{
									"id": 43,
									"name": "TOutput",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the output of the step."
											}
										]
									}
								},
								{
									"id": 44,
									"name": "TCompensateInput",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the compensation input. If the step doesn't specify any compensation input, then the type of "
											},
											{
												"kind": "code",
												"text": "`TCompensateInput`"
											},
											{
												"kind": "text",
												"text": " is the same\nas that of "
											},
											{
												"kind": "code",
												"text": "`TOutput`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"default": {
										"type": "reference",
										"target": -1,
										"name": "TOutput",
										"refersToTypeParameter": true
									}
								}
							],
							"parameters": [
								{
									"id": 45,
									"name": "output",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The output of the step."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "TOutput",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 46,
									"name": "compensateInput",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to be passed as a parameter to the step's compensation function. If not provided, the "
											},
											{
												"kind": "code",
												"text": "`output`"
											},
											{
												"kind": "text",
												"text": " will be provided instead."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "TCompensateInput",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 40,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TOutput",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": -1,
										"name": "TCompensateInput",
										"refersToTypeParameter": true
									}
								],
								"name": "StepResponse",
								"package": "@medusajs/workflows-sdk"
							}
						}
					]
				},
				{
					"id": 47,
					"name": "#__type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
							"line": 12,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/step-response.ts#L12"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "symbol"
					},
					"defaultValue": "SymbolWorkflowStepResponse"
				},
				{
					"id": 49,
					"name": "#compensateInput",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isOptional": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
							"line": 14,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/step-response.ts#L14"
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TCompensateInput",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 48,
					"name": "#output",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
							"line": 13,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/step-response.ts#L13"
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TOutput",
						"refersToTypeParameter": true
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						41
					]
				},
				{
					"title": "Properties",
					"children": [
						47,
						49,
						48
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
					"line": 11,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/step-response.ts#L11"
				}
			],
			"typeParameters": [
				{
					"id": 62,
					"name": "TOutput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the output of the step."
							}
						]
					}
				},
				{
					"id": 63,
					"name": "TCompensateInput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the compensation input. If the step doesn't specify any compensation input, then the type of "
							},
							{
								"kind": "code",
								"text": "`TCompensateInput`"
							},
							{
								"kind": "text",
								"text": " is the same\nas that of "
							},
							{
								"kind": "code",
								"text": "`TOutput`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"default": {
						"type": "reference",
						"target": -1,
						"name": "TOutput",
						"refersToTypeParameter": true
					}
				}
			]
		},
		{
			"id": 868,
			"name": "TransactionCheckpoint",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 869,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 870,
							"name": "new TransactionCheckpoint",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 45,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 871,
									"name": "flow",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 877,
										"name": "TransactionFlow",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 872,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 350,
										"name": "TransactionContext",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 873,
									"name": "errors",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 662,
											"name": "TransactionStepError",
											"package": "@medusajs/orchestration"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 868,
								"name": "TransactionCheckpoint",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 875,
					"name": "context",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 43,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 350,
						"name": "TransactionContext",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 876,
					"name": "errors",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 44,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 662,
							"name": "TransactionStepError",
							"package": "@medusajs/orchestration"
						}
					}
				},
				{
					"id": 874,
					"name": "flow",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 42,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 877,
						"name": "TransactionFlow",
						"package": "@medusajs/orchestration"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						869
					]
				},
				{
					"title": "Properties",
					"children": [
						875,
						876,
						874
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
					"line": 41,
					"character": 21
				}
			]
		},
		{
			"id": 350,
			"name": "TransactionContext",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 351,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 33,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 352,
							"name": "new TransactionContext",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 33,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 353,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 354,
									"name": "invoke",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 191,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 355,
									"name": "compensate",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 191,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 350,
								"name": "TransactionContext",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 358,
					"name": "compensate",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Object containing responses of Compensate handlers on steps flagged with saveResponse."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 32,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 191,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 357,
					"name": "invoke",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Object containing responses of Invoke handlers on steps flagged with saveResponse."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 31,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 191,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 356,
					"name": "payload",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Object containing the initial payload."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 30,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						351
					]
				},
				{
					"title": "Properties",
					"children": [
						358,
						357,
						356
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
					"line": 29,
					"character": 21
				}
			]
		},
		{
			"id": 696,
			"name": "TransactionOrchestrator",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 749,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 28,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 750,
							"name": "new TransactionOrchestrator",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 28,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 751,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 752,
									"name": "definition",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 498,
										"name": "TransactionStepsDefinition",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 696,
								"name": "TransactionOrchestrator",
								"package": "@medusajs/orchestration"
							},
							"overwrites": {
								"type": "reference",
								"target": 950,
								"name": "EventEmitter.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 949,
						"name": "EventEmitter.constructor"
					}
				},
				{
					"id": 762,
					"name": "canContinue",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 36,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 761,
					"name": "canMoveBackward",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 35,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 760,
					"name": "canMoveForward",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 34,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 763,
					"name": "checkAllSteps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 37,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 756,
					"name": "compensateSteps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 26,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 772,
					"name": "createTransactionFlow",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 52,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 754,
					"name": "definition",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 23,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 765,
					"name": "executeNext",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 41,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 764,
					"name": "flagStepsToRevert",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 38,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 759,
					"name": "getCompensationSteps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 33,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 758,
					"name": "getInvokeSteps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 32,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 757,
					"name": "getPreviousStep",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 31,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 753,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 22,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 755,
					"name": "invokeSteps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 25,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 698,
					"name": "DEFAULT_RETRIES",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 27,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 697,
					"name": "ROOT_STEP",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 24,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 699,
					"name": "SEPARATOR",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 29,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 706,
					"name": "buildSteps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 54,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 746,
					"name": "captureRejectionSymbol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: "
							},
							{
								"kind": "code",
								"text": "`Symbol.for('nodejs.rejection')`"
							},
							{
								"kind": "text",
								"text": "\n\nSee how to write a custom "
							},
							{
								"kind": "code",
								"text": "`rejection handler`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 402,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 746,
							"name": "captureRejectionSymbol",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.captureRejectionSymbol"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 946,
						"name": "EventEmitter.captureRejectionSymbol"
					}
				},
				{
					"id": 747,
					"name": "captureRejections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
							},
							{
								"kind": "code",
								"text": "`captureRejections`"
							},
							{
								"kind": "text",
								"text": " option on all new "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " objects."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 409,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 947,
						"name": "EventEmitter.captureRejections"
					}
				},
				{
					"id": 748,
					"name": "defaultMaxListeners",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "By default, a maximum of "
							},
							{
								"kind": "code",
								"text": "`10`"
							},
							{
								"kind": "text",
								"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances\nusing the "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " method. To change the default\nfor _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": "property can be used. If this value is not a positive number, a "
							},
							{
								"kind": "code",
								"text": "`RangeError`"
							},
							{
								"kind": "text",
								"text": "is thrown.\n\nTake caution when setting the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " because the\nchange affects _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, including those created before\nthe change is made. However, calling "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " still has\nprecedence over "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": ".\n\nThis is not a hard limit. The "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`emitter.getMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners()`"
							},
							{
								"kind": "text",
								"text": "methods can be used to\ntemporarily avoid this warning:\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`--trace-warnings`"
							},
							{
								"kind": "text",
								"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
							},
							{
								"kind": "code",
								"text": "`process.on('warning')`"
							},
							{
								"kind": "text",
								"text": " and will\nhave the additional "
							},
							{
								"kind": "code",
								"text": "`emitter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`type`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`count`"
							},
							{
								"kind": "text",
								"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": " property is set to "
							},
							{
								"kind": "code",
								"text": "`'MaxListenersExceededWarning'`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.2"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 446,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 948,
						"name": "EventEmitter.defaultMaxListeners"
					}
				},
				{
					"id": 745,
					"name": "errorMonitor",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "events. Listeners installed using this symbol are called before the regular"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted. Therefore, the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.6.0, v12.17.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 395,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 745,
							"name": "errorMonitor",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.errorMonitor"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 945,
						"name": "EventEmitter.errorMonitor"
					}
				},
				{
					"id": 707,
					"name": "getStepByAction",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 61,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 708,
					"name": "getTransactionAndStepFromIdempotencyKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 62,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 705,
					"name": "loadTransactionById",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 53,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 704,
					"name": "setStepFailure",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 40,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 703,
					"name": "setStepSuccess",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 39,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 790,
					"name": "[captureRejectionSymbol]",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 112,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 791,
							"name": "[captureRejectionSymbol]",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 112,
									"character": 8
								}
							],
							"parameters": [
								{
									"id": 792,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1308,
										"name": "Error",
										"package": "typescript"
									}
								},
								{
									"id": 793,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 794,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 953,
								"name": "EventEmitter.[captureRejectionSymbol]"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 952,
						"name": "EventEmitter.[captureRejectionSymbol]"
					}
				},
				{
					"id": 795,
					"name": "addListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 545,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 796,
							"name": "addListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 545,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 797,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 798,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 799,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 545,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 800,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 545,
															"character": 66
														}
													],
													"parameters": [
														{
															"id": 801,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 696,
								"name": "TransactionOrchestrator",
								"package": "@medusajs/orchestration"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 958,
								"name": "EventEmitter.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 957,
						"name": "EventEmitter.addListener"
					}
				},
				{
					"id": 773,
					"name": "beginTransaction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 60,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 774,
							"name": "beginTransaction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a new transaction"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 60,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 775,
									"name": "transactionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "unique identifier of the transaction"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 776,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "function to handle action of the transaction"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 689,
										"name": "TransactionStepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 777,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "payload to be passed to all the transaction steps"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 769,
					"name": "cancelTransaction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 51,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 770,
							"name": "cancelTransaction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel and revert a transaction compensating all its executed steps. It can be an ongoing transaction or a completed one"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 51,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 771,
									"name": "transaction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The transaction to be reverted"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 844,
					"name": "emit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 807,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 845,
							"name": "emit",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 807,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 846,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 847,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1007,
								"name": "EventEmitter.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1006,
						"name": "EventEmitter.emit"
					}
				},
				{
					"id": 866,
					"name": "eventNames",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 870,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 867,
							"name": "eventNames",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 870,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1029,
								"name": "EventEmitter.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1028,
						"name": "EventEmitter.eventNames"
					}
				},
				{
					"id": 836,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 722,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 837,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 748
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 722,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 999,
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 998,
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 848,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 816,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 849,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 816,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 850,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 851,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1011,
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1010,
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 838,
					"name": "listeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 735,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 839,
							"name": "listeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 735,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 840,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1001,
								"name": "EventEmitter.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1000,
						"name": "EventEmitter.listeners"
					}
				},
				{
					"id": 823,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 695,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 824,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 695,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 825,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 826,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 827,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 695,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 828,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 695,
															"character": 58
														}
													],
													"parameters": [
														{
															"id": 829,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 696,
								"name": "TransactionOrchestrator",
								"package": "@medusajs/orchestration"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 986,
								"name": "EventEmitter.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 985,
						"name": "EventEmitter.off"
					}
				},
				{
					"id": 802,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 577,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 803,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 577,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 804,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 805,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 806,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 577,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 807,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 577,
															"character": 57
														}
													],
													"parameters": [
														{
															"id": 808,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 696,
								"name": "TransactionOrchestrator",
								"package": "@medusajs/orchestration"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 965,
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 964,
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 809,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 607,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 810,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 607,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 811,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 812,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 813,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 607,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 814,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 607,
															"character": 59
														}
													],
													"parameters": [
														{
															"id": 815,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 696,
								"name": "TransactionOrchestrator",
								"package": "@medusajs/orchestration"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 972,
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 971,
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 852,
					"name": "prependListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 834,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 853,
							"name": "prependListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 834,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 854,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 855,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 856,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 834,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 857,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 834,
															"character": 70
														}
													],
													"parameters": [
														{
															"id": 858,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 696,
								"name": "TransactionOrchestrator",
								"package": "@medusajs/orchestration"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1015,
								"name": "EventEmitter.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1014,
						"name": "EventEmitter.prependListener"
					}
				},
				{
					"id": 859,
					"name": "prependOnceListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 850,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 860,
							"name": "prependOnceListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 850,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 861,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 862,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 863,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 850,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 864,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 850,
															"character": 74
														}
													],
													"parameters": [
														{
															"id": 865,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 696,
								"name": "TransactionOrchestrator",
								"package": "@medusajs/orchestration"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1022,
								"name": "EventEmitter.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1021,
						"name": "EventEmitter.prependOnceListener"
					}
				},
				{
					"id": 841,
					"name": "rawListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 766,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 842,
							"name": "rawListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 766,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 843,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1004,
								"name": "EventEmitter.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1003,
						"name": "EventEmitter.rawListeners"
					}
				},
				{
					"id": 784,
					"name": "registerStepFailure",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 78,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 785,
							"name": "registerStepFailure",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a step failure for a specific transaction and step"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 78,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 786,
									"name": "responseIdempotencyKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The idempotency key for the step"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 787,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The error that caused the failure"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 788,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The handler function to execute the step"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 689,
										"name": "TransactionStepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 789,
									"name": "transaction",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The current transaction"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 778,
					"name": "registerStepSuccess",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 69,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 779,
							"name": "registerStepSuccess",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a step success for a specific transaction and step"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 69,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 780,
									"name": "responseIdempotencyKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The idempotency key for the step"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 781,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The handler function to execute the step"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 689,
										"name": "TransactionStepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 782,
									"name": "transaction",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The current transaction. If not provided it will be loaded based on the responseIdempotencyKey"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 783,
									"name": "response",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The response of the step"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 830,
					"name": "removeAllListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 706,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 831,
							"name": "removeAllListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 706,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 832,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 696,
								"name": "TransactionOrchestrator",
								"package": "@medusajs/orchestration"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 993,
								"name": "EventEmitter.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 992,
						"name": "EventEmitter.removeAllListeners"
					}
				},
				{
					"id": 816,
					"name": "removeListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 690,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 817,
							"name": "removeListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 690,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 818,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 819,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 820,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 690,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 821,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 690,
															"character": 69
														}
													],
													"parameters": [
														{
															"id": 822,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 696,
								"name": "TransactionOrchestrator",
								"package": "@medusajs/orchestration"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 979,
								"name": "EventEmitter.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 978,
						"name": "EventEmitter.removeListener"
					}
				},
				{
					"id": 766,
					"name": "resume",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 46,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 767,
							"name": "resume",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Start a new transaction or resume a transaction that has been previously started"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 46,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 768,
									"name": "transaction",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The transaction to resume"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 833,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 716,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 834,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 716,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 835,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 696,
								"name": "TransactionOrchestrator",
								"package": "@medusajs/orchestration"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 996,
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 995,
						"name": "EventEmitter.setMaxListeners"
					}
				},
				{
					"id": 738,
					"name": "addAbortListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 387,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 739,
							"name": "addAbortListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Listens once to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on the provided "
									},
									{
										"kind": "code",
										"text": "`signal`"
									},
									{
										"kind": "text",
										"text": ".\n\nListening to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
									},
									{
										"kind": "code",
										"text": "`e.stopImmediatePropagation()`"
									},
									{
										"kind": "text",
										"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
									},
									{
										"kind": "code",
										"text": "`stopImmediatePropagation`"
									},
									{
										"kind": "text",
										"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v20.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Disposable that removes the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " listener."
											}
										]
									}
								],
								"modifierTags": [
									"@experimental"
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 387,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 740,
									"name": "signal",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "AbortSignal"
										},
										"name": "AbortSignal",
										"package": "typescript"
									}
								},
								{
									"id": 741,
									"name": "resource",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 742,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 387,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 743,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 387,
															"character": 63
														}
													],
													"parameters": [
														{
															"id": 744,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
																	"qualifiedName": "Event"
																},
																"name": "Event",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1305,
								"name": "Disposable",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 939,
								"name": "EventEmitter.addAbortListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 938,
						"name": "EventEmitter.addAbortListener"
					}
				},
				{
					"id": 727,
					"name": "getEventListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 308,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 728,
							"name": "getEventListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 308,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 729,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 1202,
												"name": "_DOMEventTarget",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"target": 1213,
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										]
									}
								},
								{
									"id": 730,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 928,
								"name": "EventEmitter.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 927,
						"name": "EventEmitter.getEventListeners"
					}
				},
				{
					"id": 700,
					"name": "getKeyName",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 30,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 701,
							"name": "getKeyName",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 30,
									"character": 11
								}
							],
							"parameters": [
								{
									"id": 702,
									"name": "params",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 731,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 337,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 732,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the currently set max amount of listeners.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.getMaxListeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v19.9.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 337,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 733,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 1202,
												"name": "_DOMEventTarget",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"target": 1213,
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 932,
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 931,
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 723,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 280,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 724,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 280,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 725,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1213,
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 726,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 924,
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 923,
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 718,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 258,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 719,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 258,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 720,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1213,
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 721,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 722,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1200,
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1292,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 919,
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 918,
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 709,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 193,
							"character": 15
						},
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 198,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 710,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 193,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 711,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1192,
										"name": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 712,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 713,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1200,
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 910,
								"name": "EventEmitter.once"
							}
						},
						{
							"id": 714,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 198,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 715,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1202,
										"name": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 716,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 717,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1200,
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 914,
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 909,
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 734,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 352,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 735,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 352,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 736,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 737,
									"name": "eventTargets",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"target": 1202,
													"name": "_DOMEventTarget",
													"package": "@types/node"
												},
												{
													"type": "reference",
													"target": 1213,
													"name": "EventEmitter",
													"package": "@types/node",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 935,
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 934,
						"name": "EventEmitter.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						749
					]
				},
				{
					"title": "Properties",
					"children": [
						762,
						761,
						760,
						763,
						756,
						772,
						754,
						765,
						764,
						759,
						758,
						757,
						753,
						755,
						698,
						697,
						699,
						706,
						746,
						747,
						748,
						745,
						707,
						708,
						705,
						704,
						703
					]
				},
				{
					"title": "Methods",
					"children": [
						790,
						795,
						773,
						769,
						844,
						866,
						836,
						848,
						838,
						823,
						802,
						809,
						852,
						859,
						841,
						784,
						778,
						830,
						816,
						766,
						833,
						738,
						727,
						700,
						731,
						723,
						718,
						709,
						734
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
					"line": 21,
					"character": 21
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 908,
					"name": "EventEmitter",
					"package": "@types/node"
				}
			]
		},
		{
			"id": 899,
			"name": "TransactionPayload",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 900,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 56,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 901,
							"name": "new TransactionPayload",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 56,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 902,
									"name": "metadata",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The metadata of the transaction."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 334,
										"name": "TransactionMetadata",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 903,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The initial payload data to begin a transation."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 191,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 904,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Object gathering responses of all steps flagged with saveResponse."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 350,
										"name": "TransactionContext",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 899,
								"name": "TransactionPayload",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 907,
					"name": "context",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 50,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 350,
						"name": "TransactionContext",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 906,
					"name": "data",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 49,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 191,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 905,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 48,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 334,
						"name": "TransactionMetadata",
						"package": "@medusajs/orchestration"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						900
					]
				},
				{
					"title": "Properties",
					"children": [
						907,
						906,
						905
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
					"line": 47,
					"character": 21
				}
			]
		},
		{
			"id": 1315,
			"name": "TransactionStep",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@classdesc",
						"content": [
							{
								"kind": "text",
								"text": "A class representing a single step in a transaction flow"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 1316,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1317,
							"name": "new TransactionStep",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1315,
								"name": "TransactionStep",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 1330,
					"name": "attempts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 33,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1326,
					"name": "compensate",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 29,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1327,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 1328,
									"name": "state",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
											"line": 30,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"target": 889,
										"name": "TransactionState",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 1329,
									"name": "status",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
											"line": 31,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"target": 1419,
										"name": "TransactionStepStatus",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1328,
										1329
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
									"line": 29,
									"character": 16
								}
							]
						}
					}
				},
				{
					"id": 1321,
					"name": "definition",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 24,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 498,
						"name": "TransactionStepsDefinition",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 1320,
					"name": "depth",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 23,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1331,
					"name": "failures",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1319,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 22,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1322,
					"name": "invoke",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 25,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1323,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 1324,
									"name": "state",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
											"line": 26,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"target": 889,
										"name": "TransactionState",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 1325,
									"name": "status",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
											"line": 27,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"target": 1419,
										"name": "TransactionStepStatus",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1324,
										1325
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
									"line": 25,
									"character": 12
								}
							]
						}
					}
				},
				{
					"id": 1332,
					"name": "lastAttempt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 1333,
					"name": "next",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1334,
					"name": "saveResponse",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 37,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1318,
					"name": "stepFailed",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@member",
								"content": [
									{
										"kind": "text",
										"text": "id - The id of the step"
									}
								]
							},
							{
								"tag": "@member",
								"content": [
									{
										"kind": "text",
										"text": "depth - The depth of the step in the flow"
									}
								]
							},
							{
								"tag": "@member",
								"content": [
									{
										"kind": "text",
										"text": "definition - The definition of the step"
									}
								]
							},
							{
								"tag": "@member",
								"content": [
									{
										"kind": "text",
										"text": "invoke - The current state and status of the invoke action of the step"
									}
								]
							},
							{
								"tag": "@member",
								"content": [
									{
										"kind": "text",
										"text": "compensate - The current state and status of the compensate action of the step"
									}
								]
							},
							{
								"tag": "@member",
								"content": [
									{
										"kind": "text",
										"text": "attempts - The number of attempts made to execute the step"
									}
								]
							},
							{
								"tag": "@member",
								"content": [
									{
										"kind": "text",
										"text": "failures - The number of failures encountered while executing the step"
									}
								]
							},
							{
								"tag": "@member",
								"content": [
									{
										"kind": "text",
										"text": "lastAttempt - The timestamp of the last attempt made to execute the step"
									}
								]
							},
							{
								"tag": "@member",
								"content": [
									{
										"kind": "text",
										"text": "next - The ids of the next steps in the flow"
									}
								]
							},
							{
								"tag": "@member",
								"content": [
									{
										"kind": "text",
										"text": "saveResponse - A flag indicating if the response of a step should be shared in the transaction context and available to subsequent steps - default is true"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 21,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 1340,
					"name": "beginCompensation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 42,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1341,
							"name": "beginCompensation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
									"line": 42,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1355,
					"name": "canCompensate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 48,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1356,
							"name": "canCompensate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
									"line": 48,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1357,
									"name": "flowState",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 889,
										"name": "TransactionState",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 1352,
					"name": "canInvoke",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 47,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1353,
							"name": "canInvoke",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
									"line": 47,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1354,
									"name": "flowState",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 889,
										"name": "TransactionState",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 1350,
					"name": "canRetry",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 46,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1351,
							"name": "canRetry",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
									"line": 46,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 1344,
					"name": "changeState",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 44,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1345,
							"name": "changeState",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
									"line": 44,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1346,
									"name": "toState",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 889,
										"name": "TransactionState",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1347,
					"name": "changeStatus",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1348,
							"name": "changeStatus",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
									"line": 45,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1349,
									"name": "toStatus",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 1419,
										"name": "TransactionStepStatus",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1335,
					"name": "getStates",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 38,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1336,
							"name": "getStates",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
									"line": 38,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1337,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 1338,
											"name": "state",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
													"line": 39,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"target": 889,
												"name": "TransactionState",
												"package": "@medusajs/orchestration"
											}
										},
										{
											"id": 1339,
											"name": "status",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
													"line": 40,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"target": 1419,
												"name": "TransactionStepStatus",
												"package": "@medusajs/orchestration"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												1338,
												1339
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
											"line": 38,
											"character": 17
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 1342,
					"name": "isCompensating",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 43,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1343,
							"name": "isCompensating",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
									"line": 43,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1316
					]
				},
				{
					"title": "Properties",
					"children": [
						1330,
						1326,
						1321,
						1320,
						1331,
						1319,
						1322,
						1332,
						1333,
						1334,
						1318
					]
				},
				{
					"title": "Methods",
					"children": [
						1340,
						1355,
						1352,
						1350,
						1344,
						1347,
						1335,
						1342
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
					"line": 8,
					"character": 21
				}
			]
		},
		{
			"id": 662,
			"name": "TransactionStepError",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 663,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 39,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 664,
							"name": "new TransactionStepError",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 39,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 665,
									"name": "action",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 666,
									"name": "handlerType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 543,
										"name": "TransactionHandlerType",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 667,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 662,
								"name": "TransactionStepError",
								"package": "@medusajs/orchestration"
							}
						}
					]
				},
				{
					"id": 668,
					"name": "action",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 670,
					"name": "error",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 38,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 669,
					"name": "handlerType",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 37,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 543,
						"name": "TransactionHandlerType",
						"package": "@medusajs/orchestration"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						663
					]
				},
				{
					"title": "Properties",
					"children": [
						668,
						670,
						669
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
					"line": 35,
					"character": 21
				}
			]
		},
		{
			"id": 1292,
			"name": "AsyncIterableIterator",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1293,
					"name": "[asyncIterator]",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
							"line": 42,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1294,
							"name": "[asyncIterator]",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
									"line": 42,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 1292,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								],
								"name": "AsyncIterableIterator",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1295,
					"name": "next",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
							"line": 32,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1296,
							"name": "next",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
									"line": 32,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1297,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "tuple"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1416,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "IteratorResult",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1405,
								"name": "AsyncIterator.next"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1404,
						"name": "AsyncIterator.next"
					}
				},
				{
					"id": 1298,
					"name": "return",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
							"line": 33,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1299,
							"name": "return",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
									"line": 33,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1300,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1416,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "IteratorResult",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1408,
								"name": "AsyncIterator.return"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1407,
						"name": "AsyncIterator.return"
					}
				},
				{
					"id": 1301,
					"name": "throw",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1302,
							"name": "throw",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
									"line": 34,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1303,
									"name": "e",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1416,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "IteratorResult",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1411,
								"name": "AsyncIterator.throw"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 1410,
						"name": "AsyncIterator.throw"
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						1293,
						1295,
						1298,
						1301
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
					"line": 41,
					"character": 10
				}
			],
			"typeParameters": [
				{
					"id": 1304,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 1403,
					"typeArguments": [
						{
							"type": "reference",
							"target": -1,
							"name": "T",
							"refersToTypeParameter": true
						}
					],
					"name": "AsyncIterator",
					"package": "typescript"
				}
			]
		},
		{
			"id": 1403,
			"name": "AsyncIterator",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1404,
					"name": "next",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
							"line": 32,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1405,
							"name": "next",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
									"line": 32,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1406,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "tuple"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "reference",
														"target": -1,
														"name": "TNext",
														"refersToTypeParameter": true
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1416,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "TReturn",
												"refersToTypeParameter": true
											}
										],
										"name": "IteratorResult",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1407,
					"name": "return",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
							"line": 33,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1408,
							"name": "return",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
									"line": 33,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1409,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": -1,
												"name": "TReturn",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1425,
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "TReturn",
														"refersToTypeParameter": true
													}
												],
												"name": "PromiseLike",
												"package": "typescript"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1416,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "TReturn",
												"refersToTypeParameter": true
											}
										],
										"name": "IteratorResult",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1410,
					"name": "throw",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1411,
							"name": "throw",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
									"line": 34,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1412,
									"name": "e",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1416,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "TReturn",
												"refersToTypeParameter": true
											}
										],
										"name": "IteratorResult",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						1404,
						1407,
						1410
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
					"line": 30,
					"character": 10
				}
			],
			"typeParameters": [
				{
					"id": 1413,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 1414,
					"name": "TReturn",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"default": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 1415,
					"name": "TNext",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"default": {
						"type": "intrinsic",
						"name": "undefined"
					}
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 1292,
					"name": "AsyncIterableIterator"
				}
			]
		},
		{
			"id": 1400,
			"name": "AsyncResourceOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1402,
					"name": "requireManualDestroy",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Disables automatic "
							},
							{
								"kind": "code",
								"text": "`emitDestroy`"
							},
							{
								"kind": "text",
								"text": " when the object is garbage collected.\nThis usually does not need to be set (even if "
							},
							{
								"kind": "code",
								"text": "`emitDestroy`"
							},
							{
								"kind": "text",
								"text": " is called\nmanually), unless the resource's "
							},
							{
								"kind": "code",
								"text": "`asyncId`"
							},
							{
								"kind": "text",
								"text": " is retrieved and the\nsensitive API's "
							},
							{
								"kind": "code",
								"text": "`emitDestroy`"
							},
							{
								"kind": "text",
								"text": " is called with it."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nfalse\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
							"line": 222,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1401,
					"name": "triggerAsyncId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the execution context that created this async event."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nexecutionAsyncId()\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
							"line": 214,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1402,
						1401
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/async_hooks.d.ts",
					"line": 209,
					"character": 14
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 1060,
					"name": "EventEmitterAsyncResourceOptions"
				}
			]
		},
		{
			"id": 343,
			"name": "Context",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A shared context object that is used to share resources between the application and the module."
					}
				]
			},
			"children": [
				{
					"id": 347,
					"name": "enableNestedTransactions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A boolean value indicating whether nested transactions are enabled."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/dist/shared-context.d.ts",
							"line": 38,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 346,
					"name": "isolationLevel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the isolation level of the context. Possible values are "
							},
							{
								"kind": "code",
								"text": "`READ UNCOMMITTED`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`READ COMMITTED`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`REPEATABLE READ`"
							},
							{
								"kind": "text",
								"text": ", or "
							},
							{
								"kind": "code",
								"text": "`SERIALIZABLE`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/dist/shared-context.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 345,
					"name": "manager",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of a manager, typically an entity manager, of type "
							},
							{
								"kind": "code",
								"text": "`TManager`"
							},
							{
								"kind": "text",
								"text": ", which is a typed parameter passed to the context to specify the type of the "
							},
							{
								"kind": "code",
								"text": "`manager`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/dist/shared-context.d.ts",
							"line": 30,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TManager",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 348,
					"name": "transactionId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the ID of the current transaction."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/dist/shared-context.d.ts",
							"line": 42,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 344,
					"name": "transactionManager",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of a transaction manager of type "
							},
							{
								"kind": "code",
								"text": "`TManager`"
							},
							{
								"kind": "text",
								"text": ", which is a typed parameter passed to the context to specify the type of the "
							},
							{
								"kind": "code",
								"text": "`transactionManager`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/dist/shared-context.d.ts",
							"line": 26,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TManager",
						"refersToTypeParameter": true
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						347,
						346,
						345,
						348,
						344
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/dist/shared-context.d.ts",
					"line": 22,
					"character": 12
				}
			],
			"typeParameters": [
				{
					"id": 349,
					"name": "TManager",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			]
		},
		{
			"id": 1305,
			"name": "Disposable",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1306,
					"name": "[dispose]",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/globals.d.ts",
							"line": 99,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1307,
							"name": "[dispose]",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/globals.d.ts",
									"line": 99,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						1306
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/globals.d.ts",
					"line": 98,
					"character": 10
				}
			]
		},
		{
			"id": 1311,
			"name": "Error",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1313,
					"name": "message",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1068,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1312,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1067,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1314,
					"name": "stack",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1069,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1313,
						1312,
						1314
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1066,
					"character": 10
				},
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1078,
					"character": 12
				}
			]
		},
		{
			"id": 1213,
			"name": "EventEmitter",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1287,
					"name": "[captureRejectionSymbol]",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 540,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1288,
							"name": "[captureRejectionSymbol]",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 540,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1289,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 1308,
										"name": "Error",
										"package": "typescript"
									}
								},
								{
									"id": 1290,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1291,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1214,
					"name": "addListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 545,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1215,
							"name": "addListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 545,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1216,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1217,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1218,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 545,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 1219,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 545,
															"character": 66
														}
													],
													"parameters": [
														{
															"id": 1220,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1213,
								"name": "EventEmitter",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.EventEmitter"
							}
						}
					]
				},
				{
					"id": 1263,
					"name": "emit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 807,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1264,
							"name": "emit",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 807,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1265,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1266,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 1285,
					"name": "eventNames",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 870,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1286,
							"name": "eventNames",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 870,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 1255,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 722,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1256,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 722,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 1267,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 816,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1268,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 816,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1269,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1270,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 1257,
					"name": "listeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 735,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1258,
							"name": "listeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 735,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1259,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							}
						}
					]
				},
				{
					"id": 1242,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 695,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1243,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 695,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1244,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1245,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1246,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 695,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 1247,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 695,
															"character": 58
														}
													],
													"parameters": [
														{
															"id": 1248,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1213,
								"name": "EventEmitter",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.EventEmitter"
							}
						}
					]
				},
				{
					"id": 1221,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 577,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1222,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 577,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1223,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1224,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1225,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 577,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 1226,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 577,
															"character": 57
														}
													],
													"parameters": [
														{
															"id": 1227,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1213,
								"name": "EventEmitter",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.EventEmitter"
							}
						}
					]
				},
				{
					"id": 1228,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 607,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1229,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 607,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1230,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1231,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1232,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 607,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 1233,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 607,
															"character": 59
														}
													],
													"parameters": [
														{
															"id": 1234,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1213,
								"name": "EventEmitter",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.EventEmitter"
							}
						}
					]
				},
				{
					"id": 1271,
					"name": "prependListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 834,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1272,
							"name": "prependListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 834,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1273,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1274,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1275,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 834,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 1276,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 834,
															"character": 70
														}
													],
													"parameters": [
														{
															"id": 1277,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1213,
								"name": "EventEmitter",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.EventEmitter"
							}
						}
					]
				},
				{
					"id": 1278,
					"name": "prependOnceListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 850,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1279,
							"name": "prependOnceListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 850,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1280,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1281,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1282,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 850,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 1283,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 850,
															"character": 74
														}
													],
													"parameters": [
														{
															"id": 1284,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1213,
								"name": "EventEmitter",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.EventEmitter"
							}
						}
					]
				},
				{
					"id": 1260,
					"name": "rawListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 766,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1261,
							"name": "rawListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 766,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1262,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							}
						}
					]
				},
				{
					"id": 1249,
					"name": "removeAllListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 706,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1250,
							"name": "removeAllListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 706,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1251,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1213,
								"name": "EventEmitter",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.EventEmitter"
							}
						}
					]
				},
				{
					"id": 1235,
					"name": "removeListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 690,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1236,
							"name": "removeListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 690,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1237,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1238,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1239,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 690,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 1240,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 690,
															"character": 69
														}
													],
													"parameters": [
														{
															"id": 1241,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1213,
								"name": "EventEmitter",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.EventEmitter"
							}
						}
					]
				},
				{
					"id": 1252,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 716,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1253,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 716,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 1254,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1213,
								"name": "EventEmitter",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.EventEmitter"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						1287,
						1214,
						1263,
						1285,
						1255,
						1267,
						1257,
						1242,
						1221,
						1228,
						1271,
						1278,
						1260,
						1249,
						1235,
						1252
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 539,
					"character": 22
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 908,
					"name": "EventEmitter"
				}
			]
		},
		{
			"id": 1358,
			"name": "EventEmitterOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1359,
					"name": "captureRejections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Enables automatic capturing of promise rejection."
							}
						]
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 76,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1359
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 72,
					"character": 14
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 1060,
					"name": "EventEmitterAsyncResourceOptions"
				}
			]
		},
		{
			"id": 510,
			"name": "InternalStep",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 514,
					"name": "action",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 6,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionStepsDefinition.action"
					}
				},
				{
					"id": 520,
					"name": "async",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 12,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionStepsDefinition.async"
					}
				},
				{
					"id": 515,
					"name": "continueOnPermanentFailure",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 7,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionStepsDefinition.continueOnPermanentFailure"
					}
				},
				{
					"id": 512,
					"name": "depth",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 4,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 517,
					"name": "maxRetries",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 9,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionStepsDefinition.maxRetries"
					}
				},
				{
					"id": 511,
					"name": "next",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 3,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 510,
								"name": "InternalStep",
								"package": "@medusajs/orchestration"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 510,
									"name": "InternalStep",
									"package": "@medusajs/orchestration"
								}
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "TransactionStepsDefinition.next"
					}
				},
				{
					"id": 516,
					"name": "noCompensation",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 8,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionStepsDefinition.noCompensation"
					}
				},
				{
					"id": 521,
					"name": "noWait",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 13,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionStepsDefinition.noWait"
					}
				},
				{
					"id": 513,
					"name": "parent",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
							"line": 5,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": 510,
								"name": "InternalStep",
								"package": "@medusajs/orchestration"
							}
						]
					}
				},
				{
					"id": 518,
					"name": "retryInterval",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 10,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionStepsDefinition.retryInterval"
					}
				},
				{
					"id": 522,
					"name": "saveResponse",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 14,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionStepsDefinition.saveResponse"
					}
				},
				{
					"id": 519,
					"name": "timeout",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 11,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionStepsDefinition.timeout"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						514,
						520,
						515,
						512,
						517,
						511,
						516,
						521,
						513,
						518,
						522,
						519
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
					"line": 2,
					"character": 10
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 498,
					"name": "TransactionStepsDefinition",
					"package": "@medusajs/orchestration"
				}
			]
		},
		{
			"id": 1443,
			"name": "IteratorReturnResult",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1444,
					"name": "done",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": true
					}
				},
				{
					"id": 1445,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TReturn",
						"refersToTypeParameter": true
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1444,
						1445
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
					"line": 34,
					"character": 10
				}
			],
			"typeParameters": [
				{
					"id": 1446,
					"name": "TReturn",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			]
		},
		{
			"id": 1439,
			"name": "IteratorYieldResult",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1440,
					"name": "done",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 30,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": false
					}
				},
				{
					"id": 1441,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 31,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TYield",
						"refersToTypeParameter": true
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1440,
						1441
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
					"line": 29,
					"character": 10
				}
			],
			"typeParameters": [
				{
					"id": 1442,
					"name": "TYield",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			]
		},
		{
			"id": 546,
			"name": "JoinerServiceConfig",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 548,
					"name": "alias",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Property name to use as entrypoint to the service"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/dist/joiner/index.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 671,
								"name": "JoinerServiceConfigAlias",
								"package": "@medusajs/types"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 671,
									"name": "JoinerServiceConfigAlias",
									"package": "@medusajs/types"
								}
							}
						]
					}
				},
				{
					"id": 559,
					"name": "args",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extra arguments to pass to the remoteFetchData callback"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/dist/joiner/index.d.ts",
							"line": 53,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 191,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 555,
					"name": "extends",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/types/dist/joiner/index.d.ts",
							"line": 46,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 556,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"children": [
									{
										"id": 558,
										"name": "relationship",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/types/dist/joiner/index.d.ts",
												"line": 48,
												"character": 8
											}
										],
										"type": {
											"type": "reference",
											"target": 674,
											"name": "JoinerRelationship",
											"package": "@medusajs/types"
										}
									},
									{
										"id": 557,
										"name": "serviceName",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/types/dist/joiner/index.d.ts",
												"line": 47,
												"character": 8
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"children": [
											558,
											557
										]
									}
								],
								"sources": [
									{
										"fileName": "packages/types/dist/joiner/index.d.ts",
										"line": 46,
										"character": 14
									}
								]
							}
						}
					}
				},
				{
					"id": 549,
					"name": "fieldAlias",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "alias for deeper nested relationships (e.g. { 'price': 'prices.calculated_price_set.amount' })"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/dist/joiner/index.d.ts",
							"line": 40,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 191,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 550,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 552,
													"name": "forwardArgumentsOnPath",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/types/dist/joiner/index.d.ts",
															"line": 42,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												},
												{
													"id": 551,
													"name": "path",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/types/dist/joiner/index.d.ts",
															"line": 41,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														552,
														551
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/types/dist/joiner/index.d.ts",
													"line": 40,
													"character": 41
												}
											]
										}
									}
								]
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 553,
					"name": "primaryKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/dist/joiner/index.d.ts",
							"line": 44,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 554,
					"name": "relationships",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/types/dist/joiner/index.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 674,
							"name": "JoinerRelationship",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 547,
					"name": "serviceName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/dist/joiner/index.d.ts",
							"line": 32,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						548,
						559,
						555,
						549,
						553,
						554,
						547
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/dist/joiner/index.d.ts",
					"line": 31,
					"character": 17
				}
			]
		},
		{
			"id": 671,
			"name": "JoinerServiceConfigAlias",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 673,
					"name": "args",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extra arguments to pass to the remoteFetchData callback"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/types/dist/joiner/index.d.ts",
							"line": 29,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 191,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 672,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/types/dist/joiner/index.d.ts",
							"line": 25,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						673,
						672
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/types/dist/joiner/index.d.ts",
					"line": 24,
					"character": 17
				}
			]
		},
		{
			"id": 1425,
			"name": "PromiseLike",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1426,
					"name": "then",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1529,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1427,
							"name": "then",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Attaches callbacks for the resolution and/or rejection of the Promise."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A Promise for the completion of which ever callback is executed."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1529,
									"character": 4
								}
							],
							"typeParameter": [
								{
									"id": 1428,
									"name": "TResult1",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"default": {
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 1429,
									"name": "TResult2",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"default": {
										"type": "intrinsic",
										"name": "never"
									}
								}
							],
							"parameters": [
								{
									"id": 1430,
									"name": "onfulfilled",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback to execute when the Promise is resolved."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1431,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1529,
															"character": 56
														}
													],
													"signatures": [
														{
															"id": 1432,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1529,
																	"character": 56
																}
															],
															"parameters": [
																{
																	"id": 1433,
																	"name": "value",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": -1,
																		"name": "T",
																		"refersToTypeParameter": true
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"target": -1,
																		"name": "TResult1",
																		"refersToTypeParameter": true
																	},
																	{
																		"type": "reference",
																		"target": 1425,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "TResult1",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "PromiseLike",
																		"package": "typescript"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 1434,
									"name": "onrejected",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback to execute when the Promise is rejected."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1435,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1529,
															"character": 138
														}
													],
													"signatures": [
														{
															"id": 1436,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1529,
																	"character": 138
																}
															],
															"parameters": [
																{
																	"id": 1437,
																	"name": "reason",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"target": -1,
																		"name": "TResult2",
																		"refersToTypeParameter": true
																	},
																	{
																		"type": "reference",
																		"target": 1425,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "TResult2",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "PromiseLike",
																		"package": "typescript"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1425,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": -1,
												"name": "TResult1",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "TResult2",
												"refersToTypeParameter": true
											}
										]
									}
								],
								"name": "PromiseLike",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						1426
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1522,
					"character": 10
				}
			],
			"typeParameters": [
				{
					"id": 1438,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			]
		},
		{
			"id": 1200,
			"name": "StaticEventEmitterOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1201,
					"name": "signal",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 93,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "AbortSignal"
						},
						"name": "AbortSignal",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1201
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 92,
					"character": 14
				}
			]
		},
		{
			"id": 165,
			"name": "StepExecutionContext",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The step's context."
					}
				]
			},
			"children": [
				{
					"id": 166,
					"name": "container",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The container used to access resources, such as services, in the step."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
							"line": 74,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L74"
						}
					],
					"type": {
						"type": "reference",
						"target": 323,
						"name": "MedusaContainer",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 168,
					"name": "context",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A shared context object that is used to share resources between the application and the module."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
							"line": 82,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L82"
						}
					],
					"type": {
						"type": "reference",
						"target": 343,
						"name": "Context",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 167,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Metadata passed in the input."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
							"line": 78,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L78"
						}
					],
					"type": {
						"type": "reference",
						"target": 334,
						"name": "TransactionMetadata",
						"package": "@medusajs/orchestration"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						166,
						168,
						167
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
					"line": 70,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L70"
				}
			]
		},
		{
			"id": 592,
			"name": "WorkflowDefinition",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 600,
					"name": "flow_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
							"line": 7,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 498,
						"name": "TransactionStepsDefinition",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 594,
					"name": "handler",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
							"line": 5,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 595,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
									"line": 5,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 596,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
											"line": 5,
											"character": 13
										}
									],
									"parameters": [
										{
											"id": 597,
											"name": "container",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 323,
												"name": "MedusaContainer",
												"package": "@medusajs/types"
											}
										},
										{
											"id": 598,
											"name": "context",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": 343,
												"name": "Context",
												"package": "@medusajs/types"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 689,
										"name": "TransactionStepHandler",
										"package": "@medusajs/orchestration"
									}
								}
							]
						}
					}
				},
				{
					"id": 601,
					"name": "handlers_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
							"line": 8,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Map"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 602,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 604,
											"name": "compensate",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
													"line": 10,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"target": 525,
												"name": "WorkflowStepHandler",
												"package": "@medusajs/orchestration"
											}
										},
										{
											"id": 603,
											"name": "invoke",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
													"line": 9,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"target": 525,
												"name": "WorkflowStepHandler",
												"package": "@medusajs/orchestration"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												604,
												603
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
											"line": 8,
											"character": 27
										}
									]
								}
							}
						],
						"name": "Map",
						"package": "typescript"
					}
				},
				{
					"id": 593,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
							"line": 4,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 606,
					"name": "optionalModules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
							"line": 13,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Set"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Set",
						"package": "typescript"
					}
				},
				{
					"id": 599,
					"name": "orchestrator",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
							"line": 6,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 696,
						"name": "TransactionOrchestrator",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 605,
					"name": "requiredModules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
							"line": 12,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Set"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Set",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						600,
						594,
						601,
						593,
						606,
						599,
						605
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
					"line": 3,
					"character": 17
				}
			]
		},
		{
			"id": 1202,
			"name": "_DOMEventTarget",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1203,
					"name": "addEventListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 84,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 1204,
							"name": "addEventListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 84,
									"character": 8
								}
							],
							"parameters": [
								{
									"id": 1205,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1206,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1207,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 86,
													"character": 22
												}
											],
											"signatures": [
												{
													"id": 1208,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 86,
															"character": 22
														}
													],
													"parameters": [
														{
															"id": 1209,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 1210,
									"name": "opts",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1211,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"children": [
												{
													"id": 1212,
													"name": "once",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 88,
															"character": 16
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														1212
													]
												}
											],
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 87,
													"character": 19
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						1203
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 83,
					"character": 14
				}
			]
		},
		{
			"id": 1192,
			"name": "_NodeEventTarget",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1193,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/@types/node/events.d.ts",
							"line": 80,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 1194,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "docs-util/node_modules/@types/node/events.d.ts",
									"line": 80,
									"character": 8
								}
							],
							"parameters": [
								{
									"id": 1195,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1196,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1197,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "docs-util/node_modules/@types/node/events.d.ts",
													"line": 80,
													"character": 51
												}
											],
											"signatures": [
												{
													"id": 1198,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "docs-util/node_modules/@types/node/events.d.ts",
															"line": 80,
															"character": 51
														}
													],
													"parameters": [
														{
															"id": 1199,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1192,
								"name": "_NodeEventTarget",
								"package": "@types/node"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						1193
					]
				}
			],
			"sources": [
				{
					"fileName": "docs-util/node_modules/@types/node/events.d.ts",
					"line": 79,
					"character": 14
				}
			]
		},
		{
			"id": 185,
			"name": "CompensateFn",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/create-step.ts",
					"line": 58,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-step.ts#L58"
				}
			],
			"typeParameters": [
				{
					"id": 190,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the argument passed to the compensation function. If not specified, then it will be the same type as the invocation function's output."
							}
						]
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 186,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/create-step.ts",
							"line": 58,
							"character": 23,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-step.ts#L58"
						}
					],
					"signatures": [
						{
							"id": 187,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of compensation function passed to a step."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "There's no expected type to be returned by the compensation function."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 188,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								},
								{
									"id": 189,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 165,
										"name": "StepExecutionContext",
										"package": "@medusajs/workflows-sdk"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "unknown"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							}
						}
					]
				}
			}
		},
		{
			"id": 139,
			"name": "CreateWorkflowComposerContext",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
					"line": 49,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L49"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 140,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 144,
							"name": "flow",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 53,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L53"
								}
							],
							"type": {
								"type": "reference",
								"target": 230,
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						},
						{
							"id": 145,
							"name": "handlers",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 54,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L54"
								}
							],
							"type": {
								"type": "reference",
								"target": 319,
								"name": "WorkflowHandler",
								"package": "@medusajs/orchestration"
							}
						},
						{
							"id": 151,
							"name": "hookBinder",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 58,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L58"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 152,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
											"line": 58,
											"character": 14,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L58"
										}
									],
									"signatures": [
										{
											"id": 153,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"typeParameter": [
												{
													"id": 156,
													"name": "TOutput",
													"variant": "typeParam",
													"kind": 131072,
													"flags": {},
													"default": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											],
											"parameters": [
												{
													"id": 154,
													"name": "name",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 155,
													"name": "fn",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Function"
														},
														"name": "Function",
														"package": "typescript"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 137,
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "TOutput",
														"refersToTypeParameter": true
													}
												],
												"name": "WorkflowData",
												"package": "@medusajs/workflows-sdk"
											}
										}
									]
								}
							}
						},
						{
							"id": 142,
							"name": "hooksCallback_",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 51,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L51"
								}
							],
							"type": {
								"type": "reference",
								"target": 191,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 141,
							"name": "hooks_",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 50,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L50"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 157,
							"name": "parallelizeBinder",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 62,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L62"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 158,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
											"line": 62,
											"character": 21,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L62"
										}
									],
									"signatures": [
										{
											"id": 159,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"typeParameter": [
												{
													"id": 164,
													"name": "TOutput",
													"variant": "typeParam",
													"kind": 131072,
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": 137,
															"name": "WorkflowData",
															"package": "@medusajs/workflows-sdk"
														}
													},
													"default": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": 137,
															"name": "WorkflowData",
															"package": "@medusajs/workflows-sdk"
														}
													}
												}
											],
											"parameters": [
												{
													"id": 160,
													"name": "fn",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 161,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
																	"line": 63,
																	"character": 8,
																	"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L63"
																}
															],
															"signatures": [
																{
																	"id": 162,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"parameters": [
																		{
																			"id": 163,
																			"name": "this",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"target": 139,
																				"name": "CreateWorkflowComposerContext",
																				"package": "@medusajs/workflows-sdk"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": -1,
																		"name": "TOutput",
																		"refersToTypeParameter": true
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"target": -1,
												"name": "TOutput",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						},
						{
							"id": 146,
							"name": "stepBinder",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 55,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L55"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 147,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
											"line": 55,
											"character": 14,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L55"
										}
									],
									"signatures": [
										{
											"id": 148,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"typeParameter": [
												{
													"id": 150,
													"name": "TOutput",
													"variant": "typeParam",
													"kind": 131072,
													"flags": {},
													"default": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											],
											"parameters": [
												{
													"id": 149,
													"name": "fn",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 121,
														"name": "StepFunctionResult",
														"package": "@medusajs/workflows-sdk"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 137,
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "TOutput",
														"refersToTypeParameter": true
													}
												],
												"name": "WorkflowData",
												"package": "@medusajs/workflows-sdk"
											}
										}
									]
								}
							}
						},
						{
							"id": 143,
							"name": "workflowId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 52,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L52"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								144,
								145,
								151,
								142,
								141,
								157,
								146,
								143
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
							"line": 49,
							"character": 44,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L49"
						}
					]
				}
			}
		},
		{
			"id": 589,
			"name": "Exclude",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Exclude from T those types that are assignable to U"
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1606,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 590,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 591,
					"name": "U",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "reference",
					"target": -1,
					"name": "U",
					"refersToTypeParameter": true
				},
				"trueType": {
					"type": "intrinsic",
					"name": "never"
				},
				"falseType": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				}
			}
		},
		{
			"id": 574,
			"name": "ExternalModuleDeclaration",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
					"line": 33,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 575,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 584,
							"name": "alias",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If multiple modules are registered with the same key, the alias can be used to differentiate them"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 45,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 577,
							"name": "definition",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 35,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 386,
								"name": "ModuleDefinition",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 585,
							"name": "main",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If the module is the main module for the key when multiple ones are registered"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 49,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 583,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 41,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 191,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 576,
							"name": "scope",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 34,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 688,
								"name": "MODULE_SCOPE.EXTERNAL",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 578,
							"name": "server",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 579,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 582,
											"name": "keepAlive",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/types/dist/modules-sdk/index.d.ts",
													"line": 39,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 580,
											"name": "type",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/types/dist/modules-sdk/index.d.ts",
													"line": 37,
													"character": 8
												}
											],
											"type": {
												"type": "literal",
												"value": "http"
											}
										},
										{
											"id": 581,
											"name": "url",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/types/dist/modules-sdk/index.d.ts",
													"line": 38,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												582,
												580,
												581
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 36,
											"character": 13
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								584,
								577,
								585,
								583,
								576,
								578
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/types/dist/modules-sdk/index.d.ts",
							"line": 33,
							"character": 40
						}
					]
				}
			}
		},
		{
			"id": 491,
			"name": "FlowRunOptions",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
					"line": 15,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L15"
				}
			],
			"typeParameters": [
				{
					"id": 497,
					"name": "TData",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 492,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 494,
							"name": "context",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
									"line": 17,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L17"
								}
							],
							"type": {
								"type": "reference",
								"target": 343,
								"name": "Context",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 493,
							"name": "input",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
									"line": 16,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L16"
								}
							],
							"type": {
								"type": "reference",
								"target": -1,
								"name": "TData",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 495,
							"name": "resultFrom",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
									"line": 18,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L18"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 496,
							"name": "throwOnError",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
									"line": 19,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L19"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								494,
								493,
								495,
								496
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
							"line": 15,
							"character": 46,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L15"
						}
					]
				}
			}
		},
		{
			"id": 223,
			"name": "Func",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/transform.ts",
					"line": 14,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/transform.ts#L14"
				}
			],
			"typeParameters": [
				{
					"id": 228,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				},
				{
					"id": 229,
					"name": "U",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 224,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/transform.ts",
							"line": 14,
							"character": 18,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/transform.ts#L14"
						}
					],
					"signatures": [
						{
							"id": 225,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 226,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 227,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 165,
										"name": "StepExecutionContext",
										"package": "@medusajs/workflows-sdk"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": -1,
										"name": "U",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "U",
												"refersToTypeParameter": true
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							}
						}
					]
				}
			}
		},
		{
			"id": 215,
			"name": "Func1",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/transform.ts",
					"line": 5,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/transform.ts#L5"
				}
			],
			"typeParameters": [
				{
					"id": 221,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "object"
							},
							{
								"type": "reference",
								"target": 137,
								"name": "WorkflowData",
								"package": "@medusajs/workflows-sdk"
							}
						]
					}
				},
				{
					"id": 222,
					"name": "U",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 216,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/transform.ts",
							"line": 5,
							"character": 49,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/transform.ts#L5"
						}
					],
					"signatures": [
						{
							"id": 217,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 218,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										},
										"extendsType": {
											"type": "reference",
											"target": 137,
											"typeArguments": [
												{
													"type": "inferred",
													"name": "U"
												}
											],
											"name": "WorkflowData",
											"package": "@medusajs/workflows-sdk"
										},
										"trueType": {
											"type": "reference",
											"target": -1,
											"name": "U",
											"refersToTypeParameter": true
										},
										"falseType": {
											"type": "conditional",
											"checkType": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											"extendsType": {
												"type": "intrinsic",
												"name": "object"
											},
											"trueType": {
												"type": "mapped",
												"parameter": "K",
												"parameterType": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"target": -1,
														"name": "T",
														"refersToTypeParameter": true
													}
												},
												"templateType": {
													"type": "conditional",
													"checkType": {
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"target": -1,
															"name": "K",
															"refersToTypeParameter": true
														},
														"objectType": {
															"type": "reference",
															"target": -1,
															"name": "T",
															"refersToTypeParameter": true
														}
													},
													"extendsType": {
														"type": "reference",
														"target": 137,
														"typeArguments": [
															{
																"type": "inferred",
																"name": "U"
															}
														],
														"name": "WorkflowData",
														"package": "@medusajs/workflows-sdk"
													},
													"trueType": {
														"type": "reference",
														"target": -1,
														"name": "U",
														"refersToTypeParameter": true
													},
													"falseType": {
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"target": -1,
															"name": "K",
															"refersToTypeParameter": true
														},
														"objectType": {
															"type": "reference",
															"target": -1,
															"name": "T",
															"refersToTypeParameter": true
														}
													}
												}
											},
											"falseType": {
												"type": "reflection",
												"declaration": {
													"id": 219,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/workflows-sdk/src/utils/composer/transform.ts",
															"line": 10,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/transform.ts#L10"
														}
													]
												}
											}
										}
									}
								},
								{
									"id": 220,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 165,
										"name": "StepExecutionContext",
										"package": "@medusajs/workflows-sdk"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": -1,
										"name": "U",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "U",
												"refersToTypeParameter": true
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							}
						}
					]
				}
			}
		},
		{
			"id": 564,
			"name": "InternalModuleDeclaration",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
					"line": 17,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 565,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 572,
							"name": "alias",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If multiple modules are registered with the same key, the alias can be used to differentiate them"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 27,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 569,
							"name": "definition",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 21,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 386,
								"name": "ModuleDefinition",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 568,
							"name": "dependencies",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 20,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 573,
							"name": "main",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If the module is the main module for the key when multiple ones are registered"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 31,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 571,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 23,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 191,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 570,
							"name": "resolve",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 22,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 567,
							"name": "resources",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 19,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 685,
								"name": "MODULE_RESOURCE_TYPE",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 566,
							"name": "scope",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 18,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 684,
								"name": "MODULE_SCOPE.INTERNAL",
								"package": "@medusajs/types"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								572,
								569,
								568,
								573,
								571,
								570,
								567,
								566
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/types/dist/modules-sdk/index.d.ts",
							"line": 17,
							"character": 40
						}
					]
				}
			}
		},
		{
			"id": 177,
			"name": "InvokeFn",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/create-step.ts",
					"line": 28,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-step.ts#L28"
				}
			],
			"typeParameters": [
				{
					"id": 182,
					"name": "TInput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the input that the function expects."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 183,
					"name": "TOutput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the output that the function returns."
							}
						]
					}
				},
				{
					"id": 184,
					"name": "TCompensateInput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the input that the compensation function expects."
							}
						]
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 178,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/create-step.ts",
							"line": 28,
							"character": 66,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-step.ts#L28"
						}
					],
					"signatures": [
						{
							"id": 179,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of invocation function passed to a step."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The expected output based on the type parameter "
											},
											{
												"kind": "code",
												"text": "`TOutput`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 180,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "mapped",
										"parameter": "Key",
										"parameterType": {
											"type": "typeOperator",
											"operator": "keyof",
											"target": {
												"type": "reference",
												"target": -1,
												"name": "TInput",
												"refersToTypeParameter": true
											}
										},
										"templateType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"target": -1,
												"name": "Key",
												"refersToTypeParameter": true
											},
											"objectType": {
												"type": "reference",
												"target": -1,
												"name": "TInput",
												"refersToTypeParameter": true
											}
										}
									}
								},
								{
									"id": 181,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 165,
										"name": "StepExecutionContext",
										"package": "@medusajs/workflows-sdk"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"target": 40,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "TOutput",
												"refersToTypeParameter": true
											},
											{
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": -1,
													"name": "TCompensateInput",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "intrinsic",
													"name": "undefined"
												},
												"trueType": {
													"type": "reference",
													"target": -1,
													"name": "TOutput",
													"refersToTypeParameter": true
												},
												"falseType": {
													"type": "reference",
													"target": -1,
													"name": "TCompensateInput",
													"refersToTypeParameter": true
												}
											}
										],
										"name": "StepResponse",
										"package": "@medusajs/workflows-sdk"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "void"
													},
													{
														"type": "reference",
														"target": 40,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "TOutput",
																"refersToTypeParameter": true
															},
															{
																"type": "conditional",
																"checkType": {
																	"type": "reference",
																	"target": -1,
																	"name": "TCompensateInput",
																	"refersToTypeParameter": true
																},
																"extendsType": {
																	"type": "intrinsic",
																	"name": "undefined"
																},
																"trueType": {
																	"type": "reference",
																	"target": -1,
																	"name": "TOutput",
																	"refersToTypeParameter": true
																},
																"falseType": {
																	"type": "reference",
																	"target": -1,
																	"name": "TCompensateInput",
																	"refersToTypeParameter": true
																}
															}
														],
														"name": "StepResponse",
														"package": "@medusajs/workflows-sdk"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							}
						}
					]
				}
			}
		},
		{
			"id": 1416,
			"name": "IteratorResult",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
					"line": 39,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 1417,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 1418,
					"name": "TReturn",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"default": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": 1439,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						],
						"name": "IteratorYieldResult",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": 1443,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "TReturn",
								"refersToTypeParameter": true
							}
						],
						"name": "IteratorReturnResult",
						"package": "typescript"
					}
				]
			}
		},
		{
			"id": 674,
			"name": "JoinerRelationship",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/dist/joiner/index.d.ts",
					"line": 1,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 675,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 676,
							"name": "alias",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/joiner/index.d.ts",
									"line": 2,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 683,
							"name": "args",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Extra arguments to pass to the remoteFetchData callback"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/dist/joiner/index.d.ts",
									"line": 22,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 191,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 677,
							"name": "foreignKey",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/joiner/index.d.ts",
									"line": 3,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 681,
							"name": "inverse",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "In an inverted relationship the foreign key is on the other service and the primary key is on the current service"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/dist/joiner/index.d.ts",
									"line": 14,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 680,
							"name": "isInternalService",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If true, the relationship is an internal service from the medusa core\nTODO: Remove when there are no more \"internal\" services"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/dist/joiner/index.d.ts",
									"line": 10,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 682,
							"name": "isList",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Force the relationship to return a list"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/dist/joiner/index.d.ts",
									"line": 18,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 678,
							"name": "primaryKey",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/joiner/index.d.ts",
									"line": 4,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 679,
							"name": "serviceName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/joiner/index.d.ts",
									"line": 5,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								676,
								683,
								677,
								681,
								680,
								682,
								678,
								679
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/types/dist/joiner/index.d.ts",
							"line": 1,
							"character": 33
						}
					]
				}
			}
		},
		{
			"id": 323,
			"name": "MedusaContainer",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/dist/common/medusa-container.d.ts",
					"line": 2,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/awilix/lib/container.d.ts",
							"qualifiedName": "AwilixContainer"
						},
						"name": "AwilixContainer",
						"package": "awilix"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 324,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 331,
									"name": "createScope",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/types/dist/common/medusa-container.d.ts",
											"line": 4,
											"character": 4
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 332,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/types/dist/common/medusa-container.d.ts",
													"line": 4,
													"character": 17
												}
											],
											"signatures": [
												{
													"id": 333,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 323,
														"name": "MedusaContainer",
														"package": "@medusajs/types"
													}
												}
											]
										}
									}
								},
								{
									"id": 325,
									"name": "registerAdd",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/types/dist/common/medusa-container.d.ts",
											"line": 3,
											"character": 4
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 326,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/types/dist/common/medusa-container.d.ts",
													"line": 3,
													"character": 17
												}
											],
											"signatures": [
												{
													"id": 327,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"typeParameter": [
														{
															"id": 330,
															"name": "T",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {}
														}
													],
													"parameters": [
														{
															"id": 328,
															"name": "name",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 329,
															"name": "registration",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "reference",
														"target": 323,
														"name": "MedusaContainer",
														"package": "@medusajs/types"
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										331,
										325
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/types/dist/common/medusa-container.d.ts",
									"line": 2,
									"character": 48
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 386,
			"name": "ModuleDefinition",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
					"line": 59,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 387,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 392,
							"name": "canOverride",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "property will be removed in future versions"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 67,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 397,
							"name": "defaultModuleDeclaration",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 75,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": 564,
										"name": "InternalModuleDeclaration",
										"package": "@medusajs/types"
									},
									{
										"type": "reference",
										"target": 574,
										"name": "ExternalModuleDeclaration",
										"package": "@medusajs/types"
									}
								]
							}
						},
						{
							"id": 390,
							"name": "defaultPackage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 62,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "literal",
										"value": false
									}
								]
							}
						},
						{
							"id": 396,
							"name": "dependencies",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 74,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 395,
							"name": "isLegacy",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 73,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 394,
							"name": "isQueryable",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 72,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 393,
							"name": "isRequired",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "property will be removed in future versions"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 71,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 388,
							"name": "key",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 60,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 391,
							"name": "label",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 63,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 389,
							"name": "registrationName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 61,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								392,
								397,
								390,
								396,
								395,
								394,
								393,
								388,
								391,
								389
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/types/dist/modules-sdk/index.d.ts",
							"line": 59,
							"character": 31
						}
					]
				}
			}
		},
		{
			"id": 359,
			"name": "ModuleJoinerConfig",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
					"line": 104,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": 398,
						"typeArguments": [
							{
								"type": "reference",
								"target": 546,
								"name": "JoinerServiceConfig",
								"package": "@medusajs/types"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "serviceName"
									},
									{
										"type": "literal",
										"value": "primaryKeys"
									},
									{
										"type": "literal",
										"value": "relationships"
									},
									{
										"type": "literal",
										"value": "extends"
									}
								]
							}
						],
						"name": "Omit",
						"package": "typescript"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 360,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 376,
									"name": "databaseConfig",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 132,
											"character": 4
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 377,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 380,
													"name": "extraFields",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "packages/types/dist/modules-sdk/index.d.ts",
															"line": 141,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"target": 191,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 381,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 383,
																			"name": "defaultValue",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																					"line": 143,
																					"character": 12
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 384,
																			"name": "nullable",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																					"line": 144,
																					"character": 12
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 385,
																			"name": "options",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"summary": [
																					{
																						"kind": "text",
																						"text": "Mikro-orm options for the column"
																					}
																				]
																			},
																			"sources": [
																				{
																					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																					"line": 148,
																					"character": 12
																				}
																			],
																			"type": {
																				"type": "reference",
																				"target": 191,
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "string"
																					},
																					{
																						"type": "intrinsic",
																						"name": "unknown"
																					}
																				],
																				"name": "Record",
																				"package": "typescript"
																			}
																		},
																		{
																			"id": 382,
																			"name": "type",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																					"line": 142,
																					"character": 12
																				}
																			],
																			"type": {
																				"type": "union",
																				"types": [
																					{
																						"type": "literal",
																						"value": "date"
																					},
																					{
																						"type": "literal",
																						"value": "time"
																					},
																					{
																						"type": "literal",
																						"value": "datetime"
																					},
																					{
																						"type": "literal",
																						"value": "bigint"
																					},
																					{
																						"type": "literal",
																						"value": "blob"
																					},
																					{
																						"type": "literal",
																						"value": "uint8array"
																					},
																					{
																						"type": "literal",
																						"value": "array"
																					},
																					{
																						"type": "literal",
																						"value": "enumArray"
																					},
																					{
																						"type": "literal",
																						"value": "enum"
																					},
																					{
																						"type": "literal",
																						"value": "json"
																					},
																					{
																						"type": "literal",
																						"value": "integer"
																					},
																					{
																						"type": "literal",
																						"value": "smallint"
																					},
																					{
																						"type": "literal",
																						"value": "tinyint"
																					},
																					{
																						"type": "literal",
																						"value": "mediumint"
																					},
																					{
																						"type": "literal",
																						"value": "float"
																					},
																					{
																						"type": "literal",
																						"value": "double"
																					},
																					{
																						"type": "literal",
																						"value": "boolean"
																					},
																					{
																						"type": "literal",
																						"value": "decimal"
																					},
																					{
																						"type": "literal",
																						"value": "string"
																					},
																					{
																						"type": "literal",
																						"value": "uuid"
																					},
																					{
																						"type": "literal",
																						"value": "text"
																					}
																				]
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [
																				383,
																				384,
																				385,
																				382
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																			"line": 141,
																			"character": 37
																		}
																	]
																}
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												},
												{
													"id": 379,
													"name": "idPrefix",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Prefix for the id column. If not provided it is \"link\""
															}
														]
													},
													"sources": [
														{
															"fileName": "packages/types/dist/modules-sdk/index.d.ts",
															"line": 140,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 378,
													"name": "tableName",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Name of the pivot table. If not provided it is auto generated"
															}
														]
													},
													"sources": [
														{
															"fileName": "packages/types/dist/modules-sdk/index.d.ts",
															"line": 136,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														380,
														379,
														378
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/types/dist/modules-sdk/index.d.ts",
													"line": 132,
													"character": 21
												}
											]
										}
									}
								},
								{
									"id": 363,
									"name": "extends",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 110,
											"character": 4
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 364,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"children": [
													{
														"id": 366,
														"name": "fieldAlias",
														"variant": "declaration",
														"kind": 1024,
														"flags": {
															"isOptional": true
														},
														"sources": [
															{
																"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																"line": 112,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"target": 191,
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "union",
																	"types": [
																		{
																			"type": "intrinsic",
																			"name": "string"
																		},
																		{
																			"type": "reflection",
																			"declaration": {
																				"id": 367,
																				"name": "__type",
																				"variant": "declaration",
																				"kind": 65536,
																				"flags": {},
																				"children": [
																					{
																						"id": 369,
																						"name": "forwardArgumentsOnPath",
																						"variant": "declaration",
																						"kind": 1024,
																						"flags": {},
																						"sources": [
																							{
																								"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																								"line": 114,
																								"character": 12
																							}
																						],
																						"type": {
																							"type": "array",
																							"elementType": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					},
																					{
																						"id": 368,
																						"name": "path",
																						"variant": "declaration",
																						"kind": 1024,
																						"flags": {},
																						"sources": [
																							{
																								"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																								"line": 113,
																								"character": 12
																							}
																						],
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"groups": [
																					{
																						"title": "Properties",
																						"children": [
																							369,
																							368
																						]
																					}
																				],
																				"sources": [
																					{
																						"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																						"line": 112,
																						"character": 45
																					}
																				]
																			}
																		}
																	]
																}
															],
															"name": "Record",
															"package": "typescript"
														}
													},
													{
														"id": 370,
														"name": "relationship",
														"variant": "declaration",
														"kind": 1024,
														"flags": {},
														"sources": [
															{
																"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																"line": 116,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"target": 560,
															"name": "ModuleJoinerRelationship",
															"package": "@medusajs/types"
														}
													},
													{
														"id": 365,
														"name": "serviceName",
														"variant": "declaration",
														"kind": 1024,
														"flags": {},
														"sources": [
															{
																"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																"line": 111,
																"character": 8
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"children": [
															366,
															370,
															365
														]
													}
												],
												"sources": [
													{
														"fileName": "packages/types/dist/modules-sdk/index.d.ts",
														"line": 110,
														"character": 14
													}
												]
											}
										}
									}
								},
								{
									"id": 373,
									"name": "isLink",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If the module is a link module"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 123,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 375,
									"name": "isReadOnlyLink",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true it expands a RemoteQuery property but doesn't create a pivot table"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 131,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 374,
									"name": "linkableKeys",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Keys that can be used to link to other modules. e.g { product_id: \"Product\" } \"Product\" being the entity it refers to"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 127,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": 191,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 372,
									"name": "primaryKeys",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 119,
											"character": 4
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 362,
									"name": "relationships",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 109,
											"character": 4
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 560,
											"name": "ModuleJoinerRelationship",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 361,
									"name": "schema",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "GraphQL schema for the all module's available entities and fields"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 108,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 371,
									"name": "serviceName",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 118,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										376,
										363,
										373,
										375,
										374,
										372,
										362,
										361,
										371
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 104,
									"character": 122
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 560,
			"name": "ModuleJoinerRelationship",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/types/dist/modules-sdk/index.d.ts",
					"line": 152,
					"character": 20
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": 674,
						"name": "JoinerRelationship",
						"package": "@medusajs/types"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 561,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 563,
									"name": "deleteCascade",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true, the link joiner will cascade deleting the relationship"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 160,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 562,
									"name": "isInternalService",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true, the relationship is an internal service from the medusa core TODO: Remove when there are no more \"internal\" services"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/types/dist/modules-sdk/index.d.ts",
											"line": 156,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										563,
										562
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/types/dist/modules-sdk/index.d.ts",
									"line": 152,
									"character": 68
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 398,
			"name": "Omit",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Construct a type with the properties of T except for those in type K."
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1616,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 399,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 400,
					"name": "K",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			],
			"type": {
				"type": "reference",
				"target": 586,
				"typeArguments": [
					{
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					},
					{
						"type": "reference",
						"target": 589,
						"typeArguments": [
							{
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"target": -1,
									"name": "T",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "reference",
								"target": -1,
								"name": "K",
								"refersToTypeParameter": true
							}
						],
						"name": "Exclude",
						"package": "typescript"
					}
				],
				"name": "Pick",
				"package": "typescript"
			}
		},
		{
			"id": 523,
			"name": "Partial",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Make all properties in T optional"
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1571,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 524,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "P",
				"parameterType": {
					"type": "typeOperator",
					"operator": "keyof",
					"target": {
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					}
				},
				"templateType": {
					"type": "indexedAccess",
					"indexType": {
						"type": "reference",
						"target": -1,
						"name": "P",
						"refersToTypeParameter": true
					},
					"objectType": {
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					}
				},
				"optionalModifier": "+"
			}
		},
		{
			"id": 586,
			"name": "Pick",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "From T, pick a set of properties whose keys are in the union K"
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1592,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 587,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 588,
					"name": "K",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reference",
							"target": -1,
							"name": "T",
							"refersToTypeParameter": true
						}
					}
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "P",
				"parameterType": {
					"type": "reference",
					"target": -1,
					"name": "K",
					"refersToTypeParameter": true
				},
				"templateType": {
					"type": "indexedAccess",
					"indexType": {
						"type": "reference",
						"target": -1,
						"name": "P",
						"refersToTypeParameter": true
					},
					"objectType": {
						"type": "reference",
						"target": -1,
						"name": "T",
						"refersToTypeParameter": true
					}
				}
			}
		},
		{
			"id": 191,
			"name": "Record",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Construct a type with a set of properties K of type T"
					}
				]
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1599,
					"character": 5
				}
			],
			"typeParameters": [
				{
					"id": 192,
					"name": "K",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 193,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "P",
				"parameterType": {
					"type": "reference",
					"target": -1,
					"name": "K",
					"refersToTypeParameter": true
				},
				"templateType": {
					"type": "reference",
					"target": -1,
					"name": "T",
					"refersToTypeParameter": true
				}
			}
		},
		{
			"id": 194,
			"name": "ReturnWorkflow",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An exported workflow, which is the type of a workflow constructed by the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "createWorkflow",
						"target": 9,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " function. The exported workflow can be invoked to create\nan executable workflow, optionally within a specified container. So, to execute the workflow, you must invoke the exported workflow, then run the\n"
					},
					{
						"kind": "code",
						"text": "`run`"
					},
					{
						"kind": "text",
						"text": " method of the exported workflow."
					}
				],
				"blockTags": [
					{
						"tag": "@example",
						"content": [
							{
								"kind": "text",
								"text": "To execute a workflow:\n\n"
							},
							{
								"kind": "code",
								"text": "```ts\nmyWorkflow()\n  .run({\n    input: {\n      name: \"John\"\n    }\n  })\n  .then(({ result }) => {\n    console.log(result)\n  })\n```"
							},
							{
								"kind": "text",
								"text": "\n\nTo specify the container of the workflow, you can pass it as an argument to the call of the exported workflow. This is necessary when executing the workflow\nwithin a Medusa resource such as an API Route or a Subscriber.\n\nFor example:\n\n"
							},
							{
								"kind": "code",
								"text": "```ts\nimport type {\n  MedusaRequest,\n  MedusaResponse\n} from \"@medusajs/medusa\";\nimport myWorkflow from \"../../../workflows/hello-world\";\n\nexport async function GET(\n  req: MedusaRequest,\n  res: MedusaResponse\n) {\n  const { result } = await myWorkflow(req.scope)\n    .run({\n      input: {\n        name: req.query.name as string\n      }\n    })\n\n  res.send(result)\n}\n```"
							}
						]
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
					"line": 70,
					"character": 5,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L70"
				}
			],
			"typeParameters": [
				{
					"id": 212,
					"name": "TData",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				},
				{
					"id": 213,
					"name": "TResult",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				},
				{
					"id": 214,
					"name": "THooks",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 191,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Function"
								},
								"name": "Function",
								"package": "typescript"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 195,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
									"line": 70,
									"character": 79,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L70"
								}
							],
							"signatures": [
								{
									"id": 196,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
											"line": 71,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L71"
										}
									],
									"typeParameter": [
										{
											"id": 197,
											"name": "TDataOverride",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"default": {
												"type": "intrinsic",
												"name": "undefined"
											}
										},
										{
											"id": 198,
											"name": "TResultOverride",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"default": {
												"type": "intrinsic",
												"name": "undefined"
											}
										}
									],
									"parameters": [
										{
											"id": 199,
											"name": "container",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 323,
														"name": "MedusaContainer",
														"package": "@medusajs/types"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reflection",
															"declaration": {
																"id": 200,
																"name": "__type",
																"variant": "declaration",
																"kind": 65536,
																"flags": {},
																"children": [
																	{
																		"id": 202,
																		"name": "__definition",
																		"variant": "declaration",
																		"kind": 1024,
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																				"line": 92,
																				"character": 4
																			}
																		],
																		"type": {
																			"type": "reference",
																			"target": 386,
																			"name": "ModuleDefinition",
																			"package": "@medusajs/types"
																		}
																	},
																	{
																		"id": 201,
																		"name": "__joinerConfig",
																		"variant": "declaration",
																		"kind": 1024,
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																				"line": 91,
																				"character": 4
																			}
																		],
																		"type": {
																			"type": "reference",
																			"target": 359,
																			"name": "ModuleJoinerConfig",
																			"package": "@medusajs/types"
																		}
																	}
																],
																"groups": [
																	{
																		"title": "Properties",
																		"children": [
																			202,
																			201
																		]
																	}
																],
																"sources": [
																	{
																		"fileName": "packages/types/dist/modules-sdk/index.d.ts",
																		"line": 90,
																		"character": 37
																	}
																]
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"target": 398,
												"typeArguments": [
													{
														"type": "reference",
														"target": 401,
														"name": "LocalWorkflow",
														"package": "@medusajs/orchestration"
													},
													{
														"type": "literal",
														"value": "run"
													}
												],
												"name": "Omit",
												"package": "typescript"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 203,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 204,
															"name": "run",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
																	"line": 74,
																	"character": 4,
																	"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L74"
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 205,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
																			"line": 74,
																			"character": 9,
																			"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L74"
																		}
																	],
																	"signatures": [
																		{
																			"id": 206,
																			"name": "__type",
																			"variant": "signature",
																			"kind": 4096,
																			"flags": {},
																			"parameters": [
																				{
																					"id": 207,
																					"name": "args",
																					"variant": "param",
																					"kind": 32768,
																					"flags": {
																						"isOptional": true
																					},
																					"type": {
																						"type": "reference",
																						"target": 491,
																						"typeArguments": [
																							{
																								"type": "conditional",
																								"checkType": {
																									"type": "reference",
																									"target": -1,
																									"name": "TDataOverride",
																									"refersToTypeParameter": true
																								},
																								"extendsType": {
																									"type": "intrinsic",
																									"name": "undefined"
																								},
																								"trueType": {
																									"type": "reference",
																									"target": -1,
																									"name": "TData",
																									"refersToTypeParameter": true
																								},
																								"falseType": {
																									"type": "reference",
																									"target": -1,
																									"name": "TDataOverride",
																									"refersToTypeParameter": true
																								}
																							}
																						],
																						"name": "FlowRunOptions",
																						"package": "@medusajs/workflows-sdk"
																					}
																				}
																			],
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																					"qualifiedName": "Promise"
																				},
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": 485,
																						"typeArguments": [
																							{
																								"type": "conditional",
																								"checkType": {
																									"type": "reference",
																									"target": -1,
																									"name": "TResultOverride",
																									"refersToTypeParameter": true
																								},
																								"extendsType": {
																									"type": "intrinsic",
																									"name": "undefined"
																								},
																								"trueType": {
																									"type": "reference",
																									"target": -1,
																									"name": "TResult",
																									"refersToTypeParameter": true
																								},
																								"falseType": {
																									"type": "reference",
																									"target": -1,
																									"name": "TResultOverride",
																									"refersToTypeParameter": true
																								}
																							}
																						],
																						"name": "WorkflowResult",
																						"package": "@medusajs/workflows-sdk"
																					}
																				],
																				"name": "Promise",
																				"package": "typescript"
																			}
																		}
																	]
																}
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																204
															]
														}
													],
													"sources": [
														{
															"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
															"line": 73,
															"character": 34,
															"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L73"
														}
													]
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"type": "reference",
						"target": -1,
						"name": "THooks",
						"refersToTypeParameter": true
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 208,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 209,
									"name": "getName",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
											"line": 85,
											"character": 4,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L85"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 210,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
													"line": 85,
													"character": 13,
													"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L85"
												}
											],
											"signatures": [
												{
													"id": 211,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										209
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
									"line": 84,
									"character": 13,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L84"
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 126,
			"name": "StepFunction",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A step function to be used in a workflow."
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
					"line": 24,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L24"
				}
			],
			"typeParameters": [
				{
					"id": 130,
					"name": "TInput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the input of the step."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "object"
					},
					"default": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 131,
					"name": "TOutput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the output of the step."
							}
						]
					},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 127,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 24,
									"character": 78,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L24"
								}
							],
							"signatures": [
								{
									"id": 128,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
											"line": 25,
											"character": 2,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L25"
										}
									],
									"parameters": [
										{
											"id": 129,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "mapped",
												"parameter": "K",
												"parameterType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "symbol"
														}
													]
												},
												"templateType": {
													"type": "reference",
													"target": 137,
													"typeArguments": [
														{
															"type": "indexedAccess",
															"indexType": {
																"type": "reference",
																"target": -1,
																"name": "K",
																"refersToTypeParameter": true
															},
															"objectType": {
																"type": "reference",
																"target": -1,
																"name": "TInput",
																"refersToTypeParameter": true
															}
														}
													],
													"name": "WorkflowData",
													"package": "@medusajs/workflows-sdk"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 137,
										"typeArguments": [
											{
												"type": "mapped",
												"parameter": "K",
												"parameterType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "symbol"
														}
													]
												},
												"templateType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": -1,
														"name": "K",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": -1,
														"name": "TOutput",
														"refersToTypeParameter": true
													}
												}
											}
										],
										"name": "WorkflowData",
										"package": "@medusajs/workflows-sdk"
									}
								}
							]
						}
					},
					{
						"type": "reference",
						"target": 132,
						"typeArguments": [
							{
								"type": "mapped",
								"parameter": "K",
								"parameterType": {
									"type": "typeOperator",
									"operator": "keyof",
									"target": {
										"type": "reference",
										"target": -1,
										"name": "TOutput",
										"refersToTypeParameter": true
									}
								},
								"templateType": {
									"type": "indexedAccess",
									"indexType": {
										"type": "reference",
										"target": -1,
										"name": "K",
										"refersToTypeParameter": true
									},
									"objectType": {
										"type": "reference",
										"target": -1,
										"name": "TOutput",
										"refersToTypeParameter": true
									}
								}
							}
						],
						"name": "WorkflowDataProperties",
						"package": "@medusajs/workflows-sdk"
					}
				]
			}
		},
		{
			"id": 121,
			"name": "StepFunctionResult",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
					"line": 9,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L9"
				}
			],
			"typeParameters": [
				{
					"id": 125,
					"name": "TOutput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						]
					},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 122,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
							"line": 10,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L10"
						}
					],
					"signatures": [
						{
							"id": 123,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 124,
									"name": "this",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 139,
										"name": "CreateWorkflowComposerContext",
										"package": "@medusajs/workflows-sdk"
									}
								}
							],
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": -1,
									"name": "TOutput",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "tuple"
								},
								"trueType": {
									"type": "tuple",
									"elements": [
										{
											"type": "rest",
											"elementType": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 137,
													"typeArguments": [
														{
															"type": "mapped",
															"parameter": "K",
															"parameterType": {
																"type": "typeOperator",
																"operator": "keyof",
																"target": {
																	"type": "reference",
																	"target": -1,
																	"name": "TOutput",
																	"refersToTypeParameter": true
																}
															},
															"templateType": {
																"type": "indexedAccess",
																"indexType": {
																	"type": "reference",
																	"target": -1,
																	"name": "K",
																	"refersToTypeParameter": true
																},
																"objectType": {
																	"type": "indexedAccess",
																	"indexType": {
																		"type": "intrinsic",
																		"name": "number"
																	},
																	"objectType": {
																		"type": "reference",
																		"target": -1,
																		"name": "TOutput",
																		"refersToTypeParameter": true
																	}
																}
															}
														}
													],
													"name": "WorkflowData",
													"package": "@medusajs/workflows-sdk"
												}
											}
										}
									]
								},
								"falseType": {
									"type": "reference",
									"target": 137,
									"typeArguments": [
										{
											"type": "mapped",
											"parameter": "K",
											"parameterType": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": -1,
													"name": "TOutput",
													"refersToTypeParameter": true
												}
											},
											"templateType": {
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"target": -1,
													"name": "K",
													"refersToTypeParameter": true
												},
												"objectType": {
													"type": "reference",
													"target": -1,
													"name": "TOutput",
													"refersToTypeParameter": true
												}
											}
										}
									],
									"name": "WorkflowData",
									"package": "@medusajs/workflows-sdk"
								}
							}
						}
					]
				}
			}
		},
		{
			"id": 607,
			"name": "StepHandler",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
					"line": 5,
					"character": 5
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 608,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 610,
							"name": "compensate",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 7,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 525,
								"name": "WorkflowStepHandler",
								"package": "@medusajs/orchestration"
							}
						},
						{
							"id": 609,
							"name": "invoke",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
									"line": 6,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 525,
								"name": "WorkflowStepHandler",
								"package": "@medusajs/orchestration"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								610,
								609
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/local-workflow.d.ts",
							"line": 5,
							"character": 19
						}
					]
				}
			}
		},
		{
			"id": 877,
			"name": "TransactionFlow",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
					"line": 6,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 878,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 880,
							"name": "definition",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 8,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 498,
								"name": "TransactionStepsDefinition",
								"package": "@medusajs/orchestration"
							}
						},
						{
							"id": 882,
							"name": "hasFailedSteps",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 10,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 883,
							"name": "hasSkippedSteps",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 11,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 879,
							"name": "modelId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 7,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 884,
							"name": "state",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 12,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 889,
								"name": "TransactionState",
								"package": "@medusajs/orchestration"
							}
						},
						{
							"id": 885,
							"name": "steps",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 13,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 886,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
											"line": 13,
											"character": 11
										}
									],
									"indexSignature": {
										"id": 887,
										"name": "__index",
										"variant": "signature",
										"kind": 8192,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
												"line": 14,
												"character": 8
											}
										],
										"parameters": [
											{
												"id": 888,
												"name": "key",
												"variant": "param",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"target": 1315,
											"name": "TransactionStep",
											"package": "@medusajs/orchestration"
										}
									}
								}
							}
						},
						{
							"id": 881,
							"name": "transactionId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
									"line": 9,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								880,
								882,
								883,
								879,
								884,
								885,
								881
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
							"line": 6,
							"character": 30
						}
					]
				}
			}
		},
		{
			"id": 334,
			"name": "TransactionMetadata",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
					"line": 14,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 335,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 339,
							"name": "action",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 18,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 340,
							"name": "action_type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 19,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": 543,
								"name": "TransactionHandlerType",
								"package": "@medusajs/orchestration"
							}
						},
						{
							"id": 341,
							"name": "attempt",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 20,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 338,
							"name": "idempotency_key",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 17,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 336,
							"name": "model_id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 15,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 337,
							"name": "reply_to_topic",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 16,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 342,
							"name": "timestamp",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
									"line": 21,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								339,
								340,
								341,
								338,
								336,
								337,
								342
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/distributed-transaction.d.ts",
							"line": 14,
							"character": 34
						}
					]
				}
			}
		},
		{
			"id": 689,
			"name": "TransactionStepHandler",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 690,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/transaction-step.d.ts",
							"line": 3,
							"character": 37
						}
					],
					"signatures": [
						{
							"id": 691,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 692,
									"name": "actionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 693,
									"name": "handlerType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 543,
										"name": "TransactionHandlerType",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 694,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 899,
										"name": "TransactionPayload",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 695,
									"name": "transaction",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 611,
										"name": "DistributedTransaction",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			}
		},
		{
			"id": 498,
			"name": "TransactionStepsDefinition",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/orchestration/dist/transaction/types.d.ts",
					"line": 5,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 499,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 500,
							"name": "action",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/types.d.ts",
									"line": 6,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 506,
							"name": "async",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/types.d.ts",
									"line": 12,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 501,
							"name": "continueOnPermanentFailure",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/types.d.ts",
									"line": 7,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 503,
							"name": "maxRetries",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/types.d.ts",
									"line": 9,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 509,
							"name": "next",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/types.d.ts",
									"line": 15,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": 498,
										"name": "TransactionStepsDefinition",
										"package": "@medusajs/orchestration"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 498,
											"name": "TransactionStepsDefinition",
											"package": "@medusajs/orchestration"
										}
									}
								]
							}
						},
						{
							"id": 502,
							"name": "noCompensation",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/types.d.ts",
									"line": 8,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 507,
							"name": "noWait",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/types.d.ts",
									"line": 13,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 504,
							"name": "retryInterval",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/types.d.ts",
									"line": 10,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 508,
							"name": "saveResponse",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/types.d.ts",
									"line": 14,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 505,
							"name": "timeout",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/orchestration/dist/transaction/types.d.ts",
									"line": 11,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								500,
								506,
								501,
								503,
								509,
								502,
								507,
								504,
								508,
								505
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/orchestration/dist/transaction/types.d.ts",
							"line": 5,
							"character": 41
						}
					]
				}
			},
			"extendedBy": [
				{
					"type": "reference",
					"target": 510,
					"name": "InternalStep"
				}
			]
		},
		{
			"id": 137,
			"name": "WorkflowData",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This type is used to encapsulate the input or output type of all utils."
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
					"line": 42,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L42"
				}
			],
			"typeParameters": [
				{
					"id": 138,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of a step's input or result."
							}
						]
					},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"target": -1,
							"name": "T",
							"refersToTypeParameter": true
						},
						"extendsType": {
							"type": "intrinsic",
							"name": "object"
						},
						"trueType": {
							"type": "mapped",
							"parameter": "Key",
							"parameterType": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"target": -1,
									"name": "T",
									"refersToTypeParameter": true
								}
							},
							"templateType": {
								"type": "reference",
								"target": 137,
								"typeArguments": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"target": -1,
											"name": "Key",
											"refersToTypeParameter": true
										},
										"objectType": {
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									}
								],
								"name": "WorkflowData",
								"package": "@medusajs/workflows-sdk"
							}
						},
						"falseType": {
							"type": "reference",
							"target": 132,
							"typeArguments": [
								{
									"type": "reference",
									"target": -1,
									"name": "T",
									"refersToTypeParameter": true
								}
							],
							"name": "WorkflowDataProperties",
							"package": "@medusajs/workflows-sdk"
						}
					},
					{
						"type": "reference",
						"target": 132,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						],
						"name": "WorkflowDataProperties",
						"package": "@medusajs/workflows-sdk"
					}
				]
			}
		},
		{
			"id": 132,
			"name": "WorkflowDataProperties",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
					"line": 32,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L32"
				}
			],
			"typeParameters": [
				{
					"id": 136,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 133,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 135,
							"name": "__step__",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 34,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L34"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 134,
							"name": "__type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 33,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L33"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Symbol"
								},
								"name": "Symbol",
								"package": "typescript"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								135,
								134
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
							"line": 32,
							"character": 50,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L32"
						}
					]
				}
			}
		},
		{
			"id": 319,
			"name": "WorkflowHandler",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
					"line": 15,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"target": {
					"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
					"qualifiedName": "Map"
				},
				"typeArguments": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 320,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 322,
									"name": "compensate",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
											"line": 17,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": 525,
										"name": "WorkflowStepHandler",
										"package": "@medusajs/orchestration"
									}
								},
								{
									"id": 321,
									"name": "invoke",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
											"line": 16,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": 525,
										"name": "WorkflowStepHandler",
										"package": "@medusajs/orchestration"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										322,
										321
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
									"line": 15,
									"character": 42
								}
							]
						}
					}
				],
				"name": "Map",
				"package": "typescript"
			}
		},
		{
			"id": 485,
			"name": "WorkflowResult",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
					"line": 22,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L22"
				}
			],
			"typeParameters": [
				{
					"id": 490,
					"name": "TResult",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 486,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 487,
							"name": "errors",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
									"line": 23,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L23"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 662,
									"name": "TransactionStepError",
									"package": "@medusajs/orchestration"
								}
							}
						},
						{
							"id": 489,
							"name": "result",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
									"line": 25,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L25"
								}
							],
							"type": {
								"type": "reference",
								"target": -1,
								"name": "TResult",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 488,
							"name": "transaction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
									"line": 24,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L24"
								}
							],
							"type": {
								"type": "reference",
								"target": 611,
								"name": "DistributedTransaction",
								"package": "@medusajs/orchestration"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								487,
								489,
								488
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/helper/workflow-export.ts",
							"line": 22,
							"character": 48,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/helper/workflow-export.ts#L22"
						}
					]
				}
			}
		},
		{
			"id": 525,
			"name": "WorkflowStepHandler",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
					"line": 19,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 526,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
							"line": 19,
							"character": 34
						}
					],
					"signatures": [
						{
							"id": 527,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 528,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 529,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 536,
													"name": "compensate",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
															"line": 25,
															"character": 4
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 537,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
																	"line": 25,
																	"character": 16
																}
															],
															"indexSignature": {
																"id": 538,
																"name": "__index",
																"variant": "signature",
																"kind": 8192,
																"flags": {},
																"sources": [
																	{
																		"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
																		"line": 26,
																		"character": 8
																	}
																],
																"parameters": [
																	{
																		"id": 539,
																		"name": "actions",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "unknown"
																}
															}
														}
													}
												},
												{
													"id": 530,
													"name": "container",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
															"line": 20,
															"character": 4
														}
													],
													"type": {
														"type": "reference",
														"target": 323,
														"name": "MedusaContainer",
														"package": "@medusajs/types"
													}
												},
												{
													"id": 542,
													"name": "context",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
															"line": 30,
															"character": 4
														}
													],
													"type": {
														"type": "reference",
														"target": 343,
														"name": "Context",
														"package": "@medusajs/types"
													}
												},
												{
													"id": 532,
													"name": "invoke",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
															"line": 22,
															"character": 4
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 533,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
																	"line": 22,
																	"character": 12
																}
															],
															"indexSignature": {
																"id": 534,
																"name": "__index",
																"variant": "signature",
																"kind": 8192,
																"flags": {},
																"sources": [
																	{
																		"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
																		"line": 23,
																		"character": 8
																	}
																],
																"parameters": [
																	{
																		"id": 535,
																		"name": "actions",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "unknown"
																}
															}
														}
													}
												},
												{
													"id": 540,
													"name": "metadata",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
															"line": 28,
															"character": 4
														}
													],
													"type": {
														"type": "reference",
														"target": 334,
														"name": "TransactionMetadata",
														"package": "@medusajs/orchestration"
													}
												},
												{
													"id": 531,
													"name": "payload",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
															"line": 21,
															"character": 4
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												},
												{
													"id": 541,
													"name": "transaction",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
															"line": 29,
															"character": 4
														}
													],
													"type": {
														"type": "reference",
														"target": 611,
														"name": "DistributedTransaction",
														"package": "@medusajs/orchestration"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														536,
														530,
														542,
														532,
														540,
														531,
														541
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/orchestration/dist/workflow/workflow-manager.d.ts",
													"line": 19,
													"character": 41
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						}
					]
				}
			}
		},
		{
			"id": 169,
			"name": "WorkflowTransactionContext",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
					"line": 85,
					"character": 12,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L85"
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": 165,
						"name": "StepExecutionContext",
						"package": "@medusajs/workflows-sdk"
					},
					{
						"type": "reference",
						"target": 350,
						"name": "OriginalWorkflowTransactionContext",
						"package": "@medusajs/orchestration",
						"qualifiedName": "TransactionContext"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 170,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 171,
									"name": "invoke",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
											"line": 87,
											"character": 4,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L87"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 172,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
													"line": 87,
													"character": 12,
													"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L87"
												}
											],
											"indexSignature": {
												"id": 173,
												"name": "__index",
												"variant": "signature",
												"kind": 8192,
												"flags": {},
												"sources": [
													{
														"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
														"line": 87,
														"character": 14,
														"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L87"
													}
												],
												"parameters": [
													{
														"id": 174,
														"name": "key",
														"variant": "param",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reflection",
													"declaration": {
														"id": 175,
														"name": "__type",
														"variant": "declaration",
														"kind": 65536,
														"flags": {},
														"children": [
															{
																"id": 176,
																"name": "output",
																"variant": "declaration",
																"kind": 1024,
																"flags": {},
																"sources": [
																	{
																		"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
																		"line": 87,
																		"character": 31,
																		"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L87"
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														],
														"groups": [
															{
																"title": "Properties",
																"children": [
																	176
																]
															}
														],
														"sources": [
															{
																"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
																"line": 87,
																"character": 29,
																"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L87"
															}
														]
													}
												}
											}
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										171
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/workflows-sdk/src/utils/composer/type.ts",
									"line": 86,
									"character": 39,
									"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/type.ts#L86"
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 33,
			"name": "SymbolInputReference",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
					"line": 4,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/symbol.ts#L4"
				}
			],
			"type": {
				"type": "query",
				"queryType": {
					"type": "reference",
					"target": 33,
					"name": "SymbolInputReference",
					"package": "@medusajs/workflows-sdk"
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 32,
			"name": "SymbolMedusaWorkflowComposerContext",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
					"line": 1,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/symbol.ts#L1"
				}
			],
			"type": {
				"type": "query",
				"queryType": {
					"type": "reference",
					"target": 32,
					"name": "SymbolMedusaWorkflowComposerContext",
					"package": "@medusajs/workflows-sdk"
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 35,
			"name": "SymbolWorkflowHook",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
					"line": 6,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/symbol.ts#L6"
				}
			],
			"type": {
				"type": "query",
				"queryType": {
					"type": "reference",
					"target": 35,
					"name": "SymbolWorkflowHook",
					"package": "@medusajs/workflows-sdk"
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 34,
			"name": "SymbolWorkflowStep",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
					"line": 5,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/symbol.ts#L5"
				}
			],
			"type": {
				"type": "query",
				"queryType": {
					"type": "reference",
					"target": 34,
					"name": "SymbolWorkflowStep",
					"package": "@medusajs/workflows-sdk"
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 38,
			"name": "SymbolWorkflowStepBind",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
					"line": 9,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/symbol.ts#L9"
				}
			],
			"type": {
				"type": "query",
				"queryType": {
					"type": "reference",
					"target": 38,
					"name": "SymbolWorkflowStepBind",
					"package": "@medusajs/workflows-sdk"
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 37,
			"name": "SymbolWorkflowStepResponse",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
					"line": 8,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/symbol.ts#L8"
				}
			],
			"type": {
				"type": "query",
				"queryType": {
					"type": "reference",
					"target": 37,
					"name": "SymbolWorkflowStepResponse",
					"package": "@medusajs/workflows-sdk"
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 39,
			"name": "SymbolWorkflowStepTransformer",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
					"line": 10,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/symbol.ts#L10"
				}
			],
			"type": {
				"type": "query",
				"queryType": {
					"type": "reference",
					"target": 39,
					"name": "SymbolWorkflowStepTransformer",
					"package": "@medusajs/workflows-sdk"
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 36,
			"name": "SymbolWorkflowWorkflowData",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
					"line": 7,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/helpers/symbol.ts#L7"
				}
			],
			"type": {
				"type": "query",
				"queryType": {
					"type": "reference",
					"target": 36,
					"name": "SymbolWorkflowWorkflowData",
					"package": "@medusajs/workflows-sdk"
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 1308,
			"name": "Error",
			"variant": "declaration",
			"kind": 64,
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1066,
					"character": 10
				},
				{
					"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
					"line": 1078,
					"character": 12
				}
			],
			"signatures": [
				{
					"id": 1309,
					"name": "Error",
					"variant": "signature",
					"kind": 4096,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "docs-util/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1074,
							"character": 4
						}
					],
					"parameters": [
						{
							"id": 1310,
							"name": "message",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 1308,
						"name": "Error",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 1,
			"name": "createStep",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/create-step.ts",
					"line": 233,
					"character": 16,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-step.ts#L233"
				}
			],
			"signatures": [
				{
					"id": 2,
					"name": "createStep",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This function creates a "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "StepFunction",
								"target": 126,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " that can be used as a step in a workflow constructed by the "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "createWorkflow",
								"target": 9
							},
							{
								"kind": "text",
								"text": " function."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A step function to be used in a workflow."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport {\n  createStep,\n  StepResponse,\n  StepExecutionContext,\n  WorkflowData\n} from \"@medusajs/workflows-sdk\"\n\ninterface CreateProductInput {\n  title: string\n}\n\nexport const createProductStep = createStep(\n  \"createProductStep\",\n  async function (\n    input: CreateProductInput,\n    context\n  ) {\n    const productService = context.container.resolve(\n      \"productService\"\n    )\n    const product = await productService.create(input)\n    return new StepResponse({\n      product\n    }, {\n      product_id: product.id\n    })\n  },\n  async function (\n    input,\n    context\n  ) {\n    const productService = context.container.resolve(\n      \"productService\"\n    )\n    await productService.delete(input.product_id)\n  }\n)\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/create-step.ts",
							"line": 233,
							"character": 16,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-step.ts#L233"
						}
					],
					"typeParameter": [
						{
							"id": 3,
							"name": "TInvokeInput",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the expected input parameter to the invocation function."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 4,
							"name": "TInvokeResultOutput",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the expected output parameter of the invocation function."
									}
								]
							}
						},
						{
							"id": 5,
							"name": "TInvokeResultCompensateInput",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the expected input parameter to the compensation function."
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 6,
							"name": "name",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of the step."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 7,
							"name": "invokeFn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An invocation function that will be executed when the workflow is executed. The function must return an instance of "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "StepResponse",
										"target": 40,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": ". The constructor of "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "StepResponse",
										"target": 40,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": "\naccepts the output of the step as a first argument, and optionally as a second argument the data to be passed to the compensation function as a parameter."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 177,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TInvokeInput",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": -1,
										"name": "TInvokeResultOutput",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": -1,
										"name": "TInvokeResultCompensateInput",
										"refersToTypeParameter": true
									}
								],
								"name": "InvokeFn",
								"package": "@medusajs/workflows-sdk"
							}
						},
						{
							"id": 8,
							"name": "compensateFn",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A compensation function that's executed if an error occurs in the workflow. It's used to roll-back actions when errors occur.\nIt accepts as a parameter the second argument passed to the constructor of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "StepResponse",
										"target": 40,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " instance returned by the invocation function. If the\ninvocation function doesn't pass the second argument to "
									},
									{
										"kind": "code",
										"text": "`StepResponse`"
									},
									{
										"kind": "text",
										"text": " constructor, the compensation function receives the first argument\npassed to the "
									},
									{
										"kind": "code",
										"text": "`StepResponse`"
									},
									{
										"kind": "text",
										"text": " constructor instead."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 185,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TInvokeResultCompensateInput",
										"refersToTypeParameter": true
									}
								],
								"name": "CompensateFn",
								"package": "@medusajs/workflows-sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 126,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "TInvokeInput",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": -1,
								"name": "TInvokeResultOutput",
								"refersToTypeParameter": true
							}
						],
						"name": "StepFunction",
						"package": "@medusajs/workflows-sdk"
					}
				}
			]
		},
		{
			"id": 9,
			"name": "createWorkflow",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
					"line": 143,
					"character": 16,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L143"
				}
			],
			"signatures": [
				{
					"id": 10,
					"name": "createWorkflow",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This function creates a workflow with the provided name and a constructor function.\nThe constructor function builds the workflow from steps created by the "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "createStep",
								"target": 1
							},
							{
								"kind": "text",
								"text": " function.\nThe returned workflow is an exported workflow of type "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "ReturnWorkflow",
								"target": 194,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": ", meaning it's not executed right away. To execute it,\ninvoke the exported workflow, then run its "
							},
							{
								"kind": "code",
								"text": "`run`"
							},
							{
								"kind": "text",
								"text": " method."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The created workflow. You can later execute the workflow by invoking it, then using its "
									},
									{
										"kind": "code",
										"text": "`run`"
									},
									{
										"kind": "text",
										"text": " method."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport { createWorkflow } from \"@medusajs/workflows-sdk\"\nimport { MedusaRequest, MedusaResponse, Product } from \"@medusajs/medusa\"\nimport {\n  createProductStep,\n  getProductStep,\n  createPricesStep\n} from \"./steps\"\n\ninterface WorkflowInput {\n title: string\n}\n\nconst myWorkflow = createWorkflow<\n    WorkflowInput,\n    Product\n  >(\"my-workflow\", (input) => {\n   // Everything here will be executed and resolved later\n   // during the execution. Including the data access.\n\n    const product = createProductStep(input)\n    const prices = createPricesStep(product)\n    return getProductStep(product.id)\n  }\n)\n\nexport async function GET(\n  req: MedusaRequest,\n  res: MedusaResponse\n) {\n  const { result: product } = await myWorkflow(req.scope)\n    .run({\n      input: {\n        title: \"Shirt\"\n      }\n    })\n\n  res.json({\n    product\n  })\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
							"line": 143,
							"character": 16,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L143"
						}
					],
					"typeParameter": [
						{
							"id": 11,
							"name": "TData",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the input passed to the composer function."
									}
								]
							}
						},
						{
							"id": 12,
							"name": "TResult",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the output returned by the composer function."
									}
								]
							}
						},
						{
							"id": 13,
							"name": "THooks",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of hooks defined in the workflow."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 191,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								],
								"name": "Record",
								"package": "typescript"
							},
							"default": {
								"type": "reference",
								"target": 191,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 14,
							"name": "name",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of the workflow."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 15,
							"name": "composer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The constructor function that is executed when the "
									},
									{
										"kind": "code",
										"text": "`run`"
									},
									{
										"kind": "text",
										"text": " method in "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "ReturnWorkflow",
										"target": 194,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " is used.\nThe function can't be an arrow function or an asynchronus function. It also can't directly manipulate data.\nYou'll have to use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "transform",
										"target": 64
									},
									{
										"kind": "text",
										"text": " function if you need to directly manipulate data."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 16,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
											"line": 157,
											"character": 12,
											"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L157"
										}
									],
									"signatures": [
										{
											"id": 17,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The constructor function that is executed when the "
													},
													{
														"kind": "code",
														"text": "`run`"
													},
													{
														"kind": "text",
														"text": " method in "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "ReturnWorkflow",
														"target": 194,
														"tsLinkText": ""
													},
													{
														"kind": "text",
														"text": " is used.\nThe function can't be an arrow function or an asynchronus function. It also can't directly manipulate data.\nYou'll have to use the "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "transform",
														"target": 64
													},
													{
														"kind": "text",
														"text": " function if you need to directly manipulate data."
													}
												]
											},
											"sources": [
												{
													"fileName": "packages/workflows-sdk/src/utils/composer/create-workflow.ts",
													"line": 157,
													"character": 12,
													"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/create-workflow.ts#L157"
												}
											],
											"parameters": [
												{
													"id": 18,
													"name": "input",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 137,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "TData",
																"refersToTypeParameter": true
															}
														],
														"name": "WorkflowData",
														"package": "@medusajs/workflows-sdk"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "void"
													},
													{
														"type": "reference",
														"target": 137,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "TResult",
																"refersToTypeParameter": true
															}
														],
														"name": "WorkflowData",
														"package": "@medusajs/workflows-sdk"
													},
													{
														"type": "mapped",
														"parameter": "K",
														"parameterType": {
															"type": "union",
															"types": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "intrinsic",
																	"name": "number"
																},
																{
																	"type": "intrinsic",
																	"name": "symbol"
																}
															]
														},
														"templateType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"target": 132,
																	"typeArguments": [
																		{
																			"type": "indexedAccess",
																			"indexType": {
																				"type": "reference",
																				"target": -1,
																				"name": "K",
																				"refersToTypeParameter": true
																			},
																			"objectType": {
																				"type": "reference",
																				"target": -1,
																				"name": "TResult",
																				"refersToTypeParameter": true
																			}
																		}
																	],
																	"name": "WorkflowDataProperties",
																	"package": "@medusajs/workflows-sdk"
																},
																{
																	"type": "reference",
																	"target": 137,
																	"typeArguments": [
																		{
																			"type": "indexedAccess",
																			"indexType": {
																				"type": "reference",
																				"target": -1,
																				"name": "K",
																				"refersToTypeParameter": true
																			},
																			"objectType": {
																				"type": "reference",
																				"target": -1,
																				"name": "TResult",
																				"refersToTypeParameter": true
																			}
																		}
																	],
																	"name": "WorkflowData",
																	"package": "@medusajs/workflows-sdk"
																}
															]
														}
													}
												]
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 194,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "TData",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": -1,
								"name": "TResult",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": -1,
								"name": "THooks",
								"refersToTypeParameter": true
							}
						],
						"name": "ReturnWorkflow",
						"package": "@medusajs/workflows-sdk"
					}
				}
			]
		},
		{
			"id": 24,
			"name": "parallelize",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/parallelize.ts",
					"line": 44,
					"character": 16,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/parallelize.ts#L44"
				}
			],
			"signatures": [
				{
					"id": 25,
					"name": "parallelize",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This function is used to run multiple steps in parallel. The result of each step will be returned as part of the result array."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The step results. The results are ordered in the array by the order they're passed in the function's parameter."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport {\n  createWorkflow,\n  parallelize\n} from \"@medusajs/workflows-sdk\"\nimport {\n  createProductStep,\n  getProductStep,\n  createPricesStep,\n  attachProductToSalesChannelStep\n} from \"./steps\"\n\ninterface WorkflowInput {\n  title: string\n}\n\nconst myWorkflow = createWorkflow<\n  WorkflowInput,\n  Product\n>(\"my-workflow\", (input) => {\n   const product = createProductStep(input)\n\n   const [prices, productSalesChannel] = parallelize(\n     createPricesStep(product),\n     attachProductToSalesChannelStep(product)\n   )\n\n   const id = product.id\n   return getProductStep(product.id)\n }\n)"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/parallelize.ts",
							"line": 44,
							"character": 16,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/parallelize.ts#L44"
						}
					],
					"typeParameter": [
						{
							"id": 26,
							"name": "TResult",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the expected result."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 132,
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "unknown"
										}
									],
									"name": "WorkflowDataProperties",
									"package": "@medusajs/workflows-sdk"
								}
							}
						}
					],
					"parameters": [
						{
							"id": 27,
							"name": "steps",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"type": {
								"type": "reference",
								"target": -1,
								"name": "TResult",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TResult",
						"refersToTypeParameter": true
					}
				}
			]
		},
		{
			"id": 64,
			"name": "transform",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/workflows-sdk/src/utils/composer/transform.ts",
					"line": 62,
					"character": 16,
					"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/transform.ts#L62"
				}
			],
			"signatures": [
				{
					"id": 65,
					"name": "transform",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This function transforms the output of other utility functions.\n\nFor example, if you're using the value(s) of some step(s) as an input to a later step. As you can't directly manipulate data in the  workflow constructor function passed to "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "createWorkflow",
								"target": 9
							},
							{
								"kind": "text",
								"text": ",\nthe "
							},
							{
								"kind": "code",
								"text": "`transform`"
							},
							{
								"kind": "text",
								"text": " function provides access to the runtime value of the step(s) output so that you can manipulate them.\n\nAnother example is if you're using the runtime value of some step(s) as the output of a workflow.\n\nIf you're also retrieving the output of a hook and want to check if its value is set, you must use a workflow to get the runtime value of that hook."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "There's no expected value to be returned by the "
									},
									{
										"kind": "code",
										"text": "`transform`"
									},
									{
										"kind": "text",
										"text": " function."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport {\n  createWorkflow,\n  transform\n} from \"@medusajs/workflows-sdk\"\nimport { step1, step2 } from \"./steps\"\n\ntype WorkflowInput = {\n  name: string\n}\n\ntype WorkflowOutput = {\n  message: string\n}\n\nconst myWorkflow = createWorkflow<\n    WorkflowInput,\n    WorkflowOutput\n  >\n  (\"hello-world\", (input) => {\n    const str1 = step1(input)\n    const str2 = step2(input)\n\n    return transform({\n      str1,\n      str2\n    }, (input) => ({\n      message: `${input.str1}${input.str2}`\n    }))\n})\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/workflows-sdk/src/utils/composer/transform.ts",
							"line": 62,
							"character": 16,
							"url": "https://github.com/medusajs/medusa/blob/ab4b925b5/packages/workflows-sdk/src/utils/composer/transform.ts#L62"
						}
					],
					"typeParameter": [
						{
							"id": 66,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "object"
									},
									{
										"type": "reference",
										"target": 132,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "WorkflowDataProperties",
										"package": "@medusajs/workflows-sdk"
									}
								]
							}
						},
						{
							"id": 67,
							"name": "RFinal",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 68,
							"name": "values",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The output(s) of other step functions."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 69,
							"name": "func",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The transform function used to perform action on the runtime values of the provided "
									},
									{
										"kind": "code",
										"text": "`values`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "reference",
										"target": 215,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "RFinal",
												"refersToTypeParameter": true
											}
										],
										"name": "Func1",
										"package": "@medusajs/workflows-sdk"
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 137,
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "RFinal",
								"refersToTypeParameter": true
							}
						],
						"name": "WorkflowData",
						"package": "@medusajs/workflows-sdk"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"children": [
				1030
			]
		},
		{
			"title": "Enumerations",
			"children": [
				685,
				543,
				889,
				1419
			]
		},
		{
			"title": "Enumeration Members",
			"children": [
				688,
				684
			]
		},
		{
			"title": "Classes",
			"children": [
				1360,
				611,
				908,
				401,
				230,
				40,
				868,
				350,
				696,
				899,
				1315,
				662
			]
		},
		{
			"title": "Interfaces",
			"children": [
				1292,
				1403,
				1400,
				343,
				1305,
				1311,
				1213,
				1358,
				510,
				1443,
				1439,
				546,
				671,
				1425,
				1200,
				165,
				592,
				1202,
				1192
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				185,
				139,
				589,
				574,
				491,
				223,
				215,
				564,
				177,
				1416,
				674,
				323,
				386,
				359,
				560,
				398,
				523,
				586,
				191,
				194,
				126,
				121,
				607,
				877,
				334,
				689,
				498,
				137,
				132,
				319,
				485,
				525,
				169
			]
		},
		{
			"title": "Variables",
			"children": [
				33,
				32,
				35,
				34,
				38,
				37,
				39,
				36
			]
		},
		{
			"title": "Functions",
			"children": [
				1308,
				1,
				9,
				24,
				64
			]
		}
	],
	"packageName": "@medusajs/workflows-sdk",
	"symbolIdMap": {
		"0": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/index.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "createStep"
		},
		"2": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "createStep"
		},
		"3": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TInvokeInput"
		},
		"4": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TInvokeResultOutput"
		},
		"5": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TInvokeResultCompensateInput"
		},
		"6": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "name"
		},
		"7": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "invokeFn"
		},
		"8": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "compensateFn"
		},
		"9": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "createWorkflow"
		},
		"10": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "createWorkflow"
		},
		"11": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "TData"
		},
		"12": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "TResult"
		},
		"13": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "THooks"
		},
		"14": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "name"
		},
		"15": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "composer"
		},
		"16": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"17": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"18": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "input"
		},
		"24": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/parallelize.ts",
			"qualifiedName": "parallelize"
		},
		"25": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/parallelize.ts",
			"qualifiedName": "parallelize"
		},
		"26": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/parallelize.ts",
			"qualifiedName": "TResult"
		},
		"27": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/parallelize.ts",
			"qualifiedName": "steps"
		},
		"32": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
			"qualifiedName": "SymbolMedusaWorkflowComposerContext"
		},
		"33": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
			"qualifiedName": "SymbolInputReference"
		},
		"34": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
			"qualifiedName": "SymbolWorkflowStep"
		},
		"35": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
			"qualifiedName": "SymbolWorkflowHook"
		},
		"36": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
			"qualifiedName": "SymbolWorkflowWorkflowData"
		},
		"37": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
			"qualifiedName": "SymbolWorkflowStepResponse"
		},
		"38": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
			"qualifiedName": "SymbolWorkflowStepBind"
		},
		"39": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/symbol.ts",
			"qualifiedName": "SymbolWorkflowStepTransformer"
		},
		"40": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse"
		},
		"41": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.__constructor"
		},
		"42": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse"
		},
		"43": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.TOutput"
		},
		"44": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.TCompensateInput"
		},
		"45": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "output"
		},
		"46": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "compensateInput"
		},
		"47": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.#__type"
		},
		"48": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.#output"
		},
		"49": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.#compensateInput"
		},
		"62": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.TOutput"
		},
		"63": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.TCompensateInput"
		},
		"64": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "transform"
		},
		"65": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "transform"
		},
		"66": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "T"
		},
		"67": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "RFinal"
		},
		"68": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "values"
		},
		"69": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "func"
		},
		"121": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepFunctionResult"
		},
		"122": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"123": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"124": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "this"
		},
		"125": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TOutput"
		},
		"126": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepFunction"
		},
		"127": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"128": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"129": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "input"
		},
		"130": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TInput"
		},
		"131": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TOutput"
		},
		"132": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "WorkflowDataProperties"
		},
		"133": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"134": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.__type"
		},
		"135": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.__step__"
		},
		"136": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "T"
		},
		"137": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "WorkflowData"
		},
		"138": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "T"
		},
		"139": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "CreateWorkflowComposerContext"
		},
		"140": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"141": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.hooks_"
		},
		"142": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.hooksCallback_"
		},
		"143": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.workflowId"
		},
		"144": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.flow"
		},
		"145": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.handlers"
		},
		"146": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.stepBinder"
		},
		"147": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"148": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"149": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "fn"
		},
		"150": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TOutput"
		},
		"151": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.hookBinder"
		},
		"152": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"153": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"154": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "name"
		},
		"155": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "fn"
		},
		"156": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TOutput"
		},
		"157": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.parallelizeBinder"
		},
		"158": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"159": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"160": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "fn"
		},
		"161": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"162": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"163": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "this"
		},
		"164": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TOutput"
		},
		"165": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext"
		},
		"166": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.container"
		},
		"167": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.metadata"
		},
		"168": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.context"
		},
		"169": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "WorkflowTransactionContext"
		},
		"170": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"171": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.invoke"
		},
		"172": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"173": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.__index"
		},
		"175": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"176": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.output"
		},
		"177": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "InvokeFn"
		},
		"178": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "__type"
		},
		"179": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "__type"
		},
		"180": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "input"
		},
		"181": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "context"
		},
		"182": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TInput"
		},
		"183": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TOutput"
		},
		"184": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TCompensateInput"
		},
		"185": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "CompensateFn"
		},
		"186": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "__type"
		},
		"187": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "__type"
		},
		"188": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "input"
		},
		"189": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "context"
		},
		"190": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "T"
		},
		"191": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Record"
		},
		"192": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "K"
		},
		"193": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		},
		"194": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "ReturnWorkflow"
		},
		"195": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"196": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"197": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "TDataOverride"
		},
		"198": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "TResultOverride"
		},
		"199": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "container"
		},
		"200": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"201": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.__joinerConfig"
		},
		"202": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.__definition"
		},
		"203": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"204": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type.run"
		},
		"205": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"206": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"207": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "args"
		},
		"208": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"209": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type.getName"
		},
		"210": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"211": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"212": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "TData"
		},
		"213": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "TResult"
		},
		"214": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "THooks"
		},
		"215": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "Func1"
		},
		"216": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "__type"
		},
		"217": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "__type"
		},
		"218": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "input"
		},
		"219": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "__type"
		},
		"220": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "context"
		},
		"221": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "T"
		},
		"222": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "U"
		},
		"223": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "Func"
		},
		"224": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "__type"
		},
		"225": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "__type"
		},
		"226": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "input"
		},
		"227": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "context"
		},
		"228": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "T"
		},
		"229": {
			"sourceFileName": "../../../packages/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "U"
		},
		"230": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder"
		},
		"231": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.__constructor"
		},
		"232": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder"
		},
		"233": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "steps"
		},
		"234": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.steps"
		},
		"235": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.hasChanges_"
		},
		"236": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.hasChanges"
		},
		"237": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.hasChanges"
		},
		"238": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.load"
		},
		"239": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.load"
		},
		"240": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "steps"
		},
		"241": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.addAction"
		},
		"242": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.addAction"
		},
		"243": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "action"
		},
		"244": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "options"
		},
		"245": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.replaceAction"
		},
		"246": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.replaceAction"
		},
		"247": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "existingAction"
		},
		"248": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "action"
		},
		"249": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "options"
		},
		"250": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.insertActionBefore"
		},
		"251": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.insertActionBefore"
		},
		"252": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "existingAction"
		},
		"253": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "action"
		},
		"254": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "options"
		},
		"255": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.insertActionAfter"
		},
		"256": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.insertActionAfter"
		},
		"257": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "existingAction"
		},
		"258": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "action"
		},
		"259": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "options"
		},
		"260": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.appendTo"
		},
		"261": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.appendTo"
		},
		"262": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "step"
		},
		"263": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "newStep"
		},
		"264": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.appendAction"
		},
		"265": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.appendAction"
		},
		"266": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "action"
		},
		"267": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "to"
		},
		"268": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "options"
		},
		"269": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.move"
		},
		"270": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.move"
		},
		"271": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "actionToMove"
		},
		"272": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "targetAction"
		},
		"273": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "__2"
		},
		"274": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "__type"
		},
		"275": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "__type.runInParallel"
		},
		"276": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "__type.mergeNext"
		},
		"277": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.moveAction"
		},
		"278": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.moveAction"
		},
		"279": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "actionToMove"
		},
		"280": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "targetAction"
		},
		"281": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.moveAndMergeNextAction"
		},
		"282": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.moveAndMergeNextAction"
		},
		"283": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "actionToMove"
		},
		"284": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "targetAction"
		},
		"285": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.mergeActions"
		},
		"286": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.mergeActions"
		},
		"287": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "where"
		},
		"288": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "actions"
		},
		"289": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.deleteAction"
		},
		"290": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.deleteAction"
		},
		"291": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "action"
		},
		"292": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "steps"
		},
		"293": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.pruneAction"
		},
		"294": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.pruneAction"
		},
		"295": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "action"
		},
		"296": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.findStepByAction"
		},
		"297": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.findStepByAction"
		},
		"298": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "action"
		},
		"299": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "step"
		},
		"300": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.findOrThrowStepByAction"
		},
		"301": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.findOrThrowStepByAction"
		},
		"302": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "action"
		},
		"303": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "steps"
		},
		"304": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.findParentStepByAction"
		},
		"305": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.findParentStepByAction"
		},
		"306": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "action"
		},
		"307": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "step"
		},
		"308": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.findLastStep"
		},
		"309": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.findLastStep"
		},
		"310": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "steps"
		},
		"311": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.updateDepths"
		},
		"312": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.updateDepths"
		},
		"313": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "startingStep"
		},
		"314": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "parent"
		},
		"315": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "incr"
		},
		"316": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "beginFrom"
		},
		"317": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.build"
		},
		"318": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "OrchestratorBuilder.build"
		},
		"319": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "WorkflowHandler"
		},
		"320": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type"
		},
		"321": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.invoke"
		},
		"322": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.compensate"
		},
		"323": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "MedusaContainer"
		},
		"324": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "__type"
		},
		"325": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "__type.registerAdd"
		},
		"326": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "__type"
		},
		"327": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "__type"
		},
		"328": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "name"
		},
		"329": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "registration"
		},
		"330": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "T"
		},
		"331": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "__type.createScope"
		},
		"332": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "__type"
		},
		"333": {
			"sourceFileName": "../../../packages/types/dist/common/medusa-container.d.ts",
			"qualifiedName": "__type"
		},
		"334": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionMetadata"
		},
		"335": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "__type"
		},
		"336": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "__type.model_id"
		},
		"337": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "__type.reply_to_topic"
		},
		"338": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "__type.idempotency_key"
		},
		"339": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "__type.action"
		},
		"340": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "__type.action_type"
		},
		"341": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "__type.attempt"
		},
		"342": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "__type.timestamp"
		},
		"343": {
			"sourceFileName": "../../../packages/types/dist/shared-context.d.ts",
			"qualifiedName": "Context"
		},
		"344": {
			"sourceFileName": "../../../packages/types/dist/shared-context.d.ts",
			"qualifiedName": "__type.transactionManager"
		},
		"345": {
			"sourceFileName": "../../../packages/types/dist/shared-context.d.ts",
			"qualifiedName": "__type.manager"
		},
		"346": {
			"sourceFileName": "../../../packages/types/dist/shared-context.d.ts",
			"qualifiedName": "__type.isolationLevel"
		},
		"347": {
			"sourceFileName": "../../../packages/types/dist/shared-context.d.ts",
			"qualifiedName": "__type.enableNestedTransactions"
		},
		"348": {
			"sourceFileName": "../../../packages/types/dist/shared-context.d.ts",
			"qualifiedName": "__type.transactionId"
		},
		"349": {
			"sourceFileName": "../../../packages/types/dist/shared-context.d.ts",
			"qualifiedName": "TManager"
		},
		"350": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionContext"
		},
		"351": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionContext.__constructor"
		},
		"352": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionContext"
		},
		"353": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "payload"
		},
		"354": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "invoke"
		},
		"355": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "compensate"
		},
		"356": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionContext.payload"
		},
		"357": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionContext.invoke"
		},
		"358": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionContext.compensate"
		},
		"359": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "ModuleJoinerConfig"
		},
		"360": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"361": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.schema"
		},
		"362": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.relationships"
		},
		"363": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.extends"
		},
		"364": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"365": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.serviceName"
		},
		"366": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.fieldAlias"
		},
		"367": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"368": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.path"
		},
		"369": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.forwardArgumentsOnPath"
		},
		"370": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.relationship"
		},
		"371": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.serviceName"
		},
		"372": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.primaryKeys"
		},
		"373": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.isLink"
		},
		"374": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.linkableKeys"
		},
		"375": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.isReadOnlyLink"
		},
		"376": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.databaseConfig"
		},
		"377": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"378": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.tableName"
		},
		"379": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.idPrefix"
		},
		"380": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.extraFields"
		},
		"381": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"382": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.type"
		},
		"383": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.defaultValue"
		},
		"384": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.nullable"
		},
		"385": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.options"
		},
		"386": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "ModuleDefinition"
		},
		"387": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"388": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.key"
		},
		"389": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.registrationName"
		},
		"390": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.defaultPackage"
		},
		"391": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.label"
		},
		"392": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.canOverride"
		},
		"393": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.isRequired"
		},
		"394": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.isQueryable"
		},
		"395": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.isLegacy"
		},
		"396": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.dependencies"
		},
		"397": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.defaultModuleDeclaration"
		},
		"398": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Omit"
		},
		"399": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		},
		"400": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "K"
		},
		"401": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow"
		},
		"402": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.__constructor"
		},
		"403": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow"
		},
		"404": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "workflowId"
		},
		"405": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "modulesLoaded"
		},
		"406": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"407": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.__joinerConfig"
		},
		"408": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.__definition"
		},
		"409": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.container"
		},
		"410": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.workflowId"
		},
		"411": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.flow"
		},
		"412": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.workflow"
		},
		"413": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.handlers"
		},
		"414": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.commit"
		},
		"415": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.commit"
		},
		"416": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.getFlow"
		},
		"417": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.getFlow"
		},
		"418": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.run"
		},
		"419": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.run"
		},
		"420": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "uniqueTransactionId"
		},
		"421": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "input"
		},
		"422": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "context"
		},
		"423": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.registerStepSuccess"
		},
		"424": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.registerStepSuccess"
		},
		"425": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "idempotencyKey"
		},
		"426": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "response"
		},
		"427": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "context"
		},
		"428": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.registerStepFailure"
		},
		"429": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.registerStepFailure"
		},
		"430": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "idempotencyKey"
		},
		"431": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "error"
		},
		"432": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "context"
		},
		"433": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.addAction"
		},
		"434": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.addAction"
		},
		"435": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "action"
		},
		"436": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "handler"
		},
		"437": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "options"
		},
		"438": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.replaceAction"
		},
		"439": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.replaceAction"
		},
		"440": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "existingAction"
		},
		"441": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "action"
		},
		"442": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "handler"
		},
		"443": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "options"
		},
		"444": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.insertActionBefore"
		},
		"445": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.insertActionBefore"
		},
		"446": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "existingAction"
		},
		"447": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "action"
		},
		"448": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "handler"
		},
		"449": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "options"
		},
		"450": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.insertActionAfter"
		},
		"451": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.insertActionAfter"
		},
		"452": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "existingAction"
		},
		"453": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "action"
		},
		"454": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "handler"
		},
		"455": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "options"
		},
		"456": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.appendAction"
		},
		"457": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.appendAction"
		},
		"458": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "action"
		},
		"459": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "to"
		},
		"460": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "handler"
		},
		"461": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "options"
		},
		"462": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.moveAction"
		},
		"463": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.moveAction"
		},
		"464": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "actionToMove"
		},
		"465": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "targetAction"
		},
		"466": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.moveAndMergeNextAction"
		},
		"467": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.moveAndMergeNextAction"
		},
		"468": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "actionToMove"
		},
		"469": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "targetAction"
		},
		"470": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.mergeActions"
		},
		"471": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.mergeActions"
		},
		"472": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "where"
		},
		"473": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "actions"
		},
		"474": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.deleteAction"
		},
		"475": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.deleteAction"
		},
		"476": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "action"
		},
		"477": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "parentSteps"
		},
		"478": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.pruneAction"
		},
		"479": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.pruneAction"
		},
		"480": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "action"
		},
		"481": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.assertHandler"
		},
		"482": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "LocalWorkflow.assertHandler"
		},
		"483": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "handler"
		},
		"484": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "action"
		},
		"485": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "WorkflowResult"
		},
		"486": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "__type"
		},
		"487": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "__type.errors"
		},
		"488": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "__type.transaction"
		},
		"489": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "__type.result"
		},
		"490": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "TResult"
		},
		"491": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "FlowRunOptions"
		},
		"492": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "__type"
		},
		"493": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "__type.input"
		},
		"494": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "__type.context"
		},
		"495": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "__type.resultFrom"
		},
		"496": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "__type.throwOnError"
		},
		"497": {
			"sourceFileName": "../../../packages/workflows-sdk/src/helper/workflow-export.ts",
			"qualifiedName": "TData"
		},
		"498": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionStepsDefinition"
		},
		"499": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type"
		},
		"500": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.action"
		},
		"501": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.continueOnPermanentFailure"
		},
		"502": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.noCompensation"
		},
		"503": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.maxRetries"
		},
		"504": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.retryInterval"
		},
		"505": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.timeout"
		},
		"506": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.async"
		},
		"507": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.noWait"
		},
		"508": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.saveResponse"
		},
		"509": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.next"
		},
		"510": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "InternalStep"
		},
		"511": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "InternalStep.next"
		},
		"512": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "InternalStep.depth"
		},
		"513": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/orchestrator-builder.d.ts",
			"qualifiedName": "InternalStep.parent"
		},
		"514": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.action"
		},
		"515": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.continueOnPermanentFailure"
		},
		"516": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.noCompensation"
		},
		"517": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.maxRetries"
		},
		"518": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.retryInterval"
		},
		"519": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.timeout"
		},
		"520": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.async"
		},
		"521": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.noWait"
		},
		"522": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "__type.saveResponse"
		},
		"523": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Partial"
		},
		"524": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		},
		"525": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "WorkflowStepHandler"
		},
		"526": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type"
		},
		"527": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type"
		},
		"528": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "args"
		},
		"529": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type"
		},
		"530": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.container"
		},
		"531": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.payload"
		},
		"532": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.invoke"
		},
		"533": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type"
		},
		"534": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.__index"
		},
		"536": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.compensate"
		},
		"537": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type"
		},
		"538": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.__index"
		},
		"540": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.metadata"
		},
		"541": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.transaction"
		},
		"542": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.context"
		},
		"543": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionHandlerType"
		},
		"544": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionHandlerType.INVOKE"
		},
		"545": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionHandlerType.COMPENSATE"
		},
		"546": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfig"
		},
		"547": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfig.serviceName"
		},
		"548": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfig.alias"
		},
		"549": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfig.fieldAlias"
		},
		"550": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type"
		},
		"551": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.path"
		},
		"552": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.forwardArgumentsOnPath"
		},
		"553": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfig.primaryKeys"
		},
		"554": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfig.relationships"
		},
		"555": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfig.extends"
		},
		"556": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type"
		},
		"557": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.serviceName"
		},
		"558": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.relationship"
		},
		"559": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfig.args"
		},
		"560": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "ModuleJoinerRelationship"
		},
		"561": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"562": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.isInternalService"
		},
		"563": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.deleteCascade"
		},
		"564": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "InternalModuleDeclaration"
		},
		"565": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"566": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.scope"
		},
		"567": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.resources"
		},
		"568": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.dependencies"
		},
		"569": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.definition"
		},
		"570": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.resolve"
		},
		"571": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.options"
		},
		"572": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.alias"
		},
		"573": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.main"
		},
		"574": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "ExternalModuleDeclaration"
		},
		"575": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"576": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.scope"
		},
		"577": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.definition"
		},
		"578": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.server"
		},
		"579": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type"
		},
		"580": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.type"
		},
		"581": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.url"
		},
		"582": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.keepAlive"
		},
		"583": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.options"
		},
		"584": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.alias"
		},
		"585": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "__type.main"
		},
		"586": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Pick"
		},
		"587": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		},
		"588": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "K"
		},
		"589": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Exclude"
		},
		"590": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "T"
		},
		"591": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "U"
		},
		"592": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "WorkflowDefinition"
		},
		"593": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "WorkflowDefinition.id"
		},
		"594": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "WorkflowDefinition.handler"
		},
		"595": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type"
		},
		"596": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type"
		},
		"597": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "container"
		},
		"598": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "context"
		},
		"599": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "WorkflowDefinition.orchestrator"
		},
		"600": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "WorkflowDefinition.flow_"
		},
		"601": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "WorkflowDefinition.handlers_"
		},
		"602": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type"
		},
		"603": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.invoke"
		},
		"604": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "__type.compensate"
		},
		"605": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "WorkflowDefinition.requiredModules"
		},
		"606": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/workflow-manager.d.ts",
			"qualifiedName": "WorkflowDefinition.optionalModules"
		},
		"607": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "StepHandler"
		},
		"608": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "__type"
		},
		"609": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "__type.invoke"
		},
		"610": {
			"sourceFileName": "../../../packages/orchestration/dist/workflow/local-workflow.d.ts",
			"qualifiedName": "__type.compensate"
		},
		"611": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction"
		},
		"612": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.keyValueStore"
		},
		"613": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.keyPrefix"
		},
		"614": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.loadTransaction"
		},
		"615": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.loadTransaction"
		},
		"616": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "transactionId"
		},
		"617": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.__constructor"
		},
		"618": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction"
		},
		"619": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "flow"
		},
		"620": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "handler"
		},
		"621": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "payload"
		},
		"622": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "errors"
		},
		"623": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "context"
		},
		"624": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.flow"
		},
		"625": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.handler"
		},
		"626": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.payload"
		},
		"627": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.modelId"
		},
		"628": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.transactionId"
		},
		"629": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.errors"
		},
		"630": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.context"
		},
		"631": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.getFlow"
		},
		"632": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.getFlow"
		},
		"633": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.getContext"
		},
		"634": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.getContext"
		},
		"635": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.getErrors"
		},
		"636": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.getErrors"
		},
		"637": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "handlerType"
		},
		"638": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.addError"
		},
		"639": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.addError"
		},
		"640": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "action"
		},
		"641": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "handlerType"
		},
		"642": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "error"
		},
		"643": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.addResponse"
		},
		"644": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.addResponse"
		},
		"645": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "action"
		},
		"646": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "handlerType"
		},
		"647": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "response"
		},
		"648": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.hasFinished"
		},
		"649": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.hasFinished"
		},
		"650": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.getState"
		},
		"651": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.getState"
		},
		"652": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.isPartiallyCompleted"
		},
		"653": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.isPartiallyCompleted"
		},
		"654": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.canInvoke"
		},
		"655": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.canInvoke"
		},
		"656": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.canRevert"
		},
		"657": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.canRevert"
		},
		"658": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.saveCheckpoint"
		},
		"659": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.saveCheckpoint"
		},
		"660": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.deleteCheckpoint"
		},
		"661": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "DistributedTransaction.deleteCheckpoint"
		},
		"662": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionStepError"
		},
		"663": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionStepError.__constructor"
		},
		"664": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionStepError"
		},
		"665": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "action"
		},
		"666": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "handlerType"
		},
		"667": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "error"
		},
		"668": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionStepError.action"
		},
		"669": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionStepError.handlerType"
		},
		"670": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionStepError.error"
		},
		"671": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfigAlias"
		},
		"672": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfigAlias.name"
		},
		"673": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerServiceConfigAlias.args"
		},
		"674": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "JoinerRelationship"
		},
		"675": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type"
		},
		"676": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.alias"
		},
		"677": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.foreignKey"
		},
		"678": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.primaryKey"
		},
		"679": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.serviceName"
		},
		"680": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.isInternalService"
		},
		"681": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.inverse"
		},
		"682": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.isList"
		},
		"683": {
			"sourceFileName": "../../../packages/types/dist/joiner/index.d.ts",
			"qualifiedName": "__type.args"
		},
		"684": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "MODULE_SCOPE.INTERNAL"
		},
		"685": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "MODULE_RESOURCE_TYPE"
		},
		"686": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "MODULE_RESOURCE_TYPE.SHARED"
		},
		"687": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "MODULE_RESOURCE_TYPE.ISOLATED"
		},
		"688": {
			"sourceFileName": "../../../packages/types/dist/modules-sdk/index.d.ts",
			"qualifiedName": "MODULE_SCOPE.EXTERNAL"
		},
		"689": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStepHandler"
		},
		"690": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type"
		},
		"691": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type"
		},
		"692": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "actionId"
		},
		"693": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "handlerType"
		},
		"694": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "payload"
		},
		"695": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "transaction"
		},
		"696": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator"
		},
		"697": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.ROOT_STEP"
		},
		"698": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.DEFAULT_RETRIES"
		},
		"699": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.SEPARATOR"
		},
		"700": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.getKeyName"
		},
		"701": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.getKeyName"
		},
		"702": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "params"
		},
		"703": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.setStepSuccess"
		},
		"704": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.setStepFailure"
		},
		"705": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.loadTransactionById"
		},
		"706": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.buildSteps"
		},
		"707": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.getStepByAction"
		},
		"708": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.getTransactionAndStepFromIdempotencyKey"
		},
		"709": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"710": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"711": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"712": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"713": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"714": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"715": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"716": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"717": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"718": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"719": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"720": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"721": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"722": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"723": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"724": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"725": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"726": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"727": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"728": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"729": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"730": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"731": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"732": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"733": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"734": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"735": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"736": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"737": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"738": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"739": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"740": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "signal"
		},
		"741": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "resource"
		},
		"742": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"743": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"744": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"745": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"746": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"747": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"748": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"749": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.__constructor"
		},
		"750": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator"
		},
		"751": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "id"
		},
		"752": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "definition"
		},
		"753": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.id"
		},
		"754": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.definition"
		},
		"755": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.invokeSteps"
		},
		"756": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.compensateSteps"
		},
		"757": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.getPreviousStep"
		},
		"758": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.getInvokeSteps"
		},
		"759": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.getCompensationSteps"
		},
		"760": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.canMoveForward"
		},
		"761": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.canMoveBackward"
		},
		"762": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.canContinue"
		},
		"763": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.checkAllSteps"
		},
		"764": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.flagStepsToRevert"
		},
		"765": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.executeNext"
		},
		"766": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.resume"
		},
		"767": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.resume"
		},
		"768": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "transaction"
		},
		"769": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.cancelTransaction"
		},
		"770": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.cancelTransaction"
		},
		"771": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "transaction"
		},
		"772": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.createTransactionFlow"
		},
		"773": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.beginTransaction"
		},
		"774": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.beginTransaction"
		},
		"775": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "transactionId"
		},
		"776": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "handler"
		},
		"777": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "payload"
		},
		"778": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.registerStepSuccess"
		},
		"779": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.registerStepSuccess"
		},
		"780": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "responseIdempotencyKey"
		},
		"781": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "handler"
		},
		"782": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "transaction"
		},
		"783": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "response"
		},
		"784": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.registerStepFailure"
		},
		"785": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionOrchestrator.registerStepFailure"
		},
		"786": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "responseIdempotencyKey"
		},
		"787": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "error"
		},
		"788": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "handler"
		},
		"789": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "transaction"
		},
		"790": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"791": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"792": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "error"
		},
		"793": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"794": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"795": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"796": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"797": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"798": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"799": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"800": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"801": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"802": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"803": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"804": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"805": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"806": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"807": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"808": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"809": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"810": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"811": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"812": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"813": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"814": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"815": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"816": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"817": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"818": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"819": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"820": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"821": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"822": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"823": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"824": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"825": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"826": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"827": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"828": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"829": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"830": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"831": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"832": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"833": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"834": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"835": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"836": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"837": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"838": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"839": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"840": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"841": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"842": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"843": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"844": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"845": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"846": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"847": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"848": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"849": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"850": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"851": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"852": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"853": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"854": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"855": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"856": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"857": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"858": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"859": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"860": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"861": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"862": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"863": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"864": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"865": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"866": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"867": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"868": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionCheckpoint"
		},
		"869": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionCheckpoint.__constructor"
		},
		"870": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionCheckpoint"
		},
		"871": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "flow"
		},
		"872": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "context"
		},
		"873": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "errors"
		},
		"874": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionCheckpoint.flow"
		},
		"875": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionCheckpoint.context"
		},
		"876": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionCheckpoint.errors"
		},
		"877": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "TransactionFlow"
		},
		"878": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "__type"
		},
		"879": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "__type.modelId"
		},
		"880": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "__type.definition"
		},
		"881": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "__type.transactionId"
		},
		"882": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "__type.hasFailedSteps"
		},
		"883": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "__type.hasSkippedSteps"
		},
		"884": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "__type.state"
		},
		"885": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "__type.steps"
		},
		"886": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "__type"
		},
		"887": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-orchestrator.d.ts",
			"qualifiedName": "__type.__index"
		},
		"889": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionState"
		},
		"890": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionState.NOT_STARTED"
		},
		"891": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionState.INVOKING"
		},
		"892": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionState.WAITING_TO_COMPENSATE"
		},
		"893": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionState.COMPENSATING"
		},
		"894": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionState.DONE"
		},
		"895": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionState.REVERTED"
		},
		"896": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionState.FAILED"
		},
		"897": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionState.DORMANT"
		},
		"898": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionState.SKIPPED"
		},
		"899": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionPayload"
		},
		"900": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionPayload.__constructor"
		},
		"901": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionPayload"
		},
		"902": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "metadata"
		},
		"903": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "data"
		},
		"904": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "context"
		},
		"905": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionPayload.metadata"
		},
		"906": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionPayload.data"
		},
		"907": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/distributed-transaction.d.ts",
			"qualifiedName": "TransactionPayload.context"
		},
		"908": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter"
		},
		"909": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"910": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"911": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"912": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"913": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"914": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"915": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"916": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"917": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"918": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"919": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"920": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"921": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"922": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"923": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"924": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"925": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"926": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"927": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"928": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"929": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"930": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"931": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"932": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"933": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"934": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"935": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"936": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"937": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"938": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"939": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"940": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "signal"
		},
		"941": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "resource"
		},
		"942": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"943": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"944": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"945": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"946": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"947": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"948": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"949": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.__constructor"
		},
		"950": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter"
		},
		"951": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"952": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"953": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"954": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "error"
		},
		"955": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"956": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"957": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"958": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"959": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"960": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"961": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"962": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"963": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"964": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"965": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"966": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"967": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"968": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"969": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"970": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"971": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"972": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"973": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"974": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"975": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"976": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"977": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"978": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"979": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"980": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"981": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"982": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"983": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"984": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"985": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"986": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"987": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"988": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"989": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"990": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"991": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"992": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"993": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"994": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"995": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"996": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"997": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"998": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"999": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"1000": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"1001": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"1002": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1003": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"1004": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"1005": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1006": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"1007": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"1008": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1009": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1010": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"1011": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"1012": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1013": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1014": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"1015": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"1016": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1017": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1018": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1019": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1020": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1021": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"1022": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"1023": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1024": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1025": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1026": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1027": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1028": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"1029": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"1030": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter"
		},
		"1031": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitter"
		},
		"1032": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.Abortable"
		},
		"1033": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.Abortable.signal"
		},
		"1034": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterReferencingAsyncResource"
		},
		"1035": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterReferencingAsyncResource.eventEmitter"
		},
		"1036": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.bind"
		},
		"1037": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.bind"
		},
		"1038": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "Func"
		},
		"1039": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "__type"
		},
		"1040": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "__type"
		},
		"1041": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "args"
		},
		"1042": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "fn"
		},
		"1043": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.runInAsyncScope"
		},
		"1044": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.runInAsyncScope"
		},
		"1045": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "This"
		},
		"1046": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "Result"
		},
		"1047": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "fn"
		},
		"1048": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "__type"
		},
		"1049": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "__type"
		},
		"1050": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "this"
		},
		"1051": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "args"
		},
		"1052": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "thisArg"
		},
		"1053": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "args"
		},
		"1054": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.emitDestroy"
		},
		"1055": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.emitDestroy"
		},
		"1056": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.asyncId"
		},
		"1057": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.asyncId"
		},
		"1058": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.triggerAsyncId"
		},
		"1059": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.triggerAsyncId"
		},
		"1060": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterAsyncResourceOptions"
		},
		"1061": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterAsyncResourceOptions.name"
		},
		"1062": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResourceOptions.triggerAsyncId"
		},
		"1063": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResourceOptions.requireManualDestroy"
		},
		"1064": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitterOptions.captureRejections"
		},
		"1065": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
		},
		"1066": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"1067": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"1068": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"1069": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1070": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"1071": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"1072": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"1073": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1074": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"1075": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"1076": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"1077": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"1078": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1079": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"1080": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"1081": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"1082": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"1083": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1084": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"1085": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"1086": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"1087": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"1088": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"1089": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"1090": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"1091": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"1092": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"1093": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"1094": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"1095": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"1096": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"1097": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "signal"
		},
		"1098": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "resource"
		},
		"1099": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1100": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1101": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"1102": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"1103": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"1104": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"1105": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"1106": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterAsyncResource.__constructor"
		},
		"1107": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterAsyncResource"
		},
		"1108": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"1109": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterAsyncResource.emitDestroy"
		},
		"1110": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterAsyncResource.emitDestroy"
		},
		"1111": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterAsyncResource.asyncId"
		},
		"1112": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterAsyncResource.triggerAsyncId"
		},
		"1113": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.EventEmitterAsyncResource.asyncResource"
		},
		"1114": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"1115": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"1116": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "error"
		},
		"1117": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"1118": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1119": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"1120": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"1121": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1122": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1123": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1124": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1125": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1126": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"1127": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"1128": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1129": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1130": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1131": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1132": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1133": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"1134": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"1135": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1136": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1137": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1138": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1139": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1140": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"1141": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"1142": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1143": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1144": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1145": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1146": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1147": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"1148": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"1149": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1150": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1151": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1152": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1153": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1154": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"1155": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"1156": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"1157": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"1158": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"1159": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"1160": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"1161": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"1162": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"1163": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"1164": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1165": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"1166": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"1167": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1168": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"1169": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"1170": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1171": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1172": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"1173": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"1174": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1175": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1176": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"1177": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"1178": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1179": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1180": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1181": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1182": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1183": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"1184": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"1185": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1186": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1187": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1188": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1189": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1190": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"1191": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"1192": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "_NodeEventTarget"
		},
		"1193": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "_NodeEventTarget.once"
		},
		"1194": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "_NodeEventTarget.once"
		},
		"1195": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1196": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1197": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1198": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1199": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1200": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "StaticEventEmitterOptions"
		},
		"1201": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "StaticEventEmitterOptions.signal"
		},
		"1202": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "_DOMEventTarget"
		},
		"1203": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "_DOMEventTarget.addEventListener"
		},
		"1204": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "_DOMEventTarget.addEventListener"
		},
		"1205": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1206": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1207": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1208": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1209": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1210": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "opts"
		},
		"1211": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1212": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type.once"
		},
		"1213": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter"
		},
		"1214": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"1215": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"1216": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1217": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1218": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1219": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1220": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1221": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"1222": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"1223": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1224": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1225": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1226": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1227": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1228": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"1229": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"1230": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1231": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1232": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1233": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1234": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1235": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"1236": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"1237": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1238": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1239": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1240": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1241": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1242": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"1243": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"1244": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1245": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1246": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1247": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1248": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1249": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"1250": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"1251": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"1252": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"1253": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"1254": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"1255": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"1256": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"1257": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"1258": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"1259": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1260": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"1261": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"1262": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1263": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"1264": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"1265": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1266": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1267": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"1268": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"1269": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1270": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1271": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"1272": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"1273": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1274": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1275": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1276": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1277": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1278": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"1279": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"1280": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1281": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1282": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1283": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1284": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1285": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"1286": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"1287": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.[captureRejectionSymbol]"
		},
		"1288": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.[captureRejectionSymbol]"
		},
		"1289": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "error"
		},
		"1290": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"1291": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1292": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterableIterator"
		},
		"1293": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterableIterator.[asyncIterator]"
		},
		"1294": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterableIterator.[asyncIterator]"
		},
		"1295": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.next"
		},
		"1296": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.next"
		},
		"1297": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "args"
		},
		"1298": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.return"
		},
		"1299": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.return"
		},
		"1300": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "value"
		},
		"1301": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.throw"
		},
		"1302": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.throw"
		},
		"1303": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "e"
		},
		"1304": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterableIterator.T"
		},
		"1305": {
			"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
			"qualifiedName": "Disposable"
		},
		"1306": {
			"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
			"qualifiedName": "Disposable.[dispose]"
		},
		"1307": {
			"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
			"qualifiedName": "Disposable.[dispose]"
		},
		"1308": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Error"
		},
		"1309": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Error"
		},
		"1310": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "message"
		},
		"1311": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Error"
		},
		"1312": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Error.name"
		},
		"1313": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Error.message"
		},
		"1314": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Error.stack"
		},
		"1315": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep"
		},
		"1318": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.stepFailed"
		},
		"1319": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.id"
		},
		"1320": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.depth"
		},
		"1321": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.definition"
		},
		"1322": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.invoke"
		},
		"1323": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type"
		},
		"1324": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type.state"
		},
		"1325": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type.status"
		},
		"1326": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.compensate"
		},
		"1327": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type"
		},
		"1328": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type.state"
		},
		"1329": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type.status"
		},
		"1330": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.attempts"
		},
		"1331": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.failures"
		},
		"1332": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.lastAttempt"
		},
		"1333": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.next"
		},
		"1334": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.saveResponse"
		},
		"1335": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.getStates"
		},
		"1336": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.getStates"
		},
		"1337": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type"
		},
		"1338": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type.state"
		},
		"1339": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "__type.status"
		},
		"1340": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.beginCompensation"
		},
		"1341": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.beginCompensation"
		},
		"1342": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.isCompensating"
		},
		"1343": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.isCompensating"
		},
		"1344": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.changeState"
		},
		"1345": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.changeState"
		},
		"1346": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "toState"
		},
		"1347": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.changeStatus"
		},
		"1348": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.changeStatus"
		},
		"1349": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "toStatus"
		},
		"1350": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.canRetry"
		},
		"1351": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.canRetry"
		},
		"1352": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.canInvoke"
		},
		"1353": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.canInvoke"
		},
		"1354": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "flowState"
		},
		"1355": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.canCompensate"
		},
		"1356": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "TransactionStep.canCompensate"
		},
		"1357": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/transaction-step.d.ts",
			"qualifiedName": "flowState"
		},
		"1358": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitterOptions"
		},
		"1359": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitterOptions.captureRejections"
		},
		"1360": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource"
		},
		"1361": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.bind"
		},
		"1362": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.bind"
		},
		"1363": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "Func"
		},
		"1364": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "__type"
		},
		"1365": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "__type"
		},
		"1366": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "this"
		},
		"1367": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "args"
		},
		"1368": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "ThisArg"
		},
		"1369": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "fn"
		},
		"1370": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "type"
		},
		"1371": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "thisArg"
		},
		"1372": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.__constructor"
		},
		"1373": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource"
		},
		"1374": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "type"
		},
		"1375": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "triggerAsyncId"
		},
		"1376": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.bind"
		},
		"1377": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.bind"
		},
		"1378": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "Func"
		},
		"1379": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "__type"
		},
		"1380": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "__type"
		},
		"1381": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "args"
		},
		"1382": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "fn"
		},
		"1383": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.runInAsyncScope"
		},
		"1384": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.runInAsyncScope"
		},
		"1385": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "This"
		},
		"1386": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "Result"
		},
		"1387": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "fn"
		},
		"1388": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "__type"
		},
		"1389": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "__type"
		},
		"1390": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "this"
		},
		"1391": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "args"
		},
		"1392": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "thisArg"
		},
		"1393": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "args"
		},
		"1394": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.emitDestroy"
		},
		"1395": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.emitDestroy"
		},
		"1396": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.asyncId"
		},
		"1397": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.asyncId"
		},
		"1398": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.triggerAsyncId"
		},
		"1399": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResource.triggerAsyncId"
		},
		"1400": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResourceOptions"
		},
		"1401": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResourceOptions.triggerAsyncId"
		},
		"1402": {
			"sourceFileName": "../../node_modules/@types/node/async_hooks.d.ts",
			"qualifiedName": "\"async_hooks\".AsyncResourceOptions.requireManualDestroy"
		},
		"1403": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator"
		},
		"1404": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.next"
		},
		"1405": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.next"
		},
		"1406": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "args"
		},
		"1407": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.return"
		},
		"1408": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.return"
		},
		"1409": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "value"
		},
		"1410": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.throw"
		},
		"1411": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.throw"
		},
		"1412": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "e"
		},
		"1413": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.T"
		},
		"1414": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.TReturn"
		},
		"1415": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
			"qualifiedName": "AsyncIterator.TNext"
		},
		"1416": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorResult"
		},
		"1417": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "T"
		},
		"1418": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "TReturn"
		},
		"1419": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionStepStatus"
		},
		"1420": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionStepStatus.IDLE"
		},
		"1421": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionStepStatus.OK"
		},
		"1422": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionStepStatus.WAITING"
		},
		"1423": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionStepStatus.TEMPORARY_FAILURE"
		},
		"1424": {
			"sourceFileName": "../../../packages/orchestration/dist/transaction/types.d.ts",
			"qualifiedName": "TransactionStepStatus.PERMANENT_FAILURE"
		},
		"1425": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "PromiseLike"
		},
		"1426": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "PromiseLike.then"
		},
		"1427": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "PromiseLike.then"
		},
		"1428": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "TResult1"
		},
		"1429": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "TResult2"
		},
		"1430": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "onfulfilled"
		},
		"1431": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1432": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1433": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "value"
		},
		"1434": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "onrejected"
		},
		"1435": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1436": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "__type"
		},
		"1437": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "reason"
		},
		"1438": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "PromiseLike.T"
		},
		"1439": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorYieldResult"
		},
		"1440": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorYieldResult.done"
		},
		"1441": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorYieldResult.value"
		},
		"1442": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorYieldResult.TYield"
		},
		"1443": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorReturnResult"
		},
		"1444": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorReturnResult.done"
		},
		"1445": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorReturnResult.value"
		},
		"1446": {
			"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
			"qualifiedName": "IteratorReturnResult.TReturn"
		}
	}
}