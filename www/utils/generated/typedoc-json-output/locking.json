{
	"id": 55635,
	"name": "locking",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 55636,
			"name": "ILockingProvider",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "### constructor\n\nThe constructor allows you to access resources from the module's container using the first parameter,\nand the module's options using the second parameter.\n\nIf you're creating a client or establishing a connection with a third-party service, do it in the constructor.\n\n#### Example\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nimport { ILockingProvider } from \"@medusajs/framework/types\"\nimport { Logger } from \"@medusajs/framework/types\"\n\ntype InjectedDependencies = {\n  logger: Logger\n}\n\ntype Options = {\n  url: string\n}\n\nclass MyLockingProviderService implements ILockingProvider {\n  static identifier = \"my-lock\"\n  protected logger_: Logger\n  protected options_: Options\n  // assuming you're initializing a client\n  protected client\n\n  constructor (\n    { logger }: InjectedDependencies,\n    options: Options\n  ) {\n    this.logger_ = logger\n    this.options_ = options\n\n    // assuming you're initializing a client\n    this.client = new Client(options)\n  }\n\n  // ...\n}\n\nexport default MyLockingProviderService\n```"
					},
					{
						"kind": "text",
						"text": "\n\n### Identifier\n\nEvery locking module provider must have an "
					},
					{
						"kind": "code",
						"text": "`identifier`"
					},
					{
						"kind": "text",
						"text": " static property. The provider's ID\nwill be stored as "
					},
					{
						"kind": "code",
						"text": "`lp_{identifier}`"
					},
					{
						"kind": "text",
						"text": ".\n\nFor example:\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nclass MyLockingProviderService implements ILockingProvider {\n  static identifier = \"my-lock\"\n  // ...\n}\n```"
					}
				]
			},
			"children": [
				{
					"id": 55637,
					"name": "execute",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 146,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L146"
						}
					],
					"signatures": [
						{
							"id": 55638,
							"name": "execute",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method executes a given asynchronous job with a lock on the given keys. The Locking Module uses this method\nwhen you call its "
									},
									{
										"kind": "code",
										"text": "`execute`"
									},
									{
										"kind": "text",
										"text": " method and your provider is the default provider, or you pass your provider's identifier to its "
									},
									{
										"kind": "code",
										"text": "`execute`"
									},
									{
										"kind": "text",
										"text": " method.\n\nIn the method, you should first try to acquire the lock on the given keys before the specified timeout passes.\nThen, once the lock is acquired, you execute the job. Otherwise, if the timeout passes before the lock is acquired, you cancel the job."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The result of the job."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "An example of how to implement the "
											},
											{
												"kind": "code",
												"text": "`execute`"
											},
											{
												"kind": "text",
												"text": " method:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport { Context } from \"@medusajs/framework/types\"\nimport { setTimeout } from \"node:timers/promises\"\n\nclass MyLockingProviderService implements ILockingProvider {\n  // ...\nasync execute<T>(\n    keys: string | string[], \n    job: () => Promise<T>, \n    args?: { timeout?: number }, \n    sharedContext?: Context\n  ): Promise<T> {\n    // TODO you can add actions using the third-party client you initialized in the constructor\n    const timeout = Math.max(args?.timeout ?? 5, 1)\n    const timeoutSeconds = Number.isNaN(timeout) ? 1 : timeout\n    const cancellationToken = { cancelled: false }\n    const promises: Promise<any>[] = []\n\n    if (timeoutSeconds > 0) {\n      promises.push(this.getTimeout(timeoutSeconds, cancellationToken))\n    }\n\n    promises.push(\n      this.acquire_(\n        keys,\n        {\n          expire: args?.timeout ? timeoutSeconds : 0,\n        },\n        cancellationToken\n      )\n    )\n\n    await Promise.race(promises)\n\n    try {\n      return await job()\n    } finally {\n      await this.release(keys)\n    }\n  }\n\n  private async getTimeout(\n    seconds: number,\n    cancellationToken: { cancelled: boolean }\n  ): Promise<void> {\n    return new Promise(async (_, reject) => {\n      await setTimeout(seconds * 1000)\n      cancellationToken.cancelled = true\n      reject(new Error(\"Timed-out acquiring lock.\"))\n    })\n  }\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIn this example, you first determine the timeout for acquiring the lock. You also create a "
											},
											{
												"kind": "code",
												"text": "`cancellationToken`"
											},
											{
												"kind": "text",
												"text": " object that you'll use to determine if the lock aquisition has timed out.\n\nYou then create an array of the following promises:\n\n- A timeout promise that, if the lock acquisition takes longer than the timeout, sets the "
											},
											{
												"kind": "code",
												"text": "`cancelled`"
											},
											{
												"kind": "text",
												"text": " property of the "
											},
											{
												"kind": "code",
												"text": "`cancellationToken`"
											},
											{
												"kind": "text",
												"text": " object to "
											},
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": ".\n- A promise that acquires the lock. You use a private "
											},
											{
												"kind": "code",
												"text": "`acquire_`"
											},
											{
												"kind": "text",
												"text": " method which you can find its implementation in the "
											},
											{
												"kind": "code",
												"text": "`aquire`"
											},
											{
												"kind": "text",
												"text": " method's example. If the first promise \nresolves and cancels the lock acquisition, the lock will not be acquired.\n\nFinally, if the lock is acquired, you execute the job and release the lock after the job is done using the "
											},
											{
												"kind": "code",
												"text": "`release`"
											},
											{
												"kind": "text",
												"text": " method."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 146,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L146"
								}
							],
							"typeParameters": [
								{
									"id": 55639,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the job's result."
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 55640,
									"name": "keys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The keys to lock during the job's execution."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 55641,
									"name": "job",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The asynchronous job to execute while the keys are locked."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55642,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "index.ts",
													"line": 148,
													"character": 9,
													"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L148"
												}
											],
											"signatures": [
												{
													"id": 55643,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 148,
															"character": 9,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L148"
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 55639,
																"name": "T",
																"package": "@medusajs/types",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 55644,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arguments for the job execution."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55645,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 55646,
													"name": "timeout",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The timeout (in seconds) for acquiring the lock. If the time out is passed, the job is canceled and the lock is released."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 153,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L153"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														55646
													]
												}
											],
											"sources": [
												{
													"fileName": "index.ts",
													"line": 149,
													"character": 11,
													"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L149"
												}
											]
										}
									}
								},
								{
									"id": 55647,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/shared-context.ts",
											"qualifiedName": "Context"
										},
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 55639,
										"name": "T",
										"package": "@medusajs/types",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 55648,
					"name": "acquire",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 231,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L231"
						}
					],
					"signatures": [
						{
							"id": 55649,
							"name": "acquire",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method acquires a lock on the given keys. The Locking Module uses this method when you call its "
									},
									{
										"kind": "code",
										"text": "`acquire`"
									},
									{
										"kind": "text",
										"text": " method and your provider is the default provider,\nor you pass your provider's identifier to its "
									},
									{
										"kind": "code",
										"text": "`acquire`"
									},
									{
										"kind": "text",
										"text": " method.\n\nIn this method, you should only aquire the lock if the timeout hasn't passed. As explained in the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "execute",
										"target": 55637
									},
									{
										"kind": "text",
										"text": " method's example,\nyou can use a "
									},
									{
										"kind": "code",
										"text": "`cancellationToken`"
									},
									{
										"kind": "text",
										"text": " object to determine if the lock acquisition has timed out.\n\nIf the lock aquisition isn't canceled, you should aquire the lock, setting its expiry and owner. You should account for the following scenarios:\n\n- The lock doesn't have an owner and you don't pass an owner, in which case the lock can be extended or released by anyone.\n- The lock doesn't have an owner or has the same owner that you pass, in which case you can extend the lock's expiration time and set the owner.\n- The lock has an owner, but you pass a different owner, in which case the method should throw an error."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the lock is acquired."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "An example of how to implement the "
											},
											{
												"kind": "code",
												"text": "`acquire`"
											},
											{
												"kind": "text",
												"text": " method:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\ntype ResolvablePromise = {\n  promise: Promise<any>\n  resolve: () => void\n}\n\nclass MyLockingProviderService implements ILockingProvider {\n  // ...\n  async acquire(\n    keys: string | string[],\n    args?: {\n      ownerId?: string | null\n      expire?: number\n      awaitQueue?: boolean\n    }\n  ): Promise<void> {\n    return this.acquire_(keys, args)\n  }\n\n  async acquire_(\n    keys: string | string[],\n    args?: {\n      ownerId?: string | null\n      expire?: number\n      awaitQueue?: boolean\n    },\n    cancellationToken?: { cancelled: boolean }\n  ): Promise<void> {\n    keys = Array.isArray(keys) ? keys : [keys]\n    const { ownerId, expire } = args ?? {}\n\n    for (const key of keys) {\n      if (cancellationToken?.cancelled) {\n        throw new Error(\"Timed-out acquiring lock.\")\n      }\n\n      // assuming your client has this method and it validates the owner and expiration\n      const result = await this.client.acquireLock(key, ownerId, expire)\n\n      if (result !== 1) {\n        throw new Error(`Failed to acquire lock for key \"${key}\"`)\n      }\n    }\n  }\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIn this example, you add a private "
											},
											{
												"kind": "code",
												"text": "`acquire_`"
											},
											{
												"kind": "text",
												"text": " method that you use to acquire the lock. This method accepts an additional "
											},
											{
												"kind": "code",
												"text": "`cancellationToken`"
											},
											{
												"kind": "text",
												"text": " argument that you can use to determine if the lock acquisition has timed out.\nYou can then use this method in other methods, such as the "
											},
											{
												"kind": "code",
												"text": "`execute`"
											},
											{
												"kind": "text",
												"text": " method.\n\nIn the "
											},
											{
												"kind": "code",
												"text": "`acquire_`"
											},
											{
												"kind": "text",
												"text": " method, you loop through the keys and try to acquire the lock on each key if the lock acquisition hasn't timed out. If the lock acquisition fails, you throw an error.\nThis method assumes that the client you're integrating has a method called "
											},
											{
												"kind": "code",
												"text": "`acquireLock`"
											},
											{
												"kind": "text",
												"text": " that validates the owner and expiration time, and returns "
											},
											{
												"kind": "code",
												"text": "`1`"
											},
											{
												"kind": "text",
												"text": " if the lock is successfully acquired."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 231,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L231"
								}
							],
							"parameters": [
								{
									"id": 55650,
									"name": "keys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The keys to acquire the lock on."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 55651,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arguments for acquiring the lock."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55652,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 55653,
													"name": "ownerId",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The ID of the lock's owner. If specified, only the owner can release the lock or extend its expiration time."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 237,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L237"
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 55654,
													"name": "expire",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The expiration time (in seconds) for the lock. If the lock is already acquired and the owner is the same, the expiration time is extended\nby the value passed. If not specified, the lock does not expire."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 242,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L242"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														55653,
														55654
													]
												}
											],
											"sources": [
												{
													"fileName": "index.ts",
													"line": 233,
													"character": 11,
													"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L233"
												}
											]
										}
									}
								},
								{
									"id": 55655,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/shared-context.ts",
											"qualifiedName": "Context"
										},
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 55656,
					"name": "release",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 290,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L290"
						}
					],
					"signatures": [
						{
							"id": 55657,
							"name": "release",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method releases a lock on the given keys. The Locking Module uses this method when you call its "
									},
									{
										"kind": "code",
										"text": "`release`"
									},
									{
										"kind": "text",
										"text": " method and your provider is the default provider,\nor you pass your provider's identifier to its "
									},
									{
										"kind": "code",
										"text": "`release`"
									},
									{
										"kind": "text",
										"text": " method.\n\nIn this method, you should release the lock on the given keys. If the lock has an owner, you should only release the lock if the owner is the same as the one passed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the lock was successfully released. If the lock has a different owner than the one passed, the method returns "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "An example of how to implement the "
											},
											{
												"kind": "code",
												"text": "`release`"
											},
											{
												"kind": "text",
												"text": " method:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport { promiseAll } from \"@medusajs/framework/utils\"\n\nclass MyLockingProviderService implements ILockingProvider {\n  // ...\n  async release(\n    keys: string | string[], \n    args?: { ownerId?: string | null }, \n    sharedContext?: Context\n  ): Promise<boolean> {\n    const ownerId = args?.ownerId ?? \"*\"\n    keys = Array.isArray(keys) ? keys : [keys]\n\n    const releasePromises = keys.map(async (key) => {\n      // assuming your client has this method and it validates the owner\n      const result = await this.client.releaseLock(key, ownerId)\n      return result === 1\n    })\n\n    const results = await promiseAll(releasePromises)\n\n    return results.every((released) => released)\n  }\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIn this example, you loop through the keys and try to release the lock on each key using the client you're integrating. This implementation assumes that the client validates\nownership of the lock and returns a result of "
											},
											{
												"kind": "code",
												"text": "`1`"
											},
											{
												"kind": "text",
												"text": " if the lock is successfully released."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 290,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L290"
								}
							],
							"parameters": [
								{
									"id": 55658,
									"name": "keys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The keys to release the lock from."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 55659,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arguments for releasing the lock."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55660,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 55661,
													"name": "ownerId",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The ID of the lock's owner. The lock can be released either if it doesn't have an owner, or\nif its owner ID matches the one passed in this property."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 297,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L297"
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														55661
													]
												}
											],
											"sources": [
												{
													"fileName": "index.ts",
													"line": 292,
													"character": 11,
													"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L292"
												}
											]
										}
									}
								},
								{
									"id": 55662,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/shared-context.ts",
											"qualifiedName": "Context"
										},
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 55663,
					"name": "releaseAll",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 330,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L330"
						}
					],
					"signatures": [
						{
							"id": 55664,
							"name": "releaseAll",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method releases all locks. The Locking Module uses this method when you call its "
									},
									{
										"kind": "code",
										"text": "`releaseAll`"
									},
									{
										"kind": "text",
										"text": " method and your provider is the default provider,\nor you pass your provider's identifier to its "
									},
									{
										"kind": "code",
										"text": "`releaseAll`"
									},
									{
										"kind": "text",
										"text": " method.\n\nIn this method, you should release all locks if no owner is passed. If an owner is passed, you should only release the locks that the owner has acquired."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "An example of how to implement the "
											},
											{
												"kind": "code",
												"text": "`releaseAll`"
											},
											{
												"kind": "text",
												"text": " method:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nclass MyLockingProviderService implements ILockingProvider {\n  // ...\n  async releaseAll(\n    args?: { ownerId?: string | null }, \n    sharedContext?: Context\n  ): Promise<void> {\n    const ownerId = args?.ownerId ?? \"*\"\n\n    await this.client.releaseAllLock(ownerId)\n  }\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIn this example, you release all locks either of all owners or the owner passed as an argument. This implementation assumes that the client you're integrating has a method called "
											},
											{
												"kind": "code",
												"text": "`releaseAllLock`"
											},
											{
												"kind": "text",
												"text": " that releases all locks\nfor all owners or a specific owner."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 330,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L330"
								}
							],
							"parameters": [
								{
									"id": 55665,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arguments for releasing the locks."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55666,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 55667,
													"name": "ownerId",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The ID of a lock owner. If specified, all locks that the owner has acquired are released."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 335,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L335"
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														55667
													]
												}
											],
											"sources": [
												{
													"fileName": "index.ts",
													"line": 331,
													"character": 11,
													"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L331"
												}
											]
										}
									}
								},
								{
									"id": 55668,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/shared-context.ts",
											"qualifiedName": "Context"
										},
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						55637,
						55648,
						55656,
						55663
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 63,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L63"
				}
			]
		},
		{
			"id": 55669,
			"name": "ILockingModule",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 55670,
					"name": "execute",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 377,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L377"
						}
					],
					"signatures": [
						{
							"id": 55671,
							"name": "execute",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method executes a giuven asynchronous job with a lock on the given keys. You can optionally pass a \nprovider name to be used for locking. If no provider is passed, the default provider (in-memory or the \nprovider configuerd in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.ts`"
									},
									{
										"kind": "text",
										"text": ") will be used."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The result of the job execution."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "For example, to use the lock module when deleting a product:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nawait lockingModuleService.execute(\"prod_123\", async () => {\n   // assuming you've resolved the product service from the container\n   await productModuleService.delete(\"prod_123\")\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIn the above example, the product of ID "
											},
											{
												"kind": "code",
												"text": "`prod_123`"
											},
											{
												"kind": "text",
												"text": " is locked while it's being deleted.\n\nTo specify the provider to use for locking, you can pass the provider name in the "
											},
											{
												"kind": "code",
												"text": "`args`"
											},
											{
												"kind": "text",
												"text": " argument:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nawait lockingModuleService.execute(\"prod_123\", async () => {\n  // assuming you've resolved the product service from the container\n  await productModuleService.delete(\"prod_123\")\n}, {\n  provider: \"lp_my-lock\"\n})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 377,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L377"
								}
							],
							"typeParameters": [
								{
									"id": 55672,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the job's result."
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 55673,
									"name": "keys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The keys to lock durng the job's execution."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 55674,
									"name": "job",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The asynchronous job to execute while the keys are locked."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55675,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "index.ts",
													"line": 379,
													"character": 9,
													"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L379"
												}
											],
											"signatures": [
												{
													"id": 55676,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 379,
															"character": 9,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L379"
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 55672,
																"name": "T",
																"package": "@medusajs/types",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 55677,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arguments for the job execution."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55678,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 55679,
													"name": "timeout",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The timeout (in seconds) for acquiring the lock. If the time out is passed, the job is canceled and the lock is released.\nIts value defaults to "
															},
															{
																"kind": "code",
																"text": "`5`"
															},
															{
																"kind": "text",
																"text": " seconds if no value is passed or if you pass a value less than "
															},
															{
																"kind": "code",
																"text": "`1`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 385,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L385"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 55680,
													"name": "provider",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The provider name to use for locking. If no provider is passed, the default provider (in-memory or the provider configuerd in "
															},
															{
																"kind": "code",
																"text": "`medusa-config.ts`"
															},
															{
																"kind": "text",
																"text": ") will be used."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 389,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L389"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														55679,
														55680
													]
												}
											],
											"sources": [
												{
													"fileName": "index.ts",
													"line": 380,
													"character": 11,
													"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L380"
												}
											]
										}
									}
								},
								{
									"id": 55681,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/shared-context.ts",
											"qualifiedName": "Context"
										},
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 55672,
										"name": "T",
										"package": "@medusajs/types",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 55682,
					"name": "acquire",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 429,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L429"
						}
					],
					"signatures": [
						{
							"id": 55683,
							"name": "acquire",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method acquires a lock on the given keys. You can optionally pass a provider name to be used for locking. \nIf no provider is passed, the default provider (in-memory or the provider configuerd in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.ts`"
									},
									{
										"kind": "text",
										"text": ") will be used.\n\nYou can pass an owner for the lock, which limits who can extend or release the acquired lock. Then, if you use this method again\npassing the same owner, the lock's expiration time is extended with the value passed in the "
									},
									{
										"kind": "code",
										"text": "`expire`"
									},
									{
										"kind": "text",
										"text": " argument. Otherwise, if you pass a\ndifferent owner, the method throws an error."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the lock is acquired."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "For example, to acquire a lock on a product with ID "
											},
											{
												"kind": "code",
												"text": "`prod_123`"
											},
											{
												"kind": "text",
												"text": " for a user with ID "
											},
											{
												"kind": "code",
												"text": "`user_123`"
											},
											{
												"kind": "text",
												"text": ":\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nawait lockingModuleService.acquire(\"prod_123\", {\n  ownerId: \"user_123\",\n  expire: 60\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIn this example, you acquire a lock on the product with ID "
											},
											{
												"kind": "code",
												"text": "`prod_123`"
											},
											{
												"kind": "text",
												"text": " for the user with ID "
											},
											{
												"kind": "code",
												"text": "`user_123`"
											},
											{
												"kind": "text",
												"text": ". You extend the \nlock's expiration time by "
											},
											{
												"kind": "code",
												"text": "`60`"
											},
											{
												"kind": "text",
												"text": " seconds.\n\nTo specify the provider to use for locking, you can pass the provider name in the "
											},
											{
												"kind": "code",
												"text": "`args`"
											},
											{
												"kind": "text",
												"text": " argument:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nawait lockingModuleService.acquire(\"prod_123\", {\n  ownerId: \"user_123\",\n  expire: 60,\n  provider: \"lp_my-lock\"\n})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 429,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L429"
								}
							],
							"parameters": [
								{
									"id": 55684,
									"name": "keys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The keys to acquire the lock on."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 55685,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arguments for acquiring the lock."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55686,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 55687,
													"name": "ownerId",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The owner ID for the lock. If specified, only the owner can release the lock or extend its expiration time."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 435,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L435"
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 55688,
													"name": "expire",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The expiration time (in seconds) for the lock. If the lock is already acquired and the owner is the same, the expiration time is extended\nby the value passed. If not specified, the lock does not expire."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 440,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L440"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 55689,
													"name": "provider",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The provider name to use for locking. If no provider is passed, the default provider (in-memory or the provider configuerd in "
															},
															{
																"kind": "code",
																"text": "`medusa-config.ts`"
															},
															{
																"kind": "text",
																"text": ") will be used."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 444,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L444"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														55687,
														55688,
														55689
													]
												}
											],
											"sources": [
												{
													"fileName": "index.ts",
													"line": 431,
													"character": 11,
													"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L431"
												}
											]
										}
									}
								},
								{
									"id": 55690,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/shared-context.ts",
											"qualifiedName": "Context"
										},
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 55691,
					"name": "release",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 479,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L479"
						}
					],
					"signatures": [
						{
							"id": 55692,
							"name": "release",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method releases a lock on the given keys. You can optionally pass a provider name to be used for locking.\nIf no provider is passed, the default provider (in-memory or the provider configuerd in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.ts`"
									},
									{
										"kind": "text",
										"text": ") will be used.\n\nIf the lock has an owner, you must pass the same owner to release the lock."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the lock was successfully released. If the lock has a different owner than the one passed, the method returns "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "For example, to release a lock on a product with ID "
											},
											{
												"kind": "code",
												"text": "`prod_123`"
											},
											{
												"kind": "text",
												"text": " for a user with ID "
											},
											{
												"kind": "code",
												"text": "`user_123`"
											},
											{
												"kind": "text",
												"text": ":\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nawait lockingModuleService.release(\"prod_123\", {\n  ownerId: \"user_123\"\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIn this example, you release the lock on the product with ID "
											},
											{
												"kind": "code",
												"text": "`prod_123`"
											},
											{
												"kind": "text",
												"text": " for the user with ID "
											},
											{
												"kind": "code",
												"text": "`user_123`"
											},
											{
												"kind": "text",
												"text": ".\n\nTo specify the provider to use for locking, you can pass the provider name in the "
											},
											{
												"kind": "code",
												"text": "`args`"
											},
											{
												"kind": "text",
												"text": " argument:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nawait lockingModuleService.release(\"prod_123\", {\n  ownerId: \"user_123\",\n  provider: \"lp_my-lock\"\n})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 479,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L479"
								}
							],
							"parameters": [
								{
									"id": 55693,
									"name": "keys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The keys to release the lock from."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 55694,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arguments for releasing the lock."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55695,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 55696,
													"name": "ownerId",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The ID of the lock's owner. The lock can be released either if it doesn't have an owner, or \nif its owner ID matches the one passed in this property."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 486,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L486"
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 55697,
													"name": "provider",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The provider name to use for locking. If no provider is passed, the default provider (in-memory or the provider configuerd in "
															},
															{
																"kind": "code",
																"text": "`medusa-config.ts`"
															},
															{
																"kind": "text",
																"text": ") will be used."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 490,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L490"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														55696,
														55697
													]
												}
											],
											"sources": [
												{
													"fileName": "index.ts",
													"line": 481,
													"character": 11,
													"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L481"
												}
											]
										}
									}
								},
								{
									"id": 55698,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/shared-context.ts",
											"qualifiedName": "Context"
										},
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 55699,
					"name": "releaseAll",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 522,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L522"
						}
					],
					"signatures": [
						{
							"id": 55700,
							"name": "releaseAll",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method releases all locks. If you specify an owner ID, then all locks that the owner has acquired are released.\n\nYou can also pass a provider name to be used for locking. If no provider is passed, the default provider (in-memory or the provider configuerd in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.ts`"
									},
									{
										"kind": "text",
										"text": ") will be used."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "For example, to release all locks for a user with ID "
											},
											{
												"kind": "code",
												"text": "`user_123`"
											},
											{
												"kind": "text",
												"text": ":\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nawait lockingModuleService.releaseAll({\n  ownerId: \"user_123\"\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIn this example, you release all locks for the user with ID "
											},
											{
												"kind": "code",
												"text": "`user_123`"
											},
											{
												"kind": "text",
												"text": ".\n\nTo specify the provider to use for locking, you can pass the provider name in the "
											},
											{
												"kind": "code",
												"text": "`args`"
											},
											{
												"kind": "text",
												"text": " argument:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nawait lockingModuleService.releaseAll({\n  ownerId: \"user_123\",\n  provider: \"lp_my-lock\"\n})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 522,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L522"
								}
							],
							"parameters": [
								{
									"id": 55701,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arguments for releasing the locks."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55702,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 55703,
													"name": "ownerId",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The ID of a lock owner. If specified, all locks that the owner has acquired are released."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 527,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L527"
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 55704,
													"name": "provider",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The provider name to use for locking. If no provider is passed, the default provider (in-memory or the provider configuerd in "
															},
															{
																"kind": "code",
																"text": "`medusa-config.ts`"
															},
															{
																"kind": "text",
																"text": ") will be used."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.ts",
															"line": 531,
															"character": 6,
															"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L531"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														55703,
														55704
													]
												}
											],
											"sources": [
												{
													"fileName": "index.ts",
													"line": 523,
													"character": 11,
													"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L523"
												}
											]
										}
									}
								},
								{
									"id": 55705,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/shared-context.ts",
											"qualifiedName": "Context"
										},
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						55670,
						55682,
						55691,
						55699
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 341,
					"character": 17,
					"url": "https://github.com/medusajs/medusa/blob/e096af8b1b72b19e01f8d09cc50c7222d8459af1/packages/core/types/src/locking/index.ts#L341"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Interfaces",
			"children": [
				55636,
				55669
			]
		}
	],
	"packageName": "@medusajs/types",
	"symbolIdMap": {
		"55635": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": ""
		},
		"55636": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingProvider"
		},
		"55637": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingProvider.execute"
		},
		"55638": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingProvider.execute"
		},
		"55639": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "T"
		},
		"55640": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "keys"
		},
		"55641": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "job"
		},
		"55642": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55643": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55644": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "args"
		},
		"55645": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55646": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.timeout"
		},
		"55647": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "sharedContext"
		},
		"55648": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingProvider.acquire"
		},
		"55649": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingProvider.acquire"
		},
		"55650": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "keys"
		},
		"55651": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "args"
		},
		"55652": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55653": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.ownerId"
		},
		"55654": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.expire"
		},
		"55655": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "sharedContext"
		},
		"55656": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingProvider.release"
		},
		"55657": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingProvider.release"
		},
		"55658": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "keys"
		},
		"55659": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "args"
		},
		"55660": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55661": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.ownerId"
		},
		"55662": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "sharedContext"
		},
		"55663": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingProvider.releaseAll"
		},
		"55664": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingProvider.releaseAll"
		},
		"55665": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "args"
		},
		"55666": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55667": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.ownerId"
		},
		"55668": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "sharedContext"
		},
		"55669": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingModule"
		},
		"55670": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingModule.execute"
		},
		"55671": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingModule.execute"
		},
		"55672": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "T"
		},
		"55673": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "keys"
		},
		"55674": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "job"
		},
		"55675": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55676": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55677": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "args"
		},
		"55678": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55679": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.timeout"
		},
		"55680": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.provider"
		},
		"55681": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "sharedContext"
		},
		"55682": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingModule.acquire"
		},
		"55683": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingModule.acquire"
		},
		"55684": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "keys"
		},
		"55685": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "args"
		},
		"55686": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55687": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.ownerId"
		},
		"55688": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.expire"
		},
		"55689": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.provider"
		},
		"55690": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "sharedContext"
		},
		"55691": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingModule.release"
		},
		"55692": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingModule.release"
		},
		"55693": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "keys"
		},
		"55694": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "args"
		},
		"55695": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55696": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.ownerId"
		},
		"55697": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.provider"
		},
		"55698": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "sharedContext"
		},
		"55699": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingModule.releaseAll"
		},
		"55700": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "ILockingModule.releaseAll"
		},
		"55701": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "args"
		},
		"55702": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type"
		},
		"55703": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.ownerId"
		},
		"55704": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "__type.provider"
		},
		"55705": {
			"sourceFileName": "../../../../packages/core/types/src/locking/index.ts",
			"qualifiedName": "sharedContext"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/types/src/locking/index.ts"
		},
		"reflections": {
			"1": 55635
		}
	}
}
