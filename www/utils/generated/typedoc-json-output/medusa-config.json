{
	"id": 13602,
	"name": "medusa-config",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 13603,
			"name": "AdminOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Admin dashboard configurations."
					}
				]
			},
			"children": [
				{
					"id": 13604,
					"name": "disable",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether to disable the admin dashboard. If set to "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ", the admin dashboard is disabled,\nin both development and production environments. The default value is "
							},
							{
								"kind": "code",
								"text": "`false`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 13605,
					"name": "path",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The path to the admin dashboard. The default value is "
							},
							{
								"kind": "code",
								"text": "`/app`"
							},
							{
								"kind": "text",
								"text": ".\n\nThe value cannot be one of the reserved paths:\n- "
							},
							{
								"kind": "code",
								"text": "`/admin`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`/store`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`/auth`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`/`"
							}
						]
					},
					"type": {
						"type": "templateLiteral",
						"head": "/",
						"tail": [
							[
								{
									"type": "intrinsic",
									"name": "string"
								},
								""
							]
						]
					}
				},
				{
					"id": 13606,
					"name": "outDir",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The directory where the admin build is output. This is where the build process places the generated files.\nThe default value is "
							},
							{
								"kind": "code",
								"text": "`./build`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 13607,
					"name": "backendUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The URL of your Medusa backend. Defaults to an empty string, which means requests will hit the same server that serves the dashboard."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 13608,
					"name": "vite",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Configure the Vite configuration for the admin dashboard. This function receives the default Vite configuration\nand returns the modified configuration. The default value is "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 13609,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"signatures": [
								{
									"id": 13610,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 13611,
											"name": "config",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/node_modules/vite/dist/node/index.d.ts",
													"qualifiedName": "InlineConfig"
												},
												"name": "InlineConfig",
												"package": "vite"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/node_modules/vite/dist/node/index.d.ts",
											"qualifiedName": "InlineConfig"
										},
										"name": "InlineConfig",
										"package": "vite"
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						13604,
						13605,
						13606,
						13607,
						13608
					]
				}
			]
		},
		{
			"id": 13612,
			"name": "HttpCompressionOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "HTTP compression configurations."
					}
				]
			},
			"children": [
				{
					"id": 13613,
					"name": "enabled",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether HTTP compression is enabled. By default, it's "
							},
							{
								"kind": "code",
								"text": "`false`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 13614,
					"name": "level",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The level of zlib compression to apply to responses. A higher level will result in better compression but will take longer to complete.\nA lower level will result in less compression but will be much faster. The default value is "
							},
							{
								"kind": "code",
								"text": "`6`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 13615,
					"name": "memLevel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "How much memory should be allocated to the internal compression state. It's an integer in the range of 1 (minimum level) and 9 (maximum level).\nThe default value is "
							},
							{
								"kind": "code",
								"text": "`8`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 13616,
					"name": "threshold",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The minimum response body size that compression is applied on. Its value can be the number of bytes or any string accepted by the\n[bytes](https://www.npmjs.com/package/bytes) module. The default value is "
							},
							{
								"kind": "code",
								"text": "`1024`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						13613,
						13614,
						13615,
						13616
					]
				}
			]
		},
		{
			"id": 13617,
			"name": "ProjectConfigOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Essential configurations related to the Medusa backend, such as database and CORS configurations."
					}
				]
			},
			"children": [
				{
					"id": 13618,
					"name": "databaseName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The name of the database to connect to. If specified in "
							},
							{
								"kind": "code",
								"text": "`databaseUrl`"
							},
							{
								"kind": "text",
								"text": ", then itâ€™s not required to include it.\n\nMake sure to create the PostgreSQL database before using it. You can check how to create a database in\n[PostgreSQL's documentation](https://www.postgresql.org/docs/current/sql-createdatabase.html)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    databaseName: process.env.DATABASE_NAME ||\n      \"medusa-store\",\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 13619,
					"name": "databaseUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The connection URL of the database. The format of the connection URL for PostgreSQL is:\n\n"
							},
							{
								"kind": "code",
								"text": "```bash\npostgres://[user][:password]@[host][:port]/[dbname]\n```"
							},
							{
								"kind": "text",
								"text": "\n\nWhere:\n\n- "
							},
							{
								"kind": "code",
								"text": "`[user]`"
							},
							{
								"kind": "text",
								"text": ": (required) your PostgreSQL username. If not specified, the system's username is used by default. The database user that you use must have create privileges. If you're using the "
							},
							{
								"kind": "code",
								"text": "`postgres`"
							},
							{
								"kind": "text",
								"text": " superuser, then it should have these privileges by default. Otherwise, make sure to grant your user create privileges. You can learn how to do that in [PostgreSQL's documentation](https://www.postgresql.org/docs/current/ddl-priv.html).\n- "
							},
							{
								"kind": "code",
								"text": "`[:password]`"
							},
							{
								"kind": "text",
								"text": ": an optional password for the user. When provided, make sure to put "
							},
							{
								"kind": "code",
								"text": "`:`"
							},
							{
								"kind": "text",
								"text": " before the password.\n- "
							},
							{
								"kind": "code",
								"text": "`[host]`"
							},
							{
								"kind": "text",
								"text": ": (required) your PostgreSQL host. When run locally, it should be "
							},
							{
								"kind": "code",
								"text": "`localhost`"
							},
							{
								"kind": "text",
								"text": ".\n- "
							},
							{
								"kind": "code",
								"text": "`[:port]`"
							},
							{
								"kind": "text",
								"text": ": an optional port that the PostgreSQL server is listening on. By default, it's "
							},
							{
								"kind": "code",
								"text": "`5432`"
							},
							{
								"kind": "text",
								"text": ". When provided, make sure to put "
							},
							{
								"kind": "code",
								"text": "`:`"
							},
							{
								"kind": "text",
								"text": " before the port.\n- "
							},
							{
								"kind": "code",
								"text": "`[dbname]`"
							},
							{
								"kind": "text",
								"text": ": (required) the name of the database.\n\nYou can learn more about the connection URL format in [PostgreSQLâ€™s documentation](https://www.postgresql.org/docs/current/libpq-connect.html)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "For example, set the following database URL in your environment variables:\n\n"
									},
									{
										"kind": "code",
										"text": "```bash\nDATABASE_URL=postgres://postgres@localhost/medusa-store\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThen, use the value in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.js`"
									},
									{
										"kind": "text",
										"text": ":\n\n"
									},
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    databaseUrl: process.env.DATABASE_URL,\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 13620,
					"name": "databaseSchema",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The database schema to connect to. This is not required to provide if youâ€™re using the default schema, which is "
							},
							{
								"kind": "code",
								"text": "`public`"
							},
							{
								"kind": "text",
								"text": ".\n\n"
							},
							{
								"kind": "code",
								"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    databaseSchema: process.env.DATABASE_SCHEMA ||\n      \"custom\",\n    // ...\n  },\n  // ...\n})\n```"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 13621,
					"name": "databaseLogging",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This configuration specifies what database messages to log. Its value can be one of the following:\n\n- (default) A boolean value that indicates whether any messages should be logged.\n- The string value "
							},
							{
								"kind": "code",
								"text": "`all`"
							},
							{
								"kind": "text",
								"text": " that indicates all types of messages should be logged.\n- An array of log-level strings to indicate which type of messages to show in the logs. The strings can be "
							},
							{
								"kind": "code",
								"text": "`query`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`schema`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`error`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`warn`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`info`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`log`"
							},
							{
								"kind": "text",
								"text": ", or "
							},
							{
								"kind": "code",
								"text": "`migration`"
							},
							{
								"kind": "text",
								"text": ". Refer to [Typeormâ€™s documentation](https://typeorm.io/logging#logging-options) for more details on what each of these values means.\n\nIf this configuration isn't set, its default value is "
							},
							{
								"kind": "code",
								"text": "`false`"
							},
							{
								"kind": "text",
								"text": ", meaning no database messages are logged."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    databaseLogging: [\"query\", \"error\"]\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../node_modules/typeorm/logger/LoggerOptions.d.ts",
							"qualifiedName": "LoggerOptions"
						},
						"name": "LoggerOptions",
						"package": "typeorm"
					}
				},
				{
					"id": 13623,
					"name": "databaseDriverOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An object that includes additional configurations to pass to the database connection for v2. You can pass any configuration. One defined configuration to pass is\n"
							},
							{
								"kind": "code",
								"text": "`ssl`"
							},
							{
								"kind": "text",
								"text": " which enables support for TLS/SSL connections.\n\nThis is useful for production databases, which can be supported by setting the "
							},
							{
								"kind": "code",
								"text": "`rejectUnauthorized`"
							},
							{
								"kind": "text",
								"text": " attribute of "
							},
							{
								"kind": "code",
								"text": "`ssl`"
							},
							{
								"kind": "text",
								"text": " object to "
							},
							{
								"kind": "code",
								"text": "`false`"
							},
							{
								"kind": "text",
								"text": ".\nDuring development, itâ€™s recommended not to pass this option."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    databaseDriverOptions: process.env.NODE_ENV !== \"development\" ?\n      { ssl: { rejectUnauthorized: false } } : {}\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 13624,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 13625,
											"name": "connection",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 13626,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 13627,
															"name": "ssl",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Configure support for TLS/SSL connection"
																	}
																]
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 13628,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 13629,
																			"name": "rejectUnauthorized",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"summary": [
																					{
																						"kind": "text",
																						"text": "Whether to fail connection if the server certificate is verified against the list of supplied CAs and the hostname and no match is found."
																					}
																				]
																			},
																			"type": {
																				"type": "literal",
																				"value": false
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [
																				13629
																			]
																		}
																	]
																}
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																13627
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												13625
											]
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 13630,
					"name": "redisUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Used to specify the URL to connect to Redis. This is only used for scheduled jobs. If you omit this configuration, scheduled jobs won't work.\n\n:::note\n\nYou must first have Redis installed. You can refer to [Redis's installation guide](https://redis.io/docs/getting-started/installation/).\n\n:::\n\nThe Redis connection URL has the following format:\n\n"
							},
							{
								"kind": "code",
								"text": "```bash\nredis[s]://[[username][:password]@][host][:port][/db-number]\n```"
							},
							{
								"kind": "text",
								"text": "\n\nFor a local Redis installation, the connection URL should be "
							},
							{
								"kind": "code",
								"text": "`redis://localhost:6379`"
							},
							{
								"kind": "text",
								"text": " unless youâ€™ve made any changes to the Redis configuration during installation."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    redisUrl: process.env.REDIS_URL ||\n      \"redis://localhost:6379\",\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 13631,
					"name": "redisPrefix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The prefix set on all keys stored in Redis. The default value is "
							},
							{
								"kind": "code",
								"text": "`sess:`"
							},
							{
								"kind": "text",
								"text": ".\n\nIf this configuration option is provided, it is prepended to "
							},
							{
								"kind": "code",
								"text": "`sess:`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    redisPrefix: process.env.REDIS_URL || \"medusa:\",\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 13632,
					"name": "redisOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An object of options to pass ioredis. You can refer to [ioredisâ€™s RedisOptions documentation](https://redis.github.io/ioredis/index.html#RedisOptions)\nfor the list of available options."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    redisOptions: {\n      connectionName: process.env.REDIS_CONNECTION_NAME ||\n        \"medusa\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../node_modules/ioredis/built/redis/RedisOptions.d.ts",
							"qualifiedName": "RedisOptions"
						},
						"name": "RedisOptions",
						"package": "ioredis"
					}
				},
				{
					"id": 13633,
					"name": "sessionOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An object of options to pass to [express-session](https://www.npmjs.com/package/express-session)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    sessionOptions: {\n      name: process.env.SESSION_NAME || \"custom\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
							"qualifiedName": "SessionOptions"
						},
						"name": "SessionOptions",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 13635,
					"name": "jobsBatchSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Configure the number of staged jobs that are polled from the database. Default is "
							},
							{
								"kind": "code",
								"text": "`1000`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    jobsBatchSize: 100\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 13636,
					"name": "workerMode",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Configure the application's worker mode. Default is "
							},
							{
								"kind": "code",
								"text": "`shared`"
							},
							{
								"kind": "text",
								"text": ".\n\n- Use "
							},
							{
								"kind": "code",
								"text": "`shared`"
							},
							{
								"kind": "text",
								"text": " to run the application in a single process.\n- Use "
							},
							{
								"kind": "code",
								"text": "`worker`"
							},
							{
								"kind": "text",
								"text": " to run the a worker process only.\n- Use "
							},
							{
								"kind": "code",
								"text": "`server`"
							},
							{
								"kind": "text",
								"text": " to run the application server only.\n\nLearn more in [this guide](https://docs.medusajs.com/development/medusa-worker)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    workerMode: \"shared\"\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "shared"
							},
							{
								"type": "literal",
								"value": "worker"
							},
							{
								"type": "literal",
								"value": "server"
							}
						]
					}
				},
				{
					"id": 13637,
					"name": "http",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Configure the application's http-specific settings"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      cookieSecret: \"supersecret\",\n      compression: {\n        // ...\n      }\n    }\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 13638,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 13639,
									"name": "jwtSecret",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A random string used to create authentication tokens in the http layer. Although this configuration option is not required, itâ€™s highly recommended to set it for better security.\n\nIn a development environment, if this option is not set the default secret is "
											},
											{
												"kind": "code",
												"text": "`supersecret`"
											},
											{
												"kind": "text",
												"text": " However, in production, if this configuration is not set an error, an\nerror is thrown and the backend crashes."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      jwtSecret: \"supersecret\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13640,
									"name": "jwtExpiresIn",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The expiration time for the JWT token. If not provided, the default value is "
											},
											{
												"kind": "code",
												"text": "`24h`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      jwtExpiresIn: \"2d\"\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13641,
									"name": "cookieSecret",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A random string used to create cookie tokens in the http layer. Although this configuration option is not required, itâ€™s highly recommended to set it for better security.\n\nIn a development environment, if this option is not set, the default secret is "
											},
											{
												"kind": "code",
												"text": "`supersecret`"
											},
											{
												"kind": "text",
												"text": " However, in production, if this configuration is not set, an error is thrown and\nthe backend crashes."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      cookieSecret: \"supersecret\"\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13642,
									"name": "authCors",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Medusa backendâ€™s API Routes are protected by Cross-Origin Resource Sharing (CORS). So, only allowed URLs or URLs matching a specified pattern can send requests to the backendâ€™s API Routes.\n\n"
											},
											{
												"kind": "code",
												"text": "`cors`"
											},
											{
												"kind": "text",
												"text": " is a string used to specify the accepted URLs or patterns for API Routes starting with "
											},
											{
												"kind": "code",
												"text": "`/auth`"
											},
											{
												"kind": "text",
												"text": ". It can either be one accepted origin, or a comma-separated list of accepted origins.\n\nEvery origin in that list must either be:\n\n1. A URL. For example, "
											},
											{
												"kind": "code",
												"text": "`http://localhost:7001`"
											},
											{
												"kind": "text",
												"text": ". The URL must not end with a backslash;\n2. Or a regular expression pattern that can match more than one origin. For example, "
											},
											{
												"kind": "code",
												"text": "`.example.com`"
											},
											{
												"kind": "text",
												"text": ". The regex pattern that the backend tests for is "
											},
											{
												"kind": "code",
												"text": "`^([/~@;%#'])(.*?)\\1([gimsuy]*)$`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "text",
														"text": "Some example values of common use cases:\n\n"
													},
													{
														"kind": "code",
														"text": "```bash\n# Allow different ports locally starting with 700\nAUTH_CORS=/http://localhost:700\\d+$/\n\n# Allow any origin ending with vercel.app. For example, admin.vercel.app\nAUTH_CORS=/vercel\\.app$/\n\n# Allow all HTTP requests\nAUTH_CORS=/http://.+/\n```"
													},
													{
														"kind": "text",
														"text": "\n\nThen, set the configuration in "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ":\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      authCors: process.env.AUTH_CORS\n    }\n    // ...\n  },\n  // ...\n})\n```"
													},
													{
														"kind": "text",
														"text": "\n\nIf youâ€™re adding the value directly within "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ", make sure to add an extra escaping "
													},
													{
														"kind": "code",
														"text": "`/`"
													},
													{
														"kind": "text",
														"text": " for every backslash in the pattern. For example:\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      authCors: \"/http:\\\\/\\\\/localhost:700\\\\d+$/\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13643,
									"name": "compression",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configure HTTP compression from the application layer. If you have access to the HTTP server, the recommended approach would be to enable it there.\nHowever, some platforms don't offer access to the HTTP layer and in those cases, this is a good alternative.\n\nIts value is an object that has the following properties:\n\nIf you enable HTTP compression and you want to disable it for specific API Routes, you can pass in the request header "
											},
											{
												"kind": "code",
												"text": "`\"x-no-compression\": true`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      compression: {\n        enabled: true,\n        level: 6,\n        memLevel: 8,\n        threshold: 1024\n      }\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 13612,
										"name": "HttpCompressionOptions",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 13644,
									"name": "storeCors",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Medusa backendâ€™s API Routes are protected by Cross-Origin Resource Sharing (CORS). So, only allowed URLs or URLs matching a specified pattern can send requests to the backendâ€™s API Routes.\n\n"
											},
											{
												"kind": "code",
												"text": "`store_cors`"
											},
											{
												"kind": "text",
												"text": " is a string used to specify the accepted URLs or patterns for store API Routes. It can either be one accepted origin, or a comma-separated list of accepted origins.\n\nEvery origin in that list must either be:\n\n1. A URL. For example, "
											},
											{
												"kind": "code",
												"text": "`http://localhost:8000`"
											},
											{
												"kind": "text",
												"text": ". The URL must not end with a backslash;\n2. Or a regular expression pattern that can match more than one origin. For example, "
											},
											{
												"kind": "code",
												"text": "`.example.com`"
											},
											{
												"kind": "text",
												"text": ". The regex pattern that the backend tests for is "
											},
											{
												"kind": "code",
												"text": "`^([/~@;%#'])(.*?)\\1([gimsuy]*)$`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "text",
														"text": "Some example values of common use cases:\n\n"
													},
													{
														"kind": "code",
														"text": "```bash\n# Allow different ports locally starting with 800\nSTORE_CORS=/http://localhost:800\\d+$/\n\n# Allow any origin ending with vercel.app. For example, storefront.vercel.app\nSTORE_CORS=/vercel\\.app$/\n\n# Allow all HTTP requests\nSTORE_CORS=/http://.+/\n```"
													},
													{
														"kind": "text",
														"text": "\n\nThen, set the configuration in "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ":\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      storeCors: process.env.STORE_CORS,\n    }\n    // ...\n  },\n  // ...\n})\n```"
													},
													{
														"kind": "text",
														"text": "\n\nIf youâ€™re adding the value directly within "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ", make sure to add an extra escaping "
													},
													{
														"kind": "code",
														"text": "`/`"
													},
													{
														"kind": "text",
														"text": " for every backslash in the pattern. For example:\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      storeCors: \"/vercel\\\\.app$/\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13645,
									"name": "adminCors",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Medusa backendâ€™s API Routes are protected by Cross-Origin Resource Sharing (CORS). So, only allowed URLs or URLs matching a specified pattern can send requests to the backendâ€™s API Routes.\n\n"
											},
											{
												"kind": "code",
												"text": "`admin_cors`"
											},
											{
												"kind": "text",
												"text": " is a string used to specify the accepted URLs or patterns for admin API Routes. It can either be one accepted origin, or a comma-separated list of accepted origins.\n\nEvery origin in that list must either be:\n\n1. A URL. For example, "
											},
											{
												"kind": "code",
												"text": "`http://localhost:7001`"
											},
											{
												"kind": "text",
												"text": ". The URL must not end with a backslash;\n2. Or a regular expression pattern that can match more than one origin. For example, "
											},
											{
												"kind": "code",
												"text": "`.example.com`"
											},
											{
												"kind": "text",
												"text": ". The regex pattern that the backend tests for is "
											},
											{
												"kind": "code",
												"text": "`^([/~@;%#'])(.*?)\\1([gimsuy]*)$`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "text",
														"text": "Some example values of common use cases:\n\n"
													},
													{
														"kind": "code",
														"text": "```bash\n# Allow different ports locally starting with 700\nADMIN_CORS=/http://localhost:700\\d+$/\n\n# Allow any origin ending with vercel.app. For example, admin.vercel.app\nADMIN_CORS=/vercel\\.app$/\n\n# Allow all HTTP requests\nADMIN_CORS=/http://.+/\n```"
													},
													{
														"kind": "text",
														"text": "\n\nThen, set the configuration in "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ":\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      adminCors: process.env.ADMIN_CORS,\n    }\n    // ...\n  },\n  // ...\n})\n```"
													},
													{
														"kind": "text",
														"text": "\n\nIf youâ€™re adding the value directly within "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ", make sure to add an extra escaping "
													},
													{
														"kind": "code",
														"text": "`/`"
													},
													{
														"kind": "text",
														"text": " for every backslash in the pattern. For example:\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      adminCors: \"/vercel\\\\.app$/\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13646,
									"name": "authMethodsPerActor",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Optionally you can specify the supported authentication providers per actor type (such as user, customer, or any custom actors).\nFor example, you only want to allow SSO logins for "
											},
											{
												"kind": "code",
												"text": "`users`"
											},
											{
												"kind": "text",
												"text": " to the admin, while you want to allow email/password logins for "
											},
											{
												"kind": "code",
												"text": "`customers`"
											},
											{
												"kind": "text",
												"text": " to the storefront.\n\n"
											},
											{
												"kind": "code",
												"text": "`authMethodsPerActor`"
											},
											{
												"kind": "text",
												"text": " is a a map where the actor type (eg. 'user') is the key, and an array of supported auth providers as the value."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "text",
														"text": "Some example values of common use cases:\n\nThen, set the configuration in "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ":\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      authMethodsPerActor: {\n        user: [\"email\"],\n        customer: [\"emailpas\", \"google\"]\n      }\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										13639,
										13640,
										13641,
										13642,
										13643,
										13644,
										13645,
										13646
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						13618,
						13619,
						13620,
						13621,
						13623,
						13630,
						13631,
						13632,
						13633,
						13635,
						13636,
						13637
					]
				}
			]
		},
		{
			"id": 13647,
			"name": "ConfigModule",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The configurations for your Medusa backend are in "
					},
					{
						"kind": "code",
						"text": "`medusa-config.js`"
					},
					{
						"kind": "text",
						"text": " located in the root of your Medusa project. The configurations include database, modules, and plugin configurations, among other configurations.\n\n"
					},
					{
						"kind": "code",
						"text": "`medusa-config.js`"
					},
					{
						"kind": "text",
						"text": " exports an object having the following properties:\n\n- "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "projectConfig",
						"target": 13648,
						"tsLinkText": "projectConfig"
					},
					{
						"kind": "text",
						"text": " (required): An object that holds general configurations related to the Medusa backend, such as database or CORS configurations.\n- "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "admin",
						"target": 13649,
						"tsLinkText": "admin"
					},
					{
						"kind": "text",
						"text": ": An object that holds admin-related configurations.\n- "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "ConfigModule.plugins | plugins",
						"target": {
							"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
							"qualifiedName": "__type.plugins"
						},
						"tsLinkText": "plugins"
					},
					{
						"kind": "text",
						"text": ": An array of plugin configurations that defines what plugins are installed and optionally specifies each of their configurations.\n- "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "modules",
						"target": 13654,
						"tsLinkText": "modules"
					},
					{
						"kind": "text",
						"text": ": An object that defines what modules are installed and optionally specifies each of their configurations.\n- "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "featureFlags",
						"target": 13655,
						"tsLinkText": "featureFlags"
					},
					{
						"kind": "text",
						"text": ": An object that enables or disables features guarded by a feature flag.\n\nFor example:\n\n"
					},
					{
						"kind": "code",
						"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    // ...\n  },\n  admin: {\n    // ...\n  },\n  modules: {\n    // ...\n  },\n  featureFlags: {\n    // ...\n  }\n})\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---\n\n## Environment Variables\n\nIt's highly recommended to store the values of configurations in environment variables, then reference them within "
					},
					{
						"kind": "code",
						"text": "`medusa-config.js`"
					},
					{
						"kind": "text",
						"text": ".\n\nDuring development, you can set your environment variables in the "
					},
					{
						"kind": "code",
						"text": "`.env`"
					},
					{
						"kind": "text",
						"text": " file at the root of your Medusa backend project. In production,\nsetting the environment variables depends on the hosting provider.\n\n---"
					}
				]
			},
			"children": [
				{
					"id": 13648,
					"name": "projectConfig",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This property holds essential configurations related to the Medusa backend, such as database and CORS configurations."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13617,
						"name": "ProjectConfigOptions",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 13649,
					"name": "admin",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Admin dashboard configurations."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  admin: {\n    backendUrl: process.env.MEDUSA_BACKEND_URL ||\n      \"http://localhost:9000\"\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13603,
						"name": "AdminOptions",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 13654,
					"name": "modules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "In Medusa, commerce and core logic are modularized to allow developers to extend or replace certain [modules](https://docs.medusajs.com/development/modules/overview)\nwith custom implementations.\n\nAside from installing the module with NPM, you must add it to the exported object in "
							},
							{
								"kind": "code",
								"text": "`medusa-config.js`"
							},
							{
								"kind": "text",
								"text": ".\n\nThe keys of the "
							},
							{
								"kind": "code",
								"text": "`modules`"
							},
							{
								"kind": "text",
								"text": " configuration object refer to the module's registration name. Its value can be one of the following:\n\n1. A boolean value indicating whether the module type is enabled. This is only supported for Medusa's commerce and architectural modules;\n2. Or an object having the following properties:\n    1. "
							},
							{
								"kind": "code",
								"text": "`resolve`"
							},
							{
								"kind": "text",
								"text": ": a string indicating the path to the module relative to "
							},
							{
								"kind": "code",
								"text": "`src`"
							},
							{
								"kind": "text",
								"text": ", or the module's NPM package name.\n    2. "
							},
							{
								"kind": "code",
								"text": "`options`"
							},
							{
								"kind": "text",
								"text": ": (optional) an object indicating the options to pass to the module.\n    3. "
							},
							{
								"kind": "code",
								"text": "`definition`"
							},
							{
								"kind": "text",
								"text": ": (optional) an object of extra configurations, such as "
							},
							{
								"kind": "code",
								"text": "`isQueryable`"
							},
							{
								"kind": "text",
								"text": " used when a module has relationships."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  modules: {\n    helloModuleService: {\n      resolve: \"./modules/hello\"\n    }\n  }\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Partial"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/modules-sdk/index.ts",
															"qualifiedName": "InternalModuleDeclaration"
														},
														"name": "InternalModuleDeclaration",
														"package": "@medusajs/types"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/modules-sdk/index.ts",
															"qualifiedName": "ExternalModuleDeclaration"
														},
														"name": "ExternalModuleDeclaration",
														"package": "@medusajs/types"
													}
												]
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								]
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 13655,
					"name": "featureFlags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Some features in the Medusa backend are guarded by a feature flag. This ensures constant shipping of new features while maintaining the engineâ€™s stability.\n\nYou can specify whether a feature should or shouldnâ€™t be used in your backend by enabling its feature flag. Feature flags can be enabled through either environment\nvariables or through this configuration exported in "
							},
							{
								"kind": "code",
								"text": "`medusa-config.js`"
							},
							{
								"kind": "text",
								"text": ".\n\nThe "
							},
							{
								"kind": "code",
								"text": "`featureFlags`"
							},
							{
								"kind": "text",
								"text": " configuration is an object. Its properties are the names of the feature flags. Each propertyâ€™s value is a boolean indicating whether the feature flag is enabled.\n\nYou can find available feature flags and their key name [here](https://github.com/medusajs/medusa/tree/develop/packages/medusa/src/loaders/feature-flags)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  featureFlags: {\n    product_categories: true,\n    // ...\n  }\n  // ...\n})\n```"
									},
									{
										"kind": "text",
										"text": "\n\n:::note\n\nAfter enabling a feature flag, make sure to run migrations as it may require making changes to the database.\n\n:::"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						13648,
						13649,
						13654,
						13655
					]
				}
			]
		},
		{
			"id": 13656,
			"name": "PluginDetails",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 13657,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 13658,
							"name": "resolve",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 13659,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 13660,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 13661,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 13662,
							"name": "version",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								13658,
								13659,
								13660,
								13661,
								13662
							]
						}
					]
				}
			}
		}
	],
	"groups": [
		{
			"title": "Interfaces",
			"children": [
				13603,
				13612,
				13617,
				13647
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				13656
			]
		}
	],
	"packageName": "@medusajs/types",
	"symbolIdMap": {
		"13602": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": ""
		},
		"13603": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "AdminOptions"
		},
		"13604": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.disable"
		},
		"13605": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.path"
		},
		"13606": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.outDir"
		},
		"13607": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.backendUrl"
		},
		"13608": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.vite"
		},
		"13609": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type"
		},
		"13610": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type"
		},
		"13611": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "config"
		},
		"13612": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "HttpCompressionOptions"
		},
		"13613": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.enabled"
		},
		"13614": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.level"
		},
		"13615": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.memLevel"
		},
		"13616": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.threshold"
		},
		"13617": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "ProjectConfigOptions"
		},
		"13618": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.databaseName"
		},
		"13619": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.databaseUrl"
		},
		"13620": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.databaseSchema"
		},
		"13621": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.databaseLogging"
		},
		"13623": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.databaseDriverOptions"
		},
		"13624": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type"
		},
		"13625": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.connection"
		},
		"13626": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type"
		},
		"13627": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.ssl"
		},
		"13628": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type"
		},
		"13629": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.rejectUnauthorized"
		},
		"13630": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.redisUrl"
		},
		"13631": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.redisPrefix"
		},
		"13632": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.redisOptions"
		},
		"13633": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.sessionOptions"
		},
		"13635": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.jobsBatchSize"
		},
		"13636": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.workerMode"
		},
		"13637": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.http"
		},
		"13638": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type"
		},
		"13639": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.jwtSecret"
		},
		"13640": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.jwtExpiresIn"
		},
		"13641": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.cookieSecret"
		},
		"13642": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.authCors"
		},
		"13643": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.compression"
		},
		"13644": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.storeCors"
		},
		"13645": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.adminCors"
		},
		"13646": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.authMethodsPerActor"
		},
		"13647": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "ConfigModule"
		},
		"13648": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.projectConfig"
		},
		"13649": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.admin"
		},
		"13654": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.modules"
		},
		"13655": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.featureFlags"
		},
		"13656": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "PluginDetails"
		},
		"13657": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type"
		},
		"13658": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.resolve"
		},
		"13659": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.name"
		},
		"13660": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.id"
		},
		"13661": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.options"
		},
		"13662": {
			"sourceFileName": "../../../../packages/core/types/src/common/config-module.ts",
			"qualifiedName": "__type.version"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/types/src/common/config-module.ts"
		},
		"reflections": {
			"1": 13602
		}
	}
}