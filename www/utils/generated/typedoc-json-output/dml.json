{
	"id": 40024,
	"name": "dml",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 40025,
			"name": "entity-builder",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 40026,
					"name": "DefineOptions",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 40027,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 40028,
											"name": "name",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The data model's name."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 40029,
											"name": "tableName",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the data model's table in the database."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												40028,
												40029
											]
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 40030,
					"name": "ManyToManyOptions",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
									"qualifiedName": "RelationshipOptions"
								},
								"name": "RelationshipOptions",
								"package": "@medusajs/types"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 40031,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 40032,
													"name": "pivotTable",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The name of the pivot table\ncreated in the database for this relationship."
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 40034,
													"name": "joinColumn",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The column name in the pivot table that for the current entity"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												},
												{
													"id": 40035,
													"name": "inverseJoinColumn",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The column name in the pivot table for the opposite entity"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														40032,
														40034,
														40035
													]
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 40036,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 40038,
													"name": "pivotEntity",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "A function that returns the data model\nrepresenting the pivot table created in the\ndatabase for this relationship."
															}
														]
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 40039,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"signatures": [
																{
																	"id": 40040,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 40114,
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "any"
																			},
																			{
																				"type": "intrinsic",
																				"name": "any"
																			}
																		],
																		"name": "DmlEntity",
																		"package": "@medusajs/utils"
																	}
																}
															]
														}
													}
												},
												{
													"id": 40041,
													"name": "joinColumn",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The column name in the pivot table that for the current entity"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												},
												{
													"id": 40042,
													"name": "inverseJoinColumn",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The column name in the pivot table for the opposite entity"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														40038,
														40041,
														40042
													]
												}
											]
										}
									}
								]
							}
						]
					}
				},
				{
					"id": 40043,
					"name": "EntityBuilder",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Entity builder exposes the API to create an entity and define its\nschema using the shorthand methods."
							}
						]
					},
					"children": [
						{
							"id": 40044,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"signatures": [
								{
									"id": 40045,
									"name": "new EntityBuilder",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 40043,
										"name": "EntityBuilder",
										"package": "@medusajs/utils"
									}
								}
							]
						},
						{
							"id": 40049,
							"name": "define",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"signatures": [
								{
									"id": 40050,
									"name": "define",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "This method defines a data model."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  id: model.id(),\n  name: model.text(),\n})\n\nexport default MyCustom\n```"
													}
												]
											}
										]
									},
									"typeParameters": [
										{
											"id": 40051,
											"name": "Schema",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The type of the accepted schema in the second parameter of the method."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "DMLSchema"
												},
												"name": "DMLSchema",
												"package": "@medusajs/types"
											}
										},
										{
											"id": 40052,
											"name": "TConfig",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isConst": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "IDmlEntityConfig"
												},
												"name": "IDmlEntityConfig",
												"package": "@medusajs/types"
											}
										}
									],
									"parameters": [
										{
											"id": 40053,
											"name": "nameOrConfig",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Either the data model's name, or configurations to name the data model.\nThe data model's name must be unique."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 40052,
												"name": "TConfig",
												"package": "@medusajs/utils",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 40054,
											"name": "schema",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The schema of the data model's properties."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 40051,
												"name": "Schema",
												"package": "@medusajs/utils",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 40114,
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 40051,
														"name": "Schema",
														"package": "@medusajs/utils",
														"refersToTypeParameter": true
													},
													{
														"type": "mapped",
														"parameter": "K",
														"parameterType": {
															"type": "union",
															"types": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "intrinsic",
																	"name": "number"
																},
																{
																	"type": "intrinsic",
																	"name": "symbol"
																}
															]
														},
														"templateType": {
															"type": "indexedAccess",
															"indexType": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../../packages/core/utils/src/dml/helpers/entity-builder/create-big-number-properties.ts",
																	"qualifiedName": "K"
																},
																"name": "K",
																"package": "@medusajs/utils",
																"refersToTypeParameter": true
															},
															"objectType": {
																"type": "reference",
																"target": 40051,
																"name": "Schema",
																"package": "@medusajs/utils",
																"refersToTypeParameter": true
															}
														}
													},
													{
														"type": "mapped",
														"parameter": "K",
														"parameterType": {
															"type": "union",
															"types": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "intrinsic",
																	"name": "number"
																},
																{
																	"type": "intrinsic",
																	"name": "symbol"
																}
															]
														},
														"templateType": {
															"type": "conditional",
															"checkType": {
																"type": "indexedAccess",
																"indexType": {
																	"type": "reference",
																	"target": {
																		"sourceFileName": "../../../../packages/core/utils/src/dml/helpers/entity-builder/create-big-number-properties.ts",
																		"qualifiedName": "K"
																	},
																	"name": "K",
																	"package": "@medusajs/utils",
																	"refersToTypeParameter": true
																},
																"objectType": {
																	"type": "reference",
																	"target": 40051,
																	"name": "Schema",
																	"package": "@medusajs/utils",
																	"refersToTypeParameter": true
																}
															},
															"extendsType": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../../packages/core/utils/src/dml/properties/nullable.ts",
																	"qualifiedName": "NullableModifier"
																},
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "number"
																	},
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/big-number.ts",
																			"qualifiedName": "BigNumberProperty"
																		},
																		"name": "BigNumberProperty",
																		"package": "@medusajs/utils"
																	}
																],
																"name": "NullableModifier",
																"package": "@medusajs/utils"
															},
															"trueType": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../../packages/core/utils/src/dml/properties/nullable.ts",
																	"qualifiedName": "NullableModifier"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Record"
																		},
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "string"
																			},
																			{
																				"type": "intrinsic",
																				"name": "unknown"
																			}
																		],
																		"name": "Record",
																		"package": "typescript"
																	},
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/json.ts",
																			"qualifiedName": "JSONProperty"
																		},
																		"name": "JSONProperty",
																		"package": "@medusajs/utils"
																	}
																],
																"name": "NullableModifier",
																"package": "@medusajs/utils"
															},
															"falseType": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../../packages/core/utils/src/dml/properties/json.ts",
																	"qualifiedName": "JSONProperty"
																},
																"name": "JSONProperty",
																"package": "@medusajs/utils"
															}
														},
														"nameType": {
															"type": "conditional",
															"checkType": {
																"type": "indexedAccess",
																"indexType": {
																	"type": "reference",
																	"target": {
																		"sourceFileName": "../../../../packages/core/utils/src/dml/helpers/entity-builder/create-big-number-properties.ts",
																		"qualifiedName": "K"
																	},
																	"name": "K",
																	"package": "@medusajs/utils",
																	"refersToTypeParameter": true
																},
																"objectType": {
																	"type": "reference",
																	"target": 40051,
																	"name": "Schema",
																	"package": "@medusajs/utils",
																	"refersToTypeParameter": true
																}
															},
															"extendsType": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/big-number.ts",
																			"qualifiedName": "BigNumberProperty"
																		},
																		"name": "BigNumberProperty",
																		"package": "@medusajs/utils"
																	},
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/nullable.ts",
																			"qualifiedName": "NullableModifier"
																		},
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "number"
																			},
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../../../packages/core/utils/src/dml/properties/big-number.ts",
																					"qualifiedName": "BigNumberProperty"
																				},
																				"name": "BigNumberProperty",
																				"package": "@medusajs/utils"
																			}
																		],
																		"name": "NullableModifier",
																		"package": "@medusajs/utils"
																	}
																]
															},
															"trueType": {
																"type": "templateLiteral",
																"head": "raw_",
																"tail": [
																	[
																		{
																			"type": "intersection",
																			"types": [
																				{
																					"type": "intrinsic",
																					"name": "string"
																				},
																				{
																					"type": "reference",
																					"target": {
																						"sourceFileName": "../../../../packages/core/utils/src/dml/helpers/entity-builder/create-big-number-properties.ts",
																						"qualifiedName": "K"
																					},
																					"name": "K",
																					"package": "@medusajs/utils",
																					"refersToTypeParameter": true
																				}
																			]
																		},
																		""
																	]
																]
															},
															"falseType": {
																"type": "intrinsic",
																"name": "never"
															}
														}
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/utils/src/dml/helpers/entity-builder/create-default-properties.ts",
															"qualifiedName": "DMLSchemaDefaults"
														},
														"name": "DMLSchemaDefaults",
														"package": "@medusajs/utils"
													}
												]
											},
											{
												"type": "reference",
												"target": 40052,
												"name": "TConfig",
												"package": "@medusajs/utils",
												"refersToTypeParameter": true
											}
										],
										"name": "DmlEntity",
										"package": "@medusajs/utils"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								40044
							]
						},
						{
							"title": "Methods",
							"children": [
								40049,
								40055,
								40060,
								40062,
								40064,
								40066,
								40068,
								40070,
								40072,
								40074,
								40076,
								40080,
								40097,
								40102,
								40107
							]
						}
					]
				},
				{
					"id": 40112,
					"name": "model",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"type": {
						"type": "reference",
						"target": 40043,
						"name": "EntityBuilder",
						"package": "@medusajs/utils"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						40043
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						40026,
						40030
					]
				},
				{
					"title": "Variables",
					"children": [
						40112
					]
				}
			]
		},
		{
			"id": 40113,
			"name": "entity",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 40114,
					"name": "DmlEntity",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Dml entity is a representation of a DML model with a unique\nname, its schema and relationships."
							}
						]
					},
					"children": [
						{
							"id": 40148,
							"name": "[IsDmlEntity]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 40124,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
									"qualifiedName": "InferDmlEntityNameFromConfig"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 40121,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "DmlEntity.TConfig",
										"refersToTypeParameter": true
									}
								],
								"name": "InferDmlEntityNameFromConfig",
								"package": "@medusajs/types"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IDmlEntity.name"
							}
						},
						{
							"id": 40125,
							"name": "schema",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 40120,
								"name": "Schema",
								"package": "@medusajs/utils",
								"qualifiedName": "DmlEntity.Schema",
								"refersToTypeParameter": true
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IDmlEntity.schema"
							}
						},
						{
							"id": 40118,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"signatures": [
								{
									"id": 40119,
									"name": "new DmlEntity",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"typeParameters": [
										{
											"id": 40120,
											"name": "Schema",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "DMLSchema"
												},
												"name": "DMLSchema",
												"package": "@medusajs/types"
											}
										},
										{
											"id": 40121,
											"name": "TConfig",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isConst": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "IDmlEntityConfig"
												},
												"name": "IDmlEntityConfig",
												"package": "@medusajs/types"
											}
										}
									],
									"parameters": [
										{
											"id": 40122,
											"name": "nameOrConfig",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 40121,
												"name": "TConfig",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.TConfig",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 40123,
											"name": "schema",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 40120,
												"name": "Schema",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.Schema",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 40114,
										"typeArguments": [
											{
												"type": "reference",
												"target": 40120,
												"name": "Schema",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.Schema",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 40121,
												"name": "TConfig",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.TConfig",
												"refersToTypeParameter": true
											}
										],
										"name": "DmlEntity",
										"package": "@medusajs/utils"
									}
								}
							]
						},
						{
							"id": 40115,
							"name": "isDmlEntity",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 40116,
									"name": "isDmlEntity",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A static method to check if an entity is an instance of DmlEntity.\nIt allows us to identify a specific object as being an instance of\nDmlEntity."
											}
										]
									},
									"parameters": [
										{
											"id": 40117,
											"name": "entity",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "entity",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": 40114,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "any"
												},
												{
													"type": "intrinsic",
													"name": "any"
												}
											],
											"name": "DmlEntity",
											"package": "@medusajs/utils"
										}
									}
								}
							]
						},
						{
							"id": 40130,
							"name": "parse",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"signatures": [
								{
									"id": 40131,
									"name": "parse",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Parse entity to get its underlying information"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 40132,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 40133,
													"name": "name",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
															"qualifiedName": "InferDmlEntityNameFromConfig"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 40121,
																"name": "TConfig",
																"package": "@medusajs/utils",
																"qualifiedName": "DmlEntity.TConfig",
																"refersToTypeParameter": true
															}
														],
														"name": "InferDmlEntityNameFromConfig",
														"package": "@medusajs/types"
													}
												},
												{
													"id": 40134,
													"name": "tableName",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 40135,
													"name": "schema",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
															"qualifiedName": "DMLSchema"
														},
														"name": "DMLSchema",
														"package": "@medusajs/types"
													}
												},
												{
													"id": 40136,
													"name": "cascades",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
															"qualifiedName": "EntityCascades"
														},
														"typeArguments": [
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"name": "EntityCascades",
														"package": "@medusajs/types"
													}
												},
												{
													"id": 40137,
													"name": "indexes",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
																"qualifiedName": "EntityIndex"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": 40120,
																	"name": "Schema",
																	"package": "@medusajs/utils",
																	"qualifiedName": "DmlEntity.Schema",
																	"refersToTypeParameter": true
																}
															],
															"name": "EntityIndex",
															"package": "@medusajs/types"
														}
													}
												},
												{
													"id": 40138,
													"name": "checks",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
																"qualifiedName": "CheckConstraint"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": 40120,
																	"name": "Schema",
																	"package": "@medusajs/utils",
																	"qualifiedName": "DmlEntity.Schema",
																	"refersToTypeParameter": true
																}
															],
															"name": "CheckConstraint",
															"package": "@medusajs/types"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														40133,
														40134,
														40135,
														40136,
														40137,
														40138
													]
												}
											]
										}
									}
								}
							]
						},
						{
							"id": 40145,
							"name": "checks",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"signatures": [
								{
									"id": 40146,
									"name": "checks",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 40147,
											"name": "checks",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": {
														"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
														"qualifiedName": "CheckConstraint"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": 40120,
															"name": "Schema",
															"package": "@medusajs/utils",
															"qualifiedName": "DmlEntity.Schema",
															"refersToTypeParameter": true
														}
													],
													"name": "CheckConstraint",
													"package": "@medusajs/types"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 40114,
										"typeArguments": [
											{
												"type": "reference",
												"target": 40120,
												"name": "Schema",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.Schema",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 40121,
												"name": "TConfig",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.TConfig",
												"refersToTypeParameter": true
											}
										],
										"name": "DmlEntity",
										"package": "@medusajs/utils"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								40118
							]
						},
						{
							"title": "Properties",
							"children": [
								40148,
								40124,
								40125
							]
						},
						{
							"title": "Methods",
							"children": [
								40115,
								40130,
								40139,
								40142,
								40145
							]
						}
					],
					"typeParameters": [
						{
							"id": 40149,
							"name": "Schema",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
									"qualifiedName": "DMLSchema"
								},
								"name": "DMLSchema",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 40150,
							"name": "TConfig",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {
								"isConst": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
									"qualifiedName": "IDmlEntityConfig"
								},
								"name": "IDmlEntityConfig",
								"package": "@medusajs/types"
							}
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
								"qualifiedName": "IDmlEntity"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 40120,
									"name": "Schema",
									"package": "@medusajs/utils",
									"qualifiedName": "DmlEntity.Schema",
									"refersToTypeParameter": true
								},
								{
									"type": "reference",
									"target": 40121,
									"name": "TConfig",
									"package": "@medusajs/utils",
									"qualifiedName": "DmlEntity.TConfig",
									"refersToTypeParameter": true
								}
							],
							"name": "IDmlEntity",
							"package": "@medusajs/types"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						40114
					]
				}
			]
		},
		{
			"id": 40151,
			"name": "properties/base",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 40152,
					"name": "BaseProperty",
					"variant": "declaration",
					"kind": 128,
					"flags": {
						"isAbstract": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The BaseProperty class offers shared affordances to define\nproperty classes"
							}
						]
					},
					"children": [
						{
							"id": 40153,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"signatures": [
								{
									"id": 40154,
									"name": "new BaseProperty",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"typeParameters": [
										{
											"id": 40155,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {}
										}
									],
									"type": {
										"type": "reference",
										"target": 40152,
										"typeArguments": [
											{
												"type": "reference",
												"target": 40155,
												"name": "T",
												"package": "@medusajs/utils",
												"qualifiedName": "BaseProperty.T",
												"refersToTypeParameter": true
											}
										],
										"name": "BaseProperty",
										"package": "@medusajs/utils"
									}
								}
							]
						},
						{
							"id": 40162,
							"name": "dataType",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isProtected": true,
								"isAbstract": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The runtime dataType for the schema. It is not the same as\nthe \"$dataType\"."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 40163,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 40164,
											"name": "name",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "KnownDataTypes"
												},
												"name": "KnownDataTypes",
												"package": "@medusajs/types"
											}
										},
										{
											"id": 40165,
											"name": "options",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												40164,
												40165
											]
										}
									]
								}
							}
						},
						{
							"id": 40166,
							"name": "$dataType",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A type-only property to infer the JavScript data-type\nof the schema property"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 40155,
								"name": "T",
								"package": "@medusajs/utils",
								"qualifiedName": "BaseProperty.T",
								"refersToTypeParameter": true
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "PropertyType.$dataType"
							}
						},
						{
							"id": 40178,
							"name": "parse",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"signatures": [
								{
									"id": 40179,
									"name": "parse",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the serialized metadata"
											}
										]
									},
									"parameters": [
										{
											"id": 40180,
											"name": "fieldName",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
											"qualifiedName": "PropertyMetadata"
										},
										"name": "PropertyMetadata",
										"package": "@medusajs/types"
									},
									"implementationOf": {
										"type": "reference",
										"target": -1,
										"name": "PropertyType.parse"
									}
								}
							],
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "PropertyType.parse"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								40153
							]
						},
						{
							"title": "Properties",
							"children": [
								40162,
								40166
							]
						},
						{
							"title": "Methods",
							"children": [
								40167,
								40169,
								40172,
								40175,
								40178
							]
						}
					],
					"typeParameters": [
						{
							"id": 40181,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
								"qualifiedName": "PropertyType"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 40155,
									"name": "T",
									"package": "@medusajs/utils",
									"qualifiedName": "BaseProperty.T",
									"refersToTypeParameter": true
								}
							],
							"name": "PropertyType",
							"package": "@medusajs/types"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						40152
					]
				}
			]
		},
		{
			"id": 40182,
			"name": "Property Types",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 40055,
					"name": "id",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40056,
							"name": "id",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines an automatically generated string ID property.\n\nYou must use the \"primaryKey\" modifier to mark the property as the\nprimary key."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst User = model.define(\"User\", {\n  id: model.id().primaryKey(),\n  // ...\n})\n\nexport default User\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40057,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 40058,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 40059,
													"name": "prefix",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														40059
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/id.ts",
									"qualifiedName": "IdProperty"
								},
								"name": "IdProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40060,
					"name": "text",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40061,
							"name": "text",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a string property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  name: model.text(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/text.ts",
									"qualifiedName": "TextProperty"
								},
								"name": "TextProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40062,
					"name": "boolean",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40063,
							"name": "boolean",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a boolean property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  hasAccount: model.boolean(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/boolean.ts",
									"qualifiedName": "BooleanProperty"
								},
								"name": "BooleanProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40064,
					"name": "number",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40065,
							"name": "number",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a number property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  age: model.number(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/number.ts",
									"qualifiedName": "NumberProperty"
								},
								"name": "NumberProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40066,
					"name": "bigNumber",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40067,
							"name": "bigNumber",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a number property that expects large numbers, such as prices."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  price: model.bigNumber(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/big-number.ts",
									"qualifiedName": "BigNumberProperty"
								},
								"name": "BigNumberProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40070,
					"name": "array",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40071,
							"name": "array",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines an array of strings property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  names: model.array(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/array.ts",
									"qualifiedName": "ArrayProperty"
								},
								"name": "ArrayProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40072,
					"name": "dateTime",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40073,
							"name": "dateTime",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a timestamp property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  date_of_birth: model.dateTime(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/date-time.ts",
									"qualifiedName": "DateTimeProperty"
								},
								"name": "DateTimeProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40074,
					"name": "json",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40075,
							"name": "json",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a property whose value is a stringified JSON object."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  metadata: model.json(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/json.ts",
									"qualifiedName": "JSONProperty"
								},
								"name": "JSONProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40076,
					"name": "enum",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40077,
							"name": "enum",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a property whose value can only be one of the specified values."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  color: model.enum([\"black\", \"white\"]),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 40078,
									"name": "Values",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isConst": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of possible values. By default, it's "
											},
											{
												"kind": "code",
												"text": "`string`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/utils/src/dml/properties/enum.ts",
													"qualifiedName": "EnumLike"
												},
												"name": "EnumLike",
												"package": "@medusajs/utils"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 40079,
									"name": "values",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An array of possible values."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 40078,
										"name": "Values",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/enum.ts",
									"qualifiedName": "EnumProperty"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 40078,
										"name": "Values",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "EnumProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						40055,
						40060,
						40062,
						40064,
						40066,
						40070,
						40072,
						40074,
						40076
					]
				}
			]
		},
		{
			"id": 40183,
			"name": "Property",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 40068,
					"name": "autoincrement",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40069,
							"name": "autoincrement",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines an autoincrement property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  serial_id: model.autoincrement(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/autoincrement.ts",
									"qualifiedName": "AutoIncrementProperty"
								},
								"name": "AutoIncrementProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						40068
					]
				}
			]
		},
		{
			"id": 40184,
			"name": "Relationship Methods",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 40080,
					"name": "hasOne",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40081,
							"name": "hasOne",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a relationship between two data models,\nwhere the owner of the relationship has one record of the related\ndata model.\n\nFor example: A user \"hasOne\" email.\n\nUse the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "belongsTo",
										"target": 40097,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method to define the inverse of this relationship in\nthe other data model."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst User = model.define(\"user\", {\n  id: model.id(),\n  email: model.hasOne(() => Email),\n})\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 40082,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the entity builder passed as a first parameter. By default, it's\na function returning the related model."
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 40083,
									"name": "entityBuilder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that returns the data model this model is related to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 40082,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 40084,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The relationship's options."
											}
										]
									},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 40085,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 40086,
															"name": "mappedBy",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The name of the relationship as defined in the other\ndata model. This is only required by the "
																	},
																	{
																		"kind": "code",
																		"text": "`belongsTo`"
																	},
																	{
																		"kind": "text",
																		"text": " and "
																	},
																	{
																		"kind": "code",
																		"text": "`manyToMany`"
																	},
																	{
																		"kind": "text",
																		"text": "\nrelationship method."
																	}
																]
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																40086
															]
														}
													]
												}
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 40087,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 40088,
															"name": "foreignKey",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"type": {
																"type": "literal",
																"value": true
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																40088
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/relations/has-one-fk.ts",
									"qualifiedName": "HasOneWithForeignKey"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 40082,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "HasOneWithForeignKey",
								"package": "@medusajs/utils"
							}
						},
						{
							"id": 40089,
							"name": "hasOne",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"typeParameters": [
								{
									"id": 40090,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 40091,
									"name": "entityBuilder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 40090,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 40092,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 40093,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 40094,
															"name": "mappedBy",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The name of the relationship as defined in the other\ndata model. This is only required by the "
																	},
																	{
																		"kind": "code",
																		"text": "`belongsTo`"
																	},
																	{
																		"kind": "text",
																		"text": " and "
																	},
																	{
																		"kind": "code",
																		"text": "`manyToMany`"
																	},
																	{
																		"kind": "text",
																		"text": "\nrelationship method."
																	}
																]
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																40094
															]
														}
													]
												}
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 40095,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 40096,
															"name": "foreignKey",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "literal",
																"value": false
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																40096
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/relations/has-one.ts",
									"qualifiedName": "HasOne"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 40090,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "HasOne",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40097,
					"name": "belongsTo",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40098,
							"name": "belongsTo",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines the inverse of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "hasOne",
										"target": 40080,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "hasMany",
										"target": 40102,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " relationship.\n\nFor example, a product \"belongsTo\" a store."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst Product = model.define(\"product\", {\n  id: model.id(),\n  store: model.belongsTo(() => Store, {\n    mappedBy: \"products\",\n  }),\n})\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 40099,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the entity builder passed as a first parameter. By default, it's\na function returning the related model."
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 40100,
									"name": "entityBuilder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that returns the data model this model is related to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 40099,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 40101,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The relationship's options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
											"qualifiedName": "RelationshipOptions"
										},
										"name": "RelationshipOptions",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/relations/belongs-to.ts",
									"qualifiedName": "BelongsTo"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 40099,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "BelongsTo",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40102,
					"name": "hasMany",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40103,
							"name": "hasMany",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a relationship between two data models,\nwhere the owner of the relationship has many records of the related\ndata model, but the related data model only has one owner.\n\nFor example, a store \"hasMany\" products."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst Store = model.define(\"store\", {\n  id: model.id(),\n  products: model.hasMany(() => Product),\n})\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 40104,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the entity builder passed as a first parameter. By default, it's\na function returning the related model."
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 40105,
									"name": "entityBuilder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that returns the data model this model is related to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 40104,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 40106,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The relationship's options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
											"qualifiedName": "RelationshipOptions"
										},
										"name": "RelationshipOptions",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/relations/has-many.ts",
									"qualifiedName": "HasMany"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 40104,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "HasMany",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40107,
					"name": "manyToMany",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40108,
							"name": "manyToMany",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a relationship between two data models,\nwhere both data models have many related records.\n\nFor example, an order is associated with many products, and a product\nis associated with many orders."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst Order = model.define(\"order\", {\n  id: model.id(),\n  products: model.manyToMany(() => Product),\n})\n\nconst Product = model.define(\"product\", {\n  id: model.id(),\n  order: model.manyToMany(() => Order),\n})\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 40109,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the entity builder passed as a first parameter. By default, it's\na function returning the related model."
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 40110,
									"name": "entityBuilder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that returns the data model this model is related to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 40109,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 40111,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The relationship's options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 40030,
										"name": "ManyToManyOptions",
										"package": "@medusajs/utils"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/relations/many-to-many.ts",
									"qualifiedName": "ManyToMany"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 40109,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "ManyToMany",
								"package": "@medusajs/utils"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						40080,
						40097,
						40102,
						40107
					]
				}
			]
		},
		{
			"id": 40185,
			"name": "Model Methods",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 40139,
					"name": "cascades",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40140,
							"name": "cascades",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method configures which related data models an operation, such as deletion,\nshould be cascaded to.\n\nFor example, if a store is deleted, its product should also be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst Store = model.define(\"store\", {\n  id: model.id(),\n  products: model.hasMany(() => Product),\n})\n.cascades({\n  delete: [\"products\"],\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40141,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cascades configurations. They object's keys are the names of\nthe actions, such as "
											},
											{
												"kind": "code",
												"text": "`deleted`"
											},
											{
												"kind": "text",
												"text": ", and the value is an array of relations that the\naction should be cascaded to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
											"qualifiedName": "EntityCascades"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "ExtractEntityRelations"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 40120,
														"name": "Schema",
														"package": "@medusajs/utils",
														"qualifiedName": "DmlEntity.Schema",
														"refersToTypeParameter": true
													},
													{
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "hasOne"
															},
															{
																"type": "literal",
																"value": "hasOneWithFK"
															},
															{
																"type": "literal",
																"value": "hasMany"
															}
														]
													}
												],
												"name": "ExtractEntityRelations",
												"package": "@medusajs/types"
											}
										],
										"name": "EntityCascades",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 40114,
								"typeArguments": [
									{
										"type": "reference",
										"target": 40120,
										"name": "Schema",
										"package": "@medusajs/utils",
										"qualifiedName": "DmlEntity.Schema",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 40121,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "DmlEntity.TConfig",
										"refersToTypeParameter": true
									}
								],
								"name": "DmlEntity",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40142,
					"name": "indexes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40143,
							"name": "indexes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines indices on the data model. An index can be on multiple columns\nand have conditions."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "An example of a simple index:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  id: model.id(),\n  name: model.text(),\n  age: model.number()\n}).indexes([\n  {\n    on: [\"name\", \"age\"],\n  },\n])\n\nexport default MyCustom\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo add a condition on the index, use the "
											},
											{
												"kind": "code",
												"text": "`where`"
											},
											{
												"kind": "text",
												"text": " option:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  id: model.id(),\n  name: model.text(),\n  age: model.number()\n}).indexes([\n  {\n    on: [\"name\", \"age\"],\n    where: {\n      age: 30\n    }\n  },\n])\n\nexport default MyCustom\n```"
											},
											{
												"kind": "text",
												"text": "\n\nThe condition can also be a negation. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  id: model.id(),\n  name: model.text(),\n  age: model.number()\n}).indexes([\n  {\n    on: [\"name\", \"age\"],\n    where: {\n      age: {\n        $ne: 30\n      }\n    }\n  },\n])\n\nexport default MyCustom\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIn this example, the index is created when the value of "
											},
											{
												"kind": "code",
												"text": "`age`"
											},
											{
												"kind": "text",
												"text": " doesn't equal "
											},
											{
												"kind": "code",
												"text": "`30`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40144,
									"name": "indexes",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The index's configuration."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
												"qualifiedName": "EntityIndex"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 40120,
													"name": "Schema",
													"package": "@medusajs/utils",
													"qualifiedName": "DmlEntity.Schema",
													"refersToTypeParameter": true
												},
												{
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "reference",
															"target": {
																"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
																"qualifiedName": "QueryCondition"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": 40120,
																	"name": "Schema",
																	"package": "@medusajs/utils",
																	"qualifiedName": "DmlEntity.Schema",
																	"refersToTypeParameter": true
																}
															],
															"name": "QueryCondition",
															"package": "@medusajs/types"
														}
													]
												}
											],
											"name": "EntityIndex",
											"package": "@medusajs/types"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 40114,
								"typeArguments": [
									{
										"type": "reference",
										"target": 40120,
										"name": "Schema",
										"package": "@medusajs/utils",
										"qualifiedName": "DmlEntity.Schema",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 40121,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "DmlEntity.TConfig",
										"refersToTypeParameter": true
									}
								],
								"name": "DmlEntity",
								"package": "@medusajs/utils"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						40139,
						40142
					]
				}
			]
		},
		{
			"id": 40186,
			"name": "Property Configuration Methods",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 40167,
					"name": "nullable",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40168,
							"name": "nullable",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method indicates that a property's value can be "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  price: model.bigNumber().nullable(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/nullable.ts",
									"qualifiedName": "NullableModifier"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 40155,
										"name": "T",
										"package": "@medusajs/utils",
										"qualifiedName": "BaseProperty.T",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 40152,
										"typeArguments": [
											{
												"type": "reference",
												"target": 40155,
												"name": "T",
												"package": "@medusajs/utils",
												"qualifiedName": "BaseProperty.T",
												"refersToTypeParameter": true
											}
										],
										"name": "BaseProperty",
										"package": "@medusajs/utils"
									}
								],
								"name": "NullableModifier",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40169,
					"name": "index",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40170,
							"name": "index",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines an index on a property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  id: model.id(),\n  name: model.text().index(\n    \"IDX_MY_CUSTOM_NAME\"\n  ),\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40171,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The index's name. If not provided,\nMedusa generates the name."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 40152,
								"typeArguments": [
									{
										"type": "reference",
										"target": 40155,
										"name": "T",
										"package": "@medusajs/utils",
										"qualifiedName": "BaseProperty.T",
										"refersToTypeParameter": true
									}
								],
								"name": "BaseProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40172,
					"name": "unique",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40173,
							"name": "unique",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method indicates that a property's value must be unique in the database.\nA unique index is created on the property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst User = model.define(\"user\", {\n  email: model.text().unique(),\n  // ...\n})\n\nexport default User\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40174,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The unique index's name. If not provided,\nMedusa generates the name."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 40152,
								"typeArguments": [
									{
										"type": "reference",
										"target": 40155,
										"name": "T",
										"package": "@medusajs/utils",
										"qualifiedName": "BaseProperty.T",
										"refersToTypeParameter": true
									}
								],
								"name": "BaseProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40175,
					"name": "default",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 40176,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines the default value of a property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  color: model\n    .enum([\"black\", \"white\"])\n    .default(\"black\"),\n  age: model\n    .number()\n    .default(0),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40177,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The default value."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 40155,
										"name": "T",
										"package": "@medusajs/utils",
										"qualifiedName": "BaseProperty.T",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 40152,
								"typeArguments": [
									{
										"type": "reference",
										"target": 40155,
										"name": "T",
										"package": "@medusajs/utils",
										"qualifiedName": "BaseProperty.T",
										"refersToTypeParameter": true
									}
								],
								"name": "BaseProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						40167,
						40169,
						40172,
						40175
					]
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				40025,
				40113,
				40151
			]
		},
		{
			"title": "Namespaces",
			"children": [
				40182,
				40183,
				40184,
				40185,
				40186
			]
		}
	],
	"packageName": "@medusajs/utils",
	"symbolIdMap": {
		"40025": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": ""
		},
		"40026": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "DefineOptions"
		},
		"40027": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"40028": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.name"
		},
		"40029": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.tableName"
		},
		"40030": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "ManyToManyOptions"
		},
		"40031": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"40032": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.pivotTable"
		},
		"40034": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.joinColumn"
		},
		"40035": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.inverseJoinColumn"
		},
		"40036": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"40038": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.pivotEntity"
		},
		"40039": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"40040": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"40041": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.joinColumn"
		},
		"40042": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.inverseJoinColumn"
		},
		"40043": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder"
		},
		"40049": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.define"
		},
		"40050": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.define"
		},
		"40051": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "Schema"
		},
		"40052": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "TConfig"
		},
		"40053": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "nameOrConfig"
		},
		"40054": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "schema"
		},
		"40055": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.id"
		},
		"40056": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.id"
		},
		"40057": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"40058": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"40059": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.prefix"
		},
		"40060": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.text"
		},
		"40061": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.text"
		},
		"40062": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.boolean"
		},
		"40063": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.boolean"
		},
		"40064": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.number"
		},
		"40065": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.number"
		},
		"40066": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.bigNumber"
		},
		"40067": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.bigNumber"
		},
		"40068": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.autoincrement"
		},
		"40069": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.autoincrement"
		},
		"40070": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.array"
		},
		"40071": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.array"
		},
		"40072": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.dateTime"
		},
		"40073": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.dateTime"
		},
		"40074": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.json"
		},
		"40075": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.json"
		},
		"40076": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.enum"
		},
		"40077": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.enum"
		},
		"40078": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "Values"
		},
		"40079": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "values"
		},
		"40080": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.hasOne"
		},
		"40081": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.hasOne"
		},
		"40082": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "T"
		},
		"40083": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "entityBuilder"
		},
		"40084": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"40085": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type"
		},
		"40086": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type.mappedBy"
		},
		"40087": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"40088": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.foreignKey"
		},
		"40089": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.hasOne"
		},
		"40090": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "T"
		},
		"40091": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "entityBuilder"
		},
		"40092": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"40093": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type"
		},
		"40094": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type.mappedBy"
		},
		"40095": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"40096": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.foreignKey"
		},
		"40097": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.belongsTo"
		},
		"40098": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.belongsTo"
		},
		"40099": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "T"
		},
		"40100": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "entityBuilder"
		},
		"40101": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"40102": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.hasMany"
		},
		"40103": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.hasMany"
		},
		"40104": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "T"
		},
		"40105": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "entityBuilder"
		},
		"40106": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"40107": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.manyToMany"
		},
		"40108": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.manyToMany"
		},
		"40109": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "T"
		},
		"40110": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "entityBuilder"
		},
		"40111": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"40112": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "model"
		},
		"40113": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": ""
		},
		"40114": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity"
		},
		"40115": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.isDmlEntity"
		},
		"40116": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.isDmlEntity"
		},
		"40117": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "entity"
		},
		"40118": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.__constructor"
		},
		"40119": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity"
		},
		"40120": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.Schema"
		},
		"40121": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.TConfig"
		},
		"40122": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "nameOrConfig"
		},
		"40123": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "schema"
		},
		"40124": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.name"
		},
		"40125": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.schema"
		},
		"40130": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.parse"
		},
		"40131": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.parse"
		},
		"40132": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type"
		},
		"40133": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.name"
		},
		"40134": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.tableName"
		},
		"40135": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.schema"
		},
		"40136": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.cascades"
		},
		"40137": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.indexes"
		},
		"40138": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.checks"
		},
		"40139": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.cascades"
		},
		"40140": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.cascades"
		},
		"40141": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "options"
		},
		"40142": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.indexes"
		},
		"40143": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.indexes"
		},
		"40144": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "indexes"
		},
		"40145": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.checks"
		},
		"40146": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.checks"
		},
		"40147": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "checks"
		},
		"40148": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.[IsDmlEntity]"
		},
		"40149": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.Schema"
		},
		"40150": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.TConfig"
		},
		"40151": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": ""
		},
		"40152": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty"
		},
		"40155": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.T"
		},
		"40162": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.dataType"
		},
		"40163": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type"
		},
		"40164": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type.name"
		},
		"40165": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type.options"
		},
		"40166": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.$dataType"
		},
		"40167": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.nullable"
		},
		"40168": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.nullable"
		},
		"40169": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.index"
		},
		"40170": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.index"
		},
		"40171": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "name"
		},
		"40172": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.unique"
		},
		"40173": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.unique"
		},
		"40174": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "name"
		},
		"40175": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.default"
		},
		"40176": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.default"
		},
		"40177": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "value"
		},
		"40178": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.parse"
		},
		"40179": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.parse"
		},
		"40180": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "fieldName"
		},
		"40181": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.T"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"2": "../../../../packages/core/utils/src/dml/entity.ts",
			"3": "../../../../packages/core/utils/src/dml/properties/base.ts"
		},
		"reflections": {
			"1": 40025,
			"2": 40113,
			"3": 40151
		}
	}
}
