{
	"id": 42080,
	"name": "payment-provider",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 42081,
			"name": "AbstractPaymentProvider",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"children": [
				{
					"id": 42082,
					"name": "validateOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 52,
							"character": 9,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L52"
						}
					],
					"signatures": [
						{
							"id": 42083,
							"name": "validateOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates the options of the provider set in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.ts`"
									},
									{
										"kind": "text",
										"text": ".\nImplementing this method is optional. It's useful if your provider requires custom validation.\n\nIf the options aren't valid, throw an error."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyPaymentProviderService extends AbstractPaymentProvider<Options> {\n  static validateOptions(options: Record<any, any>) {\n    if (!options.apiKey) {\n      throw new MedusaError(\n        MedusaError.Types.INVALID_DATA,\n        \"API key is required in the provider's options.\"\n      )\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 52,
									"character": 9,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L52"
								}
							],
							"parameters": [
								{
									"id": 42084,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The provider's options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 42090,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 102,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L102"
						}
					],
					"signatures": [
						{
							"id": 42091,
							"name": "AbstractPaymentProvider",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The constructor allows you to access resources from the [module's container](https://docs.medusajs.com/learn/fundamentals/modules/container)\nusing the first parameter, and the module's options using the second parameter.\n\n:::note\n\nA module's options are passed when you register it in the Medusa application.\n\n:::"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { AbstractPaymentProvider } from \"@medusajs/framework/utils\"\nimport { Logger } from \"@medusajs/framework/types\"\n\ntype Options = {\n  apiKey: string\n}\n\ntype InjectedDependencies = {\n  logger: Logger\n}\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<Options> {\n  protected logger_: Logger\n  protected options_: Options\n  // assuming you're initializing a client\n  protected client\n\n  constructor(\n    container: InjectedDependencies,\n    options: Options\n  ) {\n    super(container, options)\n\n    this.logger_ = container.logger\n    this.options_ = options\n\n    // TODO initialize your client\n  }\n  // ...\n}\n\nexport default MyPaymentProviderService\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 102,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L102"
								}
							],
							"typeParameters": [
								{
									"id": 42092,
									"name": "TConfig",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the provider's options passed as a second parameter."
											}
										]
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"parameters": [
								{
									"id": 42093,
									"name": "cradle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The module's container cradle used to resolve resources."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 42081,
								"typeArguments": [
									{
										"type": "reference",
										"target": 42092,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "AbstractPaymentProvider.TConfig",
										"refersToTypeParameter": true
									}
								],
								"name": "AbstractPaymentProvider",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 42089,
					"name": "identifier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Each payment provider has a unique identifier defined in its class. The provider's ID\nwill be stored as "
							},
							{
								"kind": "code",
								"text": "`pp_{identifier}_{id}`"
							},
							{
								"kind": "text",
								"text": ", where "
							},
							{
								"kind": "code",
								"text": "`{id}`"
							},
							{
								"kind": "text",
								"text": " is the provider's "
							},
							{
								"kind": "code",
								"text": "`id`"
							},
							{
								"kind": "text",
								"text": "\nproperty in the "
							},
							{
								"kind": "code",
								"text": "`medusa-config.ts`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  static identifier = \"my-payment\"\n  // ...\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 137,
							"character": 16,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L137"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 42099,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 188,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L188"
						}
					],
					"signatures": [
						{
							"id": 42100,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to capture a payment. The payment is captured in one of the following scenarios:\n\n- The "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "authorizePayment",
										"target": 42102
									},
									{
										"kind": "text",
										"text": " method returns the status "
									},
									{
										"kind": "code",
										"text": "`captured`"
									},
									{
										"kind": "text",
										"text": ", which automatically executed this method after authorization.\n- The merchant requests to capture the payment after its associated payment session was authorized.\n- A webhook event occurred that instructs the payment provider to capture the payment session. Learn more about handing webhook events in [this guide](https://docs.medusajs.com/resources/commerce-modules/payment/webhook-events).\n\nIn this method, use the third-party provider to capture the payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The new data to store in the payment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property. Throws in case of an error."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  CapturePaymentInput,\n  CapturePaymentOutput,\n} from \"@medusajs/framework/types\"\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async capturePayment(\n    input: CapturePaymentInput\n  ): Promise<CapturePaymentOutput> {\n    const externalId = input.data?.id\n\n      // assuming you have a client that captures the payment\n    const newData = await this.client.capturePayment(externalId)\n    return {data: newData}\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 188,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L188"
								}
							],
							"parameters": [
								{
									"id": 42101,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to capture the payment. The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field should contain the data from the payment provider. when the payment was created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "CapturePaymentInput"
										},
										"name": "CapturePaymentInput",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "CapturePaymentOutput"
										},
										"name": "CapturePaymentOutput",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.capturePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.capturePayment"
					}
				},
				{
					"id": 42102,
					"name": "authorizePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 233,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L233"
						}
					],
					"signatures": [
						{
							"id": 42103,
							"name": "authorizePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method authorizes a payment session. When authorized successfully, a payment is created by the Payment\nModule which can be later captured using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "capturePayment",
										"target": 42099
									},
									{
										"kind": "text",
										"text": " method.\n\nRefer to [this guide](https://docs.medusajs.com/resources/commerce-modules/payment/payment-flow#3-authorize-payment-session)\nto learn more about how this fits into the payment flow and how to handle required actions.\n\nTo automatically capture the payment after authorization, return the status "
									},
									{
										"kind": "code",
										"text": "`captured`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The status of the authorization, along with the "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field about the payment. Throws in case of an error."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  AuthorizePaymentInput,\n  AuthorizePaymentOutput,\n  PaymentSessionStatus\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async authorizePayment(\n    input: AuthorizePaymentInput\n  ): Promise<AuthorizePaymentOutput> {\n    const externalId = input.data?.id\n\n    // assuming you have a client that authorizes the payment\n    const paymentData = await this.client.authorizePayment(externalId)\n\n    return {\n      data: paymentData,\n      status: \"authorized\"\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 233,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L233"
								}
							],
							"parameters": [
								{
									"id": 42104,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to authorize the payment. The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field should contain the data from the payment provider. when the payment was created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "AuthorizePaymentInput"
										},
										"name": "AuthorizePaymentInput",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "AuthorizePaymentOutput"
										},
										"name": "AuthorizePaymentOutput",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.authorizePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.authorizePayment"
					}
				},
				{
					"id": 42105,
					"name": "cancelPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 267,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L267"
						}
					],
					"signatures": [
						{
							"id": 42106,
							"name": "cancelPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method cancels a payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The new data to store in the payment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property, if any. Throws in case of an error."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  PaymentProviderError,\n  PaymentProviderSessionResponse,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async cancelPayment(\n    input: CancelPaymentInput\n  ): Promise<CancelPaymentOutput> {\n    const externalId = input.data?.id\n\n    // assuming you have a client that cancels the payment\n    const paymentData = await this.client.cancelPayment(externalId)\n    return { data: paymentData }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 267,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L267"
								}
							],
							"parameters": [
								{
									"id": 42107,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to cancel the payment. The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field should contain the data from the payment provider. when the payment was created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "CancelPaymentInput"
										},
										"name": "CancelPaymentInput",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "CancelPaymentOutput"
										},
										"name": "CancelPaymentOutput",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.cancelPayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.cancelPayment"
					}
				},
				{
					"id": 42108,
					"name": "initiatePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 312,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L312"
						}
					],
					"signatures": [
						{
							"id": 42109,
							"name": "initiatePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when a payment session is created. It can be used to initiate the payment\nin the third-party session, before authorizing or capturing the payment later."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The new data to store in the payment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property. Throws in case of an error."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  InitiatePaymentInput,\n  InitiatePaymentOutput,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async initiatePayment(\n    input: InitiatePaymentInput\n  ): Promise<InitiatePaymentOutput> {\n    const {\n      amount,\n      currency_code,\n      context: customerDetails\n    } = input\n\n    // assuming you have a client that initializes the payment\n    const response = await this.client.init(\n      amount, currency_code, customerDetails\n    )\n\n    return {\n      id: response.id\n      data: response,\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 312,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L312"
								}
							],
							"parameters": [
								{
									"id": 42110,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to create the payment session."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "InitiatePaymentInput"
										},
										"name": "InitiatePaymentInput",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "InitiatePaymentOutput"
										},
										"name": "InitiatePaymentOutput",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.initiatePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.initiatePayment"
					}
				},
				{
					"id": 42111,
					"name": "deletePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 349,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L349"
						}
					],
					"signatures": [
						{
							"id": 42112,
							"name": "deletePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when a payment session is deleted, which can only happen if it isn't authorized, yet.\n\nUse this to delete or cancel the payment in the third-party service."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The new data to store in the payment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property, if any. Throws in case of an error."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  DeletePaymentInput,\n  DeletePaymentOutput,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async deletePayment(\n    input: DeletePaymentInput\n  ): Promise<DeletePaymentOutput> {\n    const externalId = input.data?.id\n\n    // assuming you have a client that cancels the payment\n    await this.client.cancelPayment(externalId)\n    return {}\n  }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 349,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L349"
								}
							],
							"parameters": [
								{
									"id": 42113,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to delete the payment session. The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field should contain the data from the payment provider. when the payment was created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "DeletePaymentInput"
										},
										"name": "DeletePaymentInput",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "DeletePaymentOutput"
										},
										"name": "DeletePaymentOutput",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.deletePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.deletePayment"
					}
				},
				{
					"id": 42114,
					"name": "getPaymentStatus",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 394,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L394"
						}
					],
					"signatures": [
						{
							"id": 42115,
							"name": "getPaymentStatus",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method gets the status of a payment session based on the status in the third-party integration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The payment session's status. It can also return additional "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " from the payment provider."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  GetPaymentStatusInput,\n  GetPaymentStatusOutput,\n  PaymentSessionStatus\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async getPaymentStatus(\n    input: GetPaymentStatusInput\n  ): Promise<GetPaymentStatusOutput> {\n    const externalId = input.data?.id\n\n    // assuming you have a client that retrieves the payment status\n    const status = await this.client.getStatus(externalId)\n\n    switch (status) {\n      case \"requires_capture\":\n          return {status: \"authorized\"}\n        case \"success\":\n          return {status: \"captured\"}\n        case \"canceled\":\n          return {status: \"canceled\"}\n        default:\n          return {status: \"pending\"}\n     }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 394,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L394"
								}
							],
							"parameters": [
								{
									"id": 42116,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to get the payment status. The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field should contain the data from the payment provider. when the payment was created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "GetPaymentStatusInput"
										},
										"name": "GetPaymentStatusInput",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "GetPaymentStatusOutput"
										},
										"name": "GetPaymentStatusOutput",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.getPaymentStatus"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.getPaymentStatus"
					}
				},
				{
					"id": 42117,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 431,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L431"
						}
					],
					"signatures": [
						{
							"id": 42118,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method refunds an amount of a payment previously captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The new data to store in the payment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property, or an error object."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  RefundPaymentInput,\n  RefundPaymentOutput,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async refundPayment(\n    input: RefundPaymentInput\n  ): Promise<RefundPaymentOutput> {\n    const externalId = input.data?.id\n\n    // assuming you have a client that refunds the payment\n    const newData = await this.client.refund(\n        externalId,\n        input.amount\n      )\n\n    return {data: newData}\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 431,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L431"
								}
							],
							"parameters": [
								{
									"id": 42119,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to refund the payment. The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field should contain the data from the payment provider. when the payment was created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "RefundPaymentInput"
										},
										"name": "RefundPaymentInput",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "RefundPaymentOutput"
										},
										"name": "RefundPaymentOutput",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.refundPayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.refundPayment"
					}
				},
				{
					"id": 42120,
					"name": "retrievePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 463,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L463"
						}
					],
					"signatures": [
						{
							"id": 42121,
							"name": "retrievePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieves the payment's data from the third-party service."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The payment's data as found in the the payment provider."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  RetrievePaymentInput,\n  RetrievePaymentOutput,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async retrievePayment(\n    input: RetrievePaymentInput\n  ): Promise<RetrievePaymentOutput> {\n    const externalId = input.data?.id\n\n    // assuming you have a client that retrieves the payment\n    return await this.client.retrieve(externalId)\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 463,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L463"
								}
							],
							"parameters": [
								{
									"id": 42122,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to retrieve the payment. The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field should contain the data from the payment provider when the payment was created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "RetrievePaymentInput"
										},
										"name": "RetrievePaymentInput",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "RetrievePaymentOutput"
										},
										"name": "RetrievePaymentOutput",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.retrievePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.retrievePayment"
					}
				},
				{
					"id": 42123,
					"name": "updatePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 506,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L506"
						}
					],
					"signatures": [
						{
							"id": 42124,
							"name": "updatePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a payment in the third-party service that was previously initiated with the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "initiatePayment",
										"target": 42108
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The new data to store in the payment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property. Throws in case of an error."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  UpdatePaymentInput,\n  UpdatePaymentOutput,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async updatePayment(\n    input: UpdatePaymentInput\n  ): Promise<UpdatePaymentOutput> {\n    const { amount, currency_code, context } = input\n    const externalId = input.data?.id\n\n    // assuming you have a client that updates the payment\n    const response = await this.client.update(\n      externalId,\n        {\n          amount,\n          currency_code,\n          context.customer\n        }\n      )\n\n    return response\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 506,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L506"
								}
							],
							"parameters": [
								{
									"id": 42125,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to update the payment. The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field should contain the data from the payment provider. when the payment was created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "UpdatePaymentInput"
										},
										"name": "UpdatePaymentInput",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "UpdatePaymentOutput"
										},
										"name": "UpdatePaymentOutput",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.updatePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.updatePayment"
					}
				},
				{
					"id": 42126,
					"name": "getWebhookActionAndData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "utils/src/payment/abstract-payment-provider.ts",
							"line": 580,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L580"
						}
					],
					"signatures": [
						{
							"id": 42127,
							"name": "getWebhookActionAndData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is executed when a webhook event is received from the third-party payment provider. Use it\nto process the action of the payment provider.\n\nLearn more in [this documentation](https://docs.medusajs.com/resources/commerce-modules/payment/webhook-events)"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The webhook result. If the "
											},
											{
												"kind": "code",
												"text": "`action`"
											},
											{
												"kind": "text",
												"text": "'s value is "
											},
											{
												"kind": "code",
												"text": "`captured`"
											},
											{
												"kind": "text",
												"text": ", the payment is captured within Medusa as well.\nIf the "
											},
											{
												"kind": "code",
												"text": "`action`"
											},
											{
												"kind": "text",
												"text": "'s value is "
											},
											{
												"kind": "code",
												"text": "`authorized`"
											},
											{
												"kind": "text",
												"text": ", the associated payment session is authorized within Medusa."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  BigNumber\n} from \"@medusajs/framework/utils\"\nimport {\n  ProviderWebhookPayload,\n  WebhookActionResult\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async getWebhookActionAndData(\n    payload: ProviderWebhookPayload[\"payload\"]\n  ): Promise<WebhookActionResult> {\n    const {\n      data,\n      rawData,\n      headers\n    } = payload\n\n    try {\n      switch(data.event_type) {\n        case \"authorized_amount\":\n          return {\n            action: \"authorized\",\n            data: {\n              session_id: (data.metadata as Record<string, any>).session_id,\n              amount: new BigNumber(data.amount as number)\n            }\n          }\n        case \"success\":\n          return {\n            action: \"captured\",\n            data: {\n              session_id: (data.metadata as Record<string, any>).session_id,\n              amount: new BigNumber(data.amount as number)\n            }\n          }\n        default:\n          return {\n            action: \"not_supported\"\n          }\n      }\n    } catch (e) {\n      return {\n        action: \"failed\",\n        data: {\n          session_id: (data.metadata as Record<string, any>).session_id,\n          amount: new BigNumber(data.amount as number)\n        }\n      }\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/src/payment/abstract-payment-provider.ts",
									"line": 580,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L580"
								}
							],
							"parameters": [
								{
									"id": 42128,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The webhook event's data"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 42129,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 42130,
													"name": "data",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The parsed webhook body."
															}
														]
													},
													"sources": [
														{
															"fileName": "types/dist/payment/mutations.d.ts",
															"line": 273,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Record"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "unknown"
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												},
												{
													"id": 42131,
													"name": "rawData",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The raw webhook request body."
															}
														]
													},
													"sources": [
														{
															"fileName": "types/dist/payment/mutations.d.ts",
															"line": 277,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
																	"qualifiedName": "__global.Buffer"
																},
																"name": "Buffer",
																"package": "@types/node",
																"qualifiedName": "__global.Buffer"
															}
														]
													}
												},
												{
													"id": 42132,
													"name": "headers",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The headers of the webhook request."
															}
														]
													},
													"sources": [
														{
															"fileName": "types/dist/payment/mutations.d.ts",
															"line": 281,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Record"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "unknown"
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														42130,
														42131,
														42132
													]
												}
											],
											"sources": [
												{
													"fileName": "types/dist/payment/mutations.d.ts",
													"line": 269,
													"character": 13
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "WebhookActionResult"
										},
										"name": "WebhookActionResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.getWebhookActionAndData"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.getWebhookActionAndData"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						42090
					]
				},
				{
					"title": "Properties",
					"children": [
						42089
					]
				},
				{
					"title": "Methods",
					"children": [
						42082,
						42099,
						42102,
						42105,
						42108,
						42111,
						42114,
						42117,
						42120,
						42123,
						42126
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/src/payment/abstract-payment-provider.ts",
					"line": 25,
					"character": 22,
					"url": "https://github.com/medusajs/medusa/blob/9e410be04a62c50f8ca8cd772f567640c60a3d0e/packages/core/utils/src/payment/abstract-payment-provider.ts#L25"
				}
			],
			"typeParameters": [
				{
					"id": 42133,
					"name": "TConfig",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
						"qualifiedName": "IPaymentProvider"
					},
					"name": "IPaymentProvider",
					"package": "@medusajs/types"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				42081
			]
		}
	],
	"packageName": "@medusajs/utils",
	"symbolIdMap": {
		"42080": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": ""
		},
		"42081": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider"
		},
		"42082": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.validateOptions"
		},
		"42083": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.validateOptions"
		},
		"42084": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "options"
		},
		"42089": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.identifier"
		},
		"42090": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.__constructor"
		},
		"42091": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider"
		},
		"42092": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.TConfig"
		},
		"42093": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "cradle"
		},
		"42099": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.capturePayment"
		},
		"42100": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.capturePayment"
		},
		"42101": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "input"
		},
		"42102": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.authorizePayment"
		},
		"42103": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.authorizePayment"
		},
		"42104": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "input"
		},
		"42105": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.cancelPayment"
		},
		"42106": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.cancelPayment"
		},
		"42107": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "input"
		},
		"42108": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.initiatePayment"
		},
		"42109": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.initiatePayment"
		},
		"42110": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "input"
		},
		"42111": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.deletePayment"
		},
		"42112": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.deletePayment"
		},
		"42113": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "input"
		},
		"42114": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getPaymentStatus"
		},
		"42115": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getPaymentStatus"
		},
		"42116": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "input"
		},
		"42117": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.refundPayment"
		},
		"42118": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.refundPayment"
		},
		"42119": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "input"
		},
		"42120": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.retrievePayment"
		},
		"42121": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.retrievePayment"
		},
		"42122": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "input"
		},
		"42123": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.updatePayment"
		},
		"42124": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.updatePayment"
		},
		"42125": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "input"
		},
		"42126": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getWebhookActionAndData"
		},
		"42127": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getWebhookActionAndData"
		},
		"42128": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "data"
		},
		"42129": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type"
		},
		"42130": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type.data"
		},
		"42131": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type.rawData"
		},
		"42132": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type.headers"
		},
		"42133": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.TConfig"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts"
		},
		"reflections": {
			"1": 42080
		}
	}
}
