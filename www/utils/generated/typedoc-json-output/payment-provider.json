{
	"id": 40916,
	"name": "payment-provider",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 40920,
			"name": "AbstractPaymentProvider",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"children": [
				{
					"id": 40934,
					"name": "container",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 40921,
					"name": "validateOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 40922,
							"name": "validateOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates the options of the provider set in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.ts`"
									},
									{
										"kind": "text",
										"text": ".\nImplementing this method is optional. It's useful if your provider requires custom validation.\n\nIf the options aren't valid, throw an error."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyPaymentProviderService extends AbstractPaymentProvider<Options> {\n  static validateOptions(options: Record<any, any>) {\n    if (!options.apiKey) {\n      throw new MedusaError(\n        MedusaError.Types.INVALID_DATA,\n        \"API key is required in the provider's options.\"\n      )\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40923,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The provider's options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 40929,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 40930,
							"name": "new AbstractPaymentProvider",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "You can use the "
									},
									{
										"kind": "code",
										"text": "`constructor`"
									},
									{
										"kind": "text",
										"text": " of the provider's service to access resources in your module's container.\n\nYou can also use the constructor to initialize your integration with the third-party provider. For example, if you use a client to connect to the third-party providerâ€™s APIs,\nyou can initialize it in the constructor and use it in other methods in the service.\n\nThe provider can also access the module's options as a second parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  AbstractPaymentProvider\n} from \"@medusajs/framework/utils\"\nimport { Logger } from \"@medusajs/framework/types\"\n\ntype InjectedDependencies = {\n  logger: Logger\n}\n\ntype Options = {\n  apiKey: string\n}\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  static identifier = \"my-payment\"\n  protected logger_: Logger\n  protected options_: Options\n  // Assuming you're using a client to integrate\n  // with a third-party service\n  protected client\n\n  constructor(\n    { logger }: InjectedDependencies,\n    options: Options\n  ) {\n    // @ts-ignore\n    super(...arguments)\n\n    this.logger_ = logger\n    this.options_ = options\n\n    // Assuming you're initializing a client\n    this.client = new Client(options)\n  }\n\n  // ...\n}\n\nexport default MyPaymentProviderService\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 40931,
									"name": "TConfig",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"parameters": [
								{
									"id": 40932,
									"name": "cradle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The module's container cradle used to resolve resources."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 40933,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The options passed to the payment module provider."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 40931,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "AbstractPaymentProvider.TConfig",
										"refersToTypeParameter": true
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"target": 40920,
								"typeArguments": [
									{
										"type": "reference",
										"target": 40931,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "AbstractPaymentProvider.TConfig",
										"refersToTypeParameter": true
									}
								],
								"name": "AbstractPaymentProvider",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 40935,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The options passed to the payment module provider."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 40931,
						"name": "TConfig",
						"package": "@medusajs/utils",
						"qualifiedName": "AbstractPaymentProvider.TConfig",
						"refersToTypeParameter": true
					},
					"defaultValue": "..."
				},
				{
					"id": 40928,
					"name": "identifier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Each payment provider has a unique identifier defined in its class. The provider's ID\nwill be stored as "
							},
							{
								"kind": "code",
								"text": "`pp_{identifier}_{id}`"
							},
							{
								"kind": "text",
								"text": ", where "
							},
							{
								"kind": "code",
								"text": "`{id}`"
							},
							{
								"kind": "text",
								"text": " is the provider's "
							},
							{
								"kind": "code",
								"text": "`id`"
							},
							{
								"kind": "text",
								"text": "\nproperty in the "
							},
							{
								"kind": "code",
								"text": "`medusa-config.ts`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  static identifier = \"my-payment\"\n  // ...\n}\n```\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 40938,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 40939,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to capture a payment. The payment is captured in one of the following scenarios:\n\n- The "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "authorizePayment",
										"target": 40941,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method returns the status "
									},
									{
										"kind": "code",
										"text": "`captured`"
									},
									{
										"kind": "text",
										"text": ", which automatically executed this method after authorization.\n- The merchant requests to capture the payment after its associated payment session was authorized.\n- A webhook event occurred that instructs the payment provider to capture the payment session. Learn more about handing webhook events in [this guide](https://docs.medusajs.com/resources/commerce-modules/payment/webhook-events).\n\nIn this method, use the third-party provider to capture the payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The new data to store in the payment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property, or an error object."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  PaymentProviderError,\n  PaymentProviderSessionResponse,\n} from \"@medusajs/framework/types\"\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async capturePayment(\n    paymentData: Record<string, unknown>\n  ): Promise<PaymentProviderError | PaymentProviderSessionResponse[\"data\"]> {\n    const externalId = paymentData.id\n\n    try {\n      const newData = await this.client.capturePayment(externalId)\n\n      return {\n        ...newData,\n        id: externalId\n      }\n    } catch (e) {\n      return {\n        error: e,\n        code: \"unknown\",\n        detail: e\n      }\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40940,
									"name": "paymentData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the payment. Make sure to store in it\nany helpful identification for your third-party integration."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.capturePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.capturePayment"
					}
				},
				{
					"id": 40941,
					"name": "authorizePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 40942,
							"name": "authorizePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method authorizes a payment session. When authorized successfully, a payment is created by the Payment\nModule which can be later captured using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "capturePayment",
										"target": 40938,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method.\n\nRefer to [this guide](https://docs.medusajs.com/resources/commerce-modules/payment/payment-flow#3-authorize-payment-session)\nto learn more about how this fits into the payment flow and how to handle required actions.\n\nTo automatically capture the payment after authorization, return the status "
									},
									{
										"kind": "code",
										"text": "`captured`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Either an object of the new data to store in the created payment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property and the\npayment's status, or an error object. Make sure to set in "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " anything useful to later retrieve the session."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  PaymentProviderError,\n  PaymentProviderSessionResponse,\n  PaymentSessionStatus\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async authorizePayment(\n    paymentSessionData: Record<string, unknown>,\n    context: Record<string, unknown>\n  ): Promise<\n    PaymentProviderError | {\n      status: PaymentSessionStatus\n      data: PaymentProviderSessionResponse[\"data\"]\n    }\n  > {\n    const externalId = paymentSessionData.id\n\n    try {\n      const paymentData = await this.client.authorizePayment(externalId)\n\n      return {\n        data: {\n          ...paymentData,\n          id: externalId\n        },\n        status: \"authorized\"\n      }\n    } catch (e) {\n      return {\n        error: e,\n        code: \"unknown\",\n        detail: e\n      }\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40943,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the payment session. Make sure to store in it\nany helpful identification for your third-party integration."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 40944,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The context in which the payment is being authorized. For example, in checkout,\nthe context has a "
											},
											{
												"kind": "code",
												"text": "`cart_id`"
											},
											{
												"kind": "text",
												"text": " property indicating the ID of the associated cart."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 40945,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 40946,
															"name": "status",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The new status of the payment."
																	}
																]
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../../packages/core/types/src/payment/common.ts",
																	"qualifiedName": "PaymentSessionStatus"
																},
																"name": "PaymentSessionStatus",
																"package": "@medusajs/types"
															}
														},
														{
															"id": 40947,
															"name": "data",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The data to store in the created payment's "
																	},
																	{
																		"kind": "code",
																		"text": "`data`"
																	},
																	{
																		"kind": "text",
																		"text": " property."
																	}
																]
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Record"
																},
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "unknown"
																	}
																],
																"name": "Record",
																"package": "typescript"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																40946,
																40947
															]
														}
													]
												}
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.authorizePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.authorizePayment"
					}
				},
				{
					"id": 40948,
					"name": "cancelPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 40949,
							"name": "cancelPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method cancels a payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An error object if an error occurs, or the data received from the integration."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  PaymentProviderError,\n  PaymentProviderSessionResponse,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async cancelPayment(\n    paymentData: Record<string, unknown>\n  ): Promise<PaymentProviderError | PaymentProviderSessionResponse[\"data\"]> {\n    const externalId = paymentData.id\n\n    try {\n      const paymentData = await this.client.cancelPayment(externalId)\n    } catch (e) {\n      return {\n        error: e,\n        code: \"unknown\",\n        detail: e\n      }\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40950,
									"name": "paymentData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the payment. Make sure to store in it\nany helpful identification for your third-party integration."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.cancelPayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.cancelPayment"
					}
				},
				{
					"id": 40951,
					"name": "initiatePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 40952,
							"name": "initiatePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when a payment session is created. It can be used to initiate the payment\nin the third-party session, before authorizing or capturing the payment later."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object whose "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property is set in the created payment session, or an error\nobject. Make sure to set in "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " anything useful to later retrieve the session."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  PaymentProviderError,\n  PaymentProviderSessionResponse,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async initiatePayment(\n    context: CreatePaymentProviderSession\n  ): Promise<PaymentProviderError | PaymentProviderSessionResponse> {\n    const {\n      amount,\n      currency_code,\n      context: customerDetails\n    } = context\n\n    try {\n      const response = await this.client.init(\n        amount, currency_code, customerDetails\n      )\n\n      return {\n        ...response,\n        data: {\n          id: response.id\n        }\n      }\n    } catch (e) {\n      return {\n        error: e,\n        code: \"unknown\",\n        detail: e\n      }\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40953,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the payment session and its context."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "CreatePaymentProviderSession"
										},
										"name": "CreatePaymentProviderSession",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderSessionResponse"
												},
												"name": "PaymentProviderSessionResponse",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.initiatePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.initiatePayment"
					}
				},
				{
					"id": 40954,
					"name": "deletePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 40955,
							"name": "deletePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when a payment session is deleted, which can only happen if it isn't authorized, yet.\n\nUse this to delete or cancel the payment in the third-party service."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An error object or the response from the third-party service."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  PaymentProviderError,\n  PaymentProviderSessionResponse,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async deletePayment(\n    paymentSessionData: Record<string, unknown>\n  ): Promise<\n    PaymentProviderError | PaymentProviderSessionResponse[\"data\"]\n  > {\n    const externalId = paymentSessionData.id\n\n    try {\n      await this.client.cancelPayment(externalId)\n    } catch (e) {\n      return {\n        error: e,\n        code: \"unknown\",\n        detail: e\n      }\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40956,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the payment session. Make sure to store in it\nany helpful identification for your third-party integration."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.deletePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.deletePayment"
					}
				},
				{
					"id": 40957,
					"name": "getPaymentStatus",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 40958,
							"name": "getPaymentStatus",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method gets the status of a payment session based on the status in the third-party integration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The payment session's status."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  PaymentSessionStatus\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async getPaymentStatus(\n    paymentSessionData: Record<string, unknown>\n  ): Promise<PaymentSessionStatus> {\n    const externalId = paymentSessionData.id\n\n    try {\n      const status = await this.client.getStatus(externalId)\n\n      switch (status) {\n        case \"requires_capture\":\n          return \"authorized\"\n        case \"success\":\n          return \"captured\"\n        case \"canceled\":\n          return \"canceled\"\n        default:\n          return \"pending\"\n      }\n    } catch (e) {\n      return \"error\"\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40959,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the payment session. Make sure to store in it\nany helpful identification for your third-party integration."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/common.ts",
											"qualifiedName": "PaymentSessionStatus"
										},
										"name": "PaymentSessionStatus",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.getPaymentStatus"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.getPaymentStatus"
					}
				},
				{
					"id": 40960,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 40961,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method refunds an amount of a payment previously captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The new data to store in the payment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property, or an error object."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  PaymentProviderError,\n  PaymentProviderSessionResponse,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async refundPayment(\n    paymentData: Record<string, unknown>,\n    refundAmount: number\n  ): Promise<\n    PaymentProviderError | PaymentProviderSessionResponse[\"data\"]\n  > {\n    const externalId = paymentData.id\n\n    try {\n      const newData = await this.client.refund(\n        externalId,\n        refundAmount\n      )\n\n      return {\n        ...newData,\n        id: externalId\n      }\n    } catch (e) {\n      return {\n        error: e,\n        code: \"unknown\",\n        detail: e\n      }\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40962,
									"name": "paymentData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the payment. Make sure to store in it\nany helpful identification for your third-party integration."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 40963,
									"name": "refundAmount",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The amount to refund."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.refundPayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.refundPayment"
					}
				},
				{
					"id": 40964,
					"name": "retrievePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 40965,
							"name": "retrievePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieves the payment's data from the third-party service."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object to be stored in the payment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property, or an error object."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  PaymentProviderError,\n  PaymentProviderSessionResponse,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async retrievePayment(\n    paymentSessionData: Record<string, unknown>\n  ): Promise<\n    PaymentProviderError | PaymentProviderSessionResponse[\"data\"]\n  > {\n    const externalId = paymentSessionData.id\n\n    try {\n      return await this.client.retrieve(externalId)\n    } catch (e) {\n      return {\n        error: e,\n        code: \"unknown\",\n        detail: e\n      }\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40966,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the payment. Make sure to store in it\nany helpful identification for your third-party integration."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.retrievePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.retrievePayment"
					}
				},
				{
					"id": 40967,
					"name": "updatePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 40968,
							"name": "updatePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a payment in the third-party service that was previously initiated with the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "initiatePayment",
										"target": 40951,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object whose "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property is set in the updated payment session, or an error\nobject. Make sure to set in "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " anything useful to later retrieve the session."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  UpdatePaymentProviderSession,\n  PaymentProviderError,\n  PaymentProviderSessionResponse,\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async updatePayment(\n    context: UpdatePaymentProviderSession\n  ): Promise<PaymentProviderError | PaymentProviderSessionResponse> {\n    const {\n      amount,\n      currency_code,\n      context: customerDetails,\n      data\n    } = context\n    const externalId = data.id\n\n    try {\n      const response = await this.client.update(\n        externalId,\n        {\n          amount,\n          currency_code,\n          customerDetails\n        }\n      )\n\n      return {\n        ...response,\n        data: {\n          id: response.id\n        }\n      }\n    } catch (e) {\n      return {\n        error: e,\n        code: \"unknown\",\n        detail: e\n      }\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40969,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the payment session and its context."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "UpdatePaymentProviderSession"
										},
										"name": "UpdatePaymentProviderSession",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderSessionResponse"
												},
												"name": "PaymentProviderSessionResponse",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.updatePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.updatePayment"
					}
				},
				{
					"id": 40970,
					"name": "getWebhookActionAndData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 40971,
							"name": "getWebhookActionAndData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is executed when a webhook event is received from the third-party payment provider. Use it\nto process the action of the payment provider.\n\nLearn more in [this documentation](https://docs.medusajs.com/resources/commerce-modules/payment/webhook-events)"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The webhook result. If the "
											},
											{
												"kind": "code",
												"text": "`action`"
											},
											{
												"kind": "text",
												"text": "'s value is "
											},
											{
												"kind": "code",
												"text": "`captured`"
											},
											{
												"kind": "text",
												"text": ", the payment is captured within Medusa as well.\nIf the "
											},
											{
												"kind": "code",
												"text": "`action`"
											},
											{
												"kind": "text",
												"text": "'s value is "
											},
											{
												"kind": "code",
												"text": "`authorized`"
											},
											{
												"kind": "text",
												"text": ", the associated payment session is authorized within Medusa."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport {\n  BigNumber\n} from \"@medusajs/framework/utils\"\nimport {\n  ProviderWebhookPayload,\n  WebhookActionResult\n} from \"@medusajs/framework/types\"\n\n\nclass MyPaymentProviderService extends AbstractPaymentProvider<\n  Options\n> {\n  async getWebhookActionAndData(\n    payload: ProviderWebhookPayload[\"payload\"]\n  ): Promise<WebhookActionResult> {\n    const {\n      data,\n      rawData,\n      headers\n    } = payload\n\n    try {\n      switch(data.event_type) {\n        case \"authorized_amount\":\n          return {\n            action: \"authorized\",\n            data: {\n              session_id: (data.metadata as Record<string, any>).session_id,\n              amount: new BigNumber(data.amount as number)\n            }\n          }\n        case \"success\":\n          return {\n            action: \"captured\",\n            data: {\n              session_id: (data.metadata as Record<string, any>).session_id,\n              amount: new BigNumber(data.amount as number)\n            }\n          }\n        default:\n          return {\n            action: \"not_supported\"\n          }\n      }\n    } catch (e) {\n      return {\n        action: \"failed\",\n        data: {\n          session_id: (data.metadata as Record<string, any>).session_id,\n          amount: new BigNumber(data.amount as number)\n        }\n      }\n    }\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 40972,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The webhook event's data"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 40973,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 40974,
													"name": "data",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The parsed webhook body."
															}
														]
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Record"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "unknown"
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												},
												{
													"id": 40975,
													"name": "rawData",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The raw webhook request body."
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
																	"qualifiedName": "__global.Buffer"
																},
																"name": "Buffer",
																"package": "@types/node",
																"qualifiedName": "__global.Buffer"
															}
														]
													}
												},
												{
													"id": 40976,
													"name": "headers",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The headers of the webhook request."
															}
														]
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Record"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "unknown"
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														40974,
														40975,
														40976
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "WebhookActionResult"
										},
										"name": "WebhookActionResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.getWebhookActionAndData"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.getWebhookActionAndData"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						40929
					]
				},
				{
					"title": "Properties",
					"children": [
						40934,
						40935,
						40928
					]
				},
				{
					"title": "Methods",
					"children": [
						40921,
						40938,
						40941,
						40948,
						40951,
						40954,
						40957,
						40960,
						40964,
						40967,
						40970
					]
				}
			],
			"typeParameters": [
				{
					"id": 40977,
					"name": "TConfig",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
						"qualifiedName": "IPaymentProvider"
					},
					"name": "IPaymentProvider",
					"package": "@medusajs/types"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				40920
			]
		}
	],
	"packageName": "@medusajs/utils",
	"symbolIdMap": {
		"40916": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": ""
		},
		"40920": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider"
		},
		"40921": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.validateOptions"
		},
		"40922": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.validateOptions"
		},
		"40923": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "options"
		},
		"40928": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.identifier"
		},
		"40929": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.__constructor"
		},
		"40930": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider"
		},
		"40931": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.TConfig"
		},
		"40932": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "cradle"
		},
		"40933": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "config"
		},
		"40934": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.container"
		},
		"40935": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.config"
		},
		"40938": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.capturePayment"
		},
		"40939": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.capturePayment"
		},
		"40940": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentData"
		},
		"40941": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.authorizePayment"
		},
		"40942": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.authorizePayment"
		},
		"40943": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"40944": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "context"
		},
		"40945": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "__type"
		},
		"40946": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "__type.status"
		},
		"40947": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "__type.data"
		},
		"40948": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.cancelPayment"
		},
		"40949": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.cancelPayment"
		},
		"40950": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentData"
		},
		"40951": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.initiatePayment"
		},
		"40952": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.initiatePayment"
		},
		"40953": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "context"
		},
		"40954": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.deletePayment"
		},
		"40955": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.deletePayment"
		},
		"40956": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"40957": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getPaymentStatus"
		},
		"40958": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getPaymentStatus"
		},
		"40959": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"40960": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.refundPayment"
		},
		"40961": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.refundPayment"
		},
		"40962": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentData"
		},
		"40963": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "refundAmount"
		},
		"40964": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.retrievePayment"
		},
		"40965": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.retrievePayment"
		},
		"40966": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"40967": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.updatePayment"
		},
		"40968": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.updatePayment"
		},
		"40969": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "context"
		},
		"40970": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getWebhookActionAndData"
		},
		"40971": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getWebhookActionAndData"
		},
		"40972": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "data"
		},
		"40973": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type"
		},
		"40974": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type.data"
		},
		"40975": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type.rawData"
		},
		"40976": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type.headers"
		},
		"40977": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.TConfig"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts"
		},
		"reflections": {
			"1": 40916
		}
	}
}
