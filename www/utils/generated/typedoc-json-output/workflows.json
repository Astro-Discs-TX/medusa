{
	"id": 38033,
	"name": "workflows",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 38142,
			"name": "Hook",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Representation of a hook definition."
					}
				]
			},
			"typeParameters": [
				{
					"id": 38147,
					"name": "Name",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 38148,
					"name": "Input",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 38143,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 38144,
							"name": "__type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../../../packages/core/utils/src/orchestration/symbol.ts",
										"qualifiedName": "SymbolWorkflowHook"
									},
									"name": "OrchestrationUtils.SymbolWorkflowHook",
									"package": "@medusajs/utils",
									"qualifiedName": "SymbolWorkflowHook",
									"preferValues": true
								}
							}
						},
						{
							"id": 38145,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 38147,
								"name": "Name",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 38146,
							"name": " input",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By prefixing a key with a space, we remove it from the\nintellisense of TypeScript. This is needed because\ninput is not set at runtime. It is a type-only\nproperty to infer input data type of a hook"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 38148,
								"name": "Input",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								38144,
								38145,
								38146
							]
						}
					]
				}
			}
		},
		{
			"id": 38136,
			"name": "createHook",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 38137,
					"name": "createHook",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Expose a hook in your workflow where you can inject custom functionality as a step function.\n\nA handler hook can later be registered to consume the hook and perform custom functionality.\n\nLearn more in [this documentation](https://docs.medusajs.com/v2/advanced-development/workflows/add-workflow-hook)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A workflow hook."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport {\n  createStep,\n  createHook,\n  createWorkflow,\n  WorkflowResponse,\n} from \"@medusajs/workflows-sdk\"\nimport { createProductStep } from \"./steps/create-product\"\n\nexport const myWorkflow = createWorkflow(\n  \"my-workflow\",\n  function (input) {\n    const product = createProductStep(input)\n    const productCreatedHook = createHook(\n      \"productCreated\",\n      { productId: product.id }\n    )\n\n    return new WorkflowResponse(product, {\n      hooks: [productCreatedHook],\n    })\n  }\n)\n```"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"id": 38138,
							"name": "Name",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 38139,
							"name": "TInvokeInput",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 38140,
							"name": "name",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The hook's name. This is used when the hook handler is registered to consume the workflow."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 38138,
								"name": "Name",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 38141,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input to pass to the hook handler."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 38139,
								"name": "TInvokeInput",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 38142,
						"typeArguments": [
							{
								"type": "reference",
								"target": 38138,
								"name": "Name",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 38139,
								"name": "TInvokeInput",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						],
						"name": "Hook",
						"package": "@medusajs/workflows-sdk"
					}
				}
			]
		},
		{
			"id": 38051,
			"name": "InvokeFn",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The type of invocation function passed to a step."
					}
				]
			},
			"typeParameters": [
				{
					"id": 38056,
					"name": "TInput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the input that the function expects."
							}
						]
					}
				},
				{
					"id": 38057,
					"name": "TOutput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the output that the function returns."
							}
						]
					}
				},
				{
					"id": 38058,
					"name": "TCompensateInput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the input that the compensation function expects."
							}
						]
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 38052,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"signatures": [
						{
							"id": 38053,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The expected output based on the type parameter "
											},
											{
												"kind": "code",
												"text": "`TOutput`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38054,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 38056,
										"name": "TInput",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 38055,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 38283,
										"name": "StepExecutionContext",
										"package": "@medusajs/workflows-sdk"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"target": 38091,
										"typeArguments": [
											{
												"type": "reference",
												"target": 38057,
												"name": "TOutput",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											},
											{
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 38058,
													"name": "TCompensateInput",
													"package": "@medusajs/workflows-sdk",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "intrinsic",
													"name": "undefined"
												},
												"trueType": {
													"type": "reference",
													"target": 38057,
													"name": "TOutput",
													"package": "@medusajs/workflows-sdk",
													"refersToTypeParameter": true
												},
												"falseType": {
													"type": "reference",
													"target": 38058,
													"name": "TCompensateInput",
													"package": "@medusajs/workflows-sdk",
													"refersToTypeParameter": true
												}
											}
										],
										"name": "StepResponse",
										"package": "@medusajs/workflows-sdk"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "void"
													},
													{
														"type": "reference",
														"target": 38091,
														"typeArguments": [
															{
																"type": "reference",
																"target": 38057,
																"name": "TOutput",
																"package": "@medusajs/workflows-sdk",
																"refersToTypeParameter": true
															},
															{
																"type": "conditional",
																"checkType": {
																	"type": "reference",
																	"target": 38058,
																	"name": "TCompensateInput",
																	"package": "@medusajs/workflows-sdk",
																	"refersToTypeParameter": true
																},
																"extendsType": {
																	"type": "intrinsic",
																	"name": "undefined"
																},
																"trueType": {
																	"type": "reference",
																	"target": 38057,
																	"name": "TOutput",
																	"package": "@medusajs/workflows-sdk",
																	"refersToTypeParameter": true
																},
																"falseType": {
																	"type": "reference",
																	"target": 38058,
																	"name": "TCompensateInput",
																	"package": "@medusajs/workflows-sdk",
																	"refersToTypeParameter": true
																}
															}
														],
														"name": "StepResponse",
														"package": "@medusajs/workflows-sdk"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							}
						}
					]
				}
			}
		},
		{
			"id": 38059,
			"name": "CompensateFn",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The type of compensation function passed to a step."
					}
				]
			},
			"typeParameters": [
				{
					"id": 38064,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the argument passed to the compensation function. If not specified, then it will be the same type as the invocation function's output."
							}
						]
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 38060,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"signatures": [
						{
							"id": 38061,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "There's no expected type to be returned by the compensation function."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38062,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 38064,
												"name": "T",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								},
								{
									"id": 38063,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 38283,
										"name": "StepExecutionContext",
										"package": "@medusajs/workflows-sdk"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "unknown"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							}
						}
					]
				}
			}
		},
		{
			"id": 38065,
			"name": "ApplyStepOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 38066,
					"name": "stepName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 38067,
					"name": "stepConfig",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../packages/core/orchestration/src/transaction/types.ts",
							"qualifiedName": "TransactionStepsDefinition"
						},
						"name": "TransactionStepsDefinition",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 38068,
					"name": "input",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 38071,
						"name": "TStepInputs",
						"package": "@medusajs/workflows-sdk",
						"qualifiedName": "ApplyStepOptions.TStepInputs",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 38069,
					"name": "invokeFn",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 38051,
						"typeArguments": [
							{
								"type": "reference",
								"target": 38072,
								"name": "TInvokeInput",
								"package": "@medusajs/workflows-sdk",
								"qualifiedName": "ApplyStepOptions.TInvokeInput",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 38073,
								"name": "TInvokeResultOutput",
								"package": "@medusajs/workflows-sdk",
								"qualifiedName": "ApplyStepOptions.TInvokeResultOutput",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 38074,
								"name": "TInvokeResultCompensateInput",
								"package": "@medusajs/workflows-sdk",
								"qualifiedName": "ApplyStepOptions.TInvokeResultCompensateInput",
								"refersToTypeParameter": true
							}
						],
						"name": "InvokeFn",
						"package": "@medusajs/workflows-sdk"
					}
				},
				{
					"id": 38070,
					"name": "compensateFn",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 38059,
						"typeArguments": [
							{
								"type": "reference",
								"target": 38074,
								"name": "TInvokeResultCompensateInput",
								"package": "@medusajs/workflows-sdk",
								"qualifiedName": "ApplyStepOptions.TInvokeResultCompensateInput",
								"refersToTypeParameter": true
							}
						],
						"name": "CompensateFn",
						"package": "@medusajs/workflows-sdk"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						38066,
						38067,
						38068,
						38069,
						38070
					]
				}
			],
			"typeParameters": [
				{
					"id": 38071,
					"name": "TStepInputs",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "mapped",
						"parameter": "K",
						"parameterType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"target": 38072,
								"name": "TInvokeInput",
								"package": "@medusajs/workflows-sdk",
								"qualifiedName": "ApplyStepOptions.TInvokeInput",
								"refersToTypeParameter": true
							}
						},
						"templateType": {
							"type": "reference",
							"target": 38244,
							"typeArguments": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
											"qualifiedName": "K"
										},
										"name": "K",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									},
									"objectType": {
										"type": "reference",
										"target": 38072,
										"name": "TInvokeInput",
										"package": "@medusajs/workflows-sdk",
										"qualifiedName": "ApplyStepOptions.TInvokeInput",
										"refersToTypeParameter": true
									}
								}
							],
							"name": "WorkflowData",
							"package": "@medusajs/workflows-sdk"
						}
					}
				},
				{
					"id": 38072,
					"name": "TInvokeInput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				},
				{
					"id": 38073,
					"name": "TInvokeResultOutput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				},
				{
					"id": 38074,
					"name": "TInvokeResultCompensateInput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			]
		},
		{
			"id": 38041,
			"name": "createStep",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 38042,
					"name": "createStep",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This function creates a "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "StepFunction",
								"target": 38219,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " that can be used as a step in a workflow constructed by the "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "createWorkflow",
								"target": 38075
							},
							{
								"kind": "text",
								"text": " function."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A step function to be used in a workflow."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport {\n  createStep,\n  StepResponse,\n  StepExecutionContext,\n  WorkflowData\n} from \"@medusajs/workflows-sdk\"\n\ninterface CreateProductInput {\n  title: string\n}\n\nexport const createProductStep = createStep(\n  \"createProductStep\",\n  async function (\n    input: CreateProductInput,\n    context\n  ) {\n    const productService = context.container.resolve(\n      \"productService\"\n    )\n    const product = await productService.createProducts(input)\n    return new StepResponse({\n      product\n    }, {\n      product_id: product.id\n    })\n  },\n  async function (\n    input,\n    context\n  ) {\n    const productService = context.container.resolve(\n      \"productService\"\n    )\n    await productService.deleteProducts(input.product_id)\n  }\n)\n```"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"id": 38043,
							"name": "TInvokeInput",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the expected input parameter to the invocation function."
									}
								]
							}
						},
						{
							"id": 38044,
							"name": "TInvokeResultOutput",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the expected output parameter of the invocation function."
									}
								]
							}
						},
						{
							"id": 38045,
							"name": "TInvokeResultCompensateInput",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the expected input parameter to the compensation function."
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 38046,
							"name": "nameOrConfig",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of the step or its configuration."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 38047,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 38048,
															"name": "name",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																38048
															]
														}
													]
												}
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Omit"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/orchestration/src/transaction/types.ts",
															"qualifiedName": "TransactionStepsDefinition"
														},
														"name": "TransactionStepsDefinition",
														"package": "@medusajs/orchestration"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "next"
															},
															{
																"type": "literal",
																"value": "uuid"
															},
															{
																"type": "literal",
																"value": "action"
															}
														]
													}
												],
												"name": "Omit",
												"package": "typescript"
											}
										]
									}
								]
							}
						},
						{
							"id": 38049,
							"name": "invokeFn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An invocation function that will be executed when the workflow is executed. The function must return an instance of "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "StepResponse",
										"target": 38091,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": ". The constructor of "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "StepResponse",
										"target": 38091,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": "\naccepts the output of the step as a first argument, and optionally as a second argument the data to be passed to the compensation function as a parameter."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 38051,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38043,
										"name": "TInvokeInput",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38044,
										"name": "TInvokeResultOutput",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38045,
										"name": "TInvokeResultCompensateInput",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									}
								],
								"name": "InvokeFn",
								"package": "@medusajs/workflows-sdk"
							}
						},
						{
							"id": 38050,
							"name": "compensateFn",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A compensation function that's executed if an error occurs in the workflow. It's used to roll-back actions when errors occur.\nIt accepts as a parameter the second argument passed to the constructor of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "StepResponse",
										"target": 38091,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " instance returned by the invocation function. If the\ninvocation function doesn't pass the second argument to "
									},
									{
										"kind": "code",
										"text": "`StepResponse`"
									},
									{
										"kind": "text",
										"text": " constructor, the compensation function receives the first argument\npassed to the "
									},
									{
										"kind": "code",
										"text": "`StepResponse`"
									},
									{
										"kind": "text",
										"text": " constructor instead."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 38059,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38045,
										"name": "TInvokeResultCompensateInput",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									}
								],
								"name": "CompensateFn",
								"package": "@medusajs/workflows-sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 38219,
						"typeArguments": [
							{
								"type": "reference",
								"target": 38043,
								"name": "TInvokeInput",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 38044,
								"name": "TInvokeResultOutput",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						],
						"name": "StepFunction",
						"package": "@medusajs/workflows-sdk"
					}
				}
			]
		},
		{
			"id": 38075,
			"name": "createWorkflow",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 38076,
					"name": "createWorkflow",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This function creates a workflow with the provided name and a constructor function.\nThe constructor function builds the workflow from steps created by the "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "createStep",
								"target": 38041,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " function.\nThe returned workflow is an exported workflow of type "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "ReturnWorkflow",
								"target": 38302,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": ", meaning it's not executed right away. To execute it,\ninvoke the exported workflow, then run its "
							},
							{
								"kind": "code",
								"text": "`run`"
							},
							{
								"kind": "text",
								"text": " method."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The created workflow. You can later execute the workflow by invoking it, then using its "
									},
									{
										"kind": "code",
										"text": "`run`"
									},
									{
										"kind": "text",
										"text": " method."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport { createWorkflow } from \"@medusajs/workflows-sdk\"\nimport { MedusaRequest, MedusaResponse, Product } from \"@medusajs/medusa\"\nimport {\n  createProductStep,\n  getProductStep,\n  createPricesStep\n} from \"./steps\"\n\ninterface WorkflowInput {\n title: string\n}\n\nconst myWorkflow = createWorkflow<\n    WorkflowInput,\n    Product\n  >(\"my-workflow\", (input) => {\n   // Everything here will be executed and resolved later\n   // during the execution. Including the data access.\n\n    const product = createProductStep(input)\n    const prices = createPricesStep(product)\n    return getProductStep(product.id)\n  }\n)\n\nexport async function GET(\n  req: MedusaRequest,\n  res: MedusaResponse\n) {\n  const { result: product } = await myWorkflow(req.scope)\n    .run({\n      input: {\n        title: \"Shirt\"\n      }\n    })\n\n  res.json({\n    product\n  })\n}\n```"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"id": 38077,
							"name": "TData",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the input passed to the composer function."
									}
								]
							}
						},
						{
							"id": 38078,
							"name": "TResult",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the output returned by the composer function."
									}
								]
							}
						},
						{
							"id": 38079,
							"name": "THooks",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of hooks defined in the workflow."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"parameters": [
						{
							"id": 38080,
							"name": "nameOrConfig",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of the workflow or its configuration."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 38081,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 38082,
															"name": "name",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																38082
															]
														}
													]
												}
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/orchestration/src/transaction/types.ts",
													"qualifiedName": "TransactionModelOptions"
												},
												"name": "TransactionModelOptions",
												"package": "@medusajs/orchestration"
											}
										]
									}
								]
							}
						},
						{
							"id": 38083,
							"name": "composer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The constructor function that is executed when the "
									},
									{
										"kind": "code",
										"text": "`run`"
									},
									{
										"kind": "text",
										"text": " method in "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "ReturnWorkflow",
										"target": 38302,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " is used.\nThe function can't be an arrow function or an asynchronus function. It also can't directly manipulate data.\nYou'll have to use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "transform",
										"target": 38153
									},
									{
										"kind": "text",
										"text": " function if you need to directly manipulate data."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 38084,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 38085,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"parameters": [
												{
													"id": 38086,
													"name": "input",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 38244,
														"typeArguments": [
															{
																"type": "reference",
																"target": 38077,
																"name": "TData",
																"package": "@medusajs/workflows-sdk",
																"refersToTypeParameter": true
															}
														],
														"name": "WorkflowData",
														"package": "@medusajs/workflows-sdk"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "void"
													},
													{
														"type": "reference",
														"target": 38120,
														"typeArguments": [
															{
																"type": "reference",
																"target": 38078,
																"name": "TResult",
																"package": "@medusajs/workflows-sdk",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": 38079,
																"name": "THooks",
																"package": "@medusajs/workflows-sdk",
																"refersToTypeParameter": true
															}
														],
														"name": "WorkflowResponse",
														"package": "@medusajs/workflows-sdk"
													}
												]
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 38302,
						"typeArguments": [
							{
								"type": "reference",
								"target": 38077,
								"name": "TData",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 38078,
								"name": "TResult",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 38079,
								"name": "THooks",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						],
						"name": "ReturnWorkflow",
						"package": "@medusajs/workflows-sdk"
					}
				}
			]
		},
		{
			"id": 38091,
			"name": "StepResponse",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to create the response returned by a step. A step return its data by returning an instance of "
					},
					{
						"kind": "code",
						"text": "`StepResponse`"
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 38097,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 38098,
							"name": "new StepResponse",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The constructor of the StepResponse"
									}
								]
							},
							"typeParameters": [
								{
									"id": 38099,
									"name": "TOutput",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the output of the step."
											}
										]
									}
								},
								{
									"id": 38100,
									"name": "TCompensateInput",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the compensation input. If the step doesn't specify any compensation input, then the type of "
											},
											{
												"kind": "code",
												"text": "`TCompensateInput`"
											},
											{
												"kind": "text",
												"text": " is the same\nas that of "
											},
											{
												"kind": "code",
												"text": "`TOutput`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"default": {
										"type": "reference",
										"target": 38099,
										"name": "TOutput",
										"package": "@medusajs/workflows-sdk",
										"qualifiedName": "StepResponse.TOutput",
										"refersToTypeParameter": true
									}
								}
							],
							"parameters": [
								{
									"id": 38101,
									"name": "output",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The output of the step."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 38099,
										"name": "TOutput",
										"package": "@medusajs/workflows-sdk",
										"qualifiedName": "StepResponse.TOutput",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 38102,
									"name": "compensateInput",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The input to be passed as a parameter to the step's compensation function. If not provided, the "
											},
											{
												"kind": "code",
												"text": "`output`"
											},
											{
												"kind": "text",
												"text": " will be provided instead."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 38100,
										"name": "TCompensateInput",
										"package": "@medusajs/workflows-sdk",
										"qualifiedName": "StepResponse.TCompensateInput",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 38091,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38099,
										"name": "TOutput",
										"package": "@medusajs/workflows-sdk",
										"qualifiedName": "StepResponse.TOutput",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38100,
										"name": "TCompensateInput",
										"package": "@medusajs/workflows-sdk",
										"qualifiedName": "StepResponse.TCompensateInput",
										"refersToTypeParameter": true
									}
								],
								"name": "StepResponse",
								"package": "@medusajs/workflows-sdk"
							}
						}
					]
				},
				{
					"id": 38092,
					"name": "permanentFailure",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 38093,
							"name": "permanentFailure",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a StepResponse that indicates that the step has failed and the retry mechanism should not kick in anymore."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { Product } from \"@medusajs/medusa\"\nimport {\n  createStep,\n  StepResponse,\n  createWorkflow\n} from \"@medusajs/workflows-sdk\"\n\ninterface CreateProductInput {\n  title: string\n}\n\nexport const createProductStep = createStep(\n  \"createProductStep\",\n  async function (\n    input: CreateProductInput,\n    context\n  ) {\n    const productService = context.container.resolve(\n      \"productService\"\n    )\n\n    try {\n      const product = await productService.createProducts(input)\n      return new StepResponse({\n        product\n      }, {\n        product_id: product.id\n      })\n    } catch (e) {\n      return StepResponse.permanentFailure(`Couldn't create the product: ${e}`)\n    }\n  }\n)\n\ninterface WorkflowInput {\n title: string\n}\n\nconst myWorkflow = createWorkflow<\n    WorkflowInput,\n    Product\n  >(\"my-workflow\", (input) => {\n   // Everything here will be executed and resolved later\n   // during the execution. Including the data access.\n\n    const product = createProductStep(input)\n  }\n)\n\nmyWorkflow()\n  .run({\n    input: {\n      title: \"Shirt\"\n    }\n  })\n  .then(({ errors, result }) => {\n    if (errors.length) {\n      errors.forEach((err) => {\n        if (typeof err.error === \"object\" && \"message\" in err.error) {\n          console.error(err.error.message)\n        } else {\n          console.error(err.error)\n        }\n      })\n    }\n    console.log(result)\n  })\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38094,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional message to be logged."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Permanent failure\""
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					]
				},
				{
					"id": 38095,
					"name": "skip",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 38096,
							"name": "skip",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/orchestration/src/transaction/errors.ts",
									"qualifiedName": "SkipStepResponse"
								},
								"name": "SkipStepResponse",
								"package": "@medusajs/orchestration"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						38097
					]
				},
				{
					"title": "Methods",
					"children": [
						38092,
						38095
					]
				}
			],
			"typeParameters": [
				{
					"id": 38118,
					"name": "TOutput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the output of the step."
							}
						]
					}
				},
				{
					"id": 38119,
					"name": "TCompensateInput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the compensation input. If the step doesn't specify any compensation input, then the type of "
							},
							{
								"kind": "code",
								"text": "`TCompensateInput`"
							},
							{
								"kind": "text",
								"text": " is the same\nas that of "
							},
							{
								"kind": "code",
								"text": "`TOutput`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"default": {
						"type": "reference",
						"target": 38099,
						"name": "TOutput",
						"package": "@medusajs/workflows-sdk",
						"qualifiedName": "StepResponse.TOutput",
						"refersToTypeParameter": true
					}
				}
			]
		},
		{
			"id": 38120,
			"name": "WorkflowResponse",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Workflow response class encapsulates the return value of a workflow"
					}
				]
			},
			"children": [
				{
					"id": 38129,
					"name": "__type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "OrchestrationUtils.SymbolMedusaWorkflowResponse"
				},
				{
					"id": 38121,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 38122,
							"name": "new WorkflowResponse",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"typeParameters": [
								{
									"id": 38123,
									"name": "TResult",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								},
								{
									"id": 38124,
									"name": "THooks",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "tuple"
									}
								}
							],
							"parameters": [
								{
									"id": 38125,
									"name": "$result",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 38244,
												"typeArguments": [
													{
														"type": "reference",
														"target": 38123,
														"name": "TResult",
														"package": "@medusajs/workflows-sdk",
														"qualifiedName": "WorkflowResponse.TResult",
														"refersToTypeParameter": true
													}
												],
												"name": "WorkflowData",
												"package": "@medusajs/workflows-sdk"
											},
											{
												"type": "mapped",
												"parameter": "K",
												"parameterType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "symbol"
														}
													]
												},
												"templateType": {
													"type": "union",
													"types": [
														{
															"type": "indexedAccess",
															"indexType": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
																	"qualifiedName": "K"
																},
																"name": "K",
																"package": "@medusajs/workflows-sdk",
																"refersToTypeParameter": true
															},
															"objectType": {
																"type": "reference",
																"target": 38123,
																"name": "TResult",
																"package": "@medusajs/workflows-sdk",
																"qualifiedName": "WorkflowResponse.TResult",
																"refersToTypeParameter": true
															}
														},
														{
															"type": "reference",
															"target": 38239,
															"typeArguments": [
																{
																	"type": "indexedAccess",
																	"indexType": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
																			"qualifiedName": "K"
																		},
																		"name": "K",
																		"package": "@medusajs/workflows-sdk",
																		"refersToTypeParameter": true
																	},
																	"objectType": {
																		"type": "reference",
																		"target": 38123,
																		"name": "TResult",
																		"package": "@medusajs/workflows-sdk",
																		"qualifiedName": "WorkflowResponse.TResult",
																		"refersToTypeParameter": true
																	}
																}
															],
															"name": "WorkflowDataProperties",
															"package": "@medusajs/workflows-sdk"
														},
														{
															"type": "reference",
															"target": 38244,
															"typeArguments": [
																{
																	"type": "indexedAccess",
																	"indexType": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
																			"qualifiedName": "K"
																		},
																		"name": "K",
																		"package": "@medusajs/workflows-sdk",
																		"refersToTypeParameter": true
																	},
																	"objectType": {
																		"type": "reference",
																		"target": 38123,
																		"name": "TResult",
																		"package": "@medusajs/workflows-sdk",
																		"qualifiedName": "WorkflowResponse.TResult",
																		"refersToTypeParameter": true
																	}
																}
															],
															"name": "WorkflowData",
															"package": "@medusajs/workflows-sdk"
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 38126,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 38127,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 38128,
													"name": "hooks",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 38124,
														"name": "THooks",
														"package": "@medusajs/workflows-sdk",
														"qualifiedName": "WorkflowResponse.THooks",
														"refersToTypeParameter": true
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														38128
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 38120,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38123,
										"name": "TResult",
										"package": "@medusajs/workflows-sdk",
										"qualifiedName": "WorkflowResponse.TResult",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38124,
										"name": "THooks",
										"package": "@medusajs/workflows-sdk",
										"qualifiedName": "WorkflowResponse.THooks",
										"refersToTypeParameter": true
									}
								],
								"name": "WorkflowResponse",
								"package": "@medusajs/workflows-sdk"
							}
						}
					]
				},
				{
					"id": 38130,
					"name": "$result",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 38244,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38123,
										"name": "TResult",
										"package": "@medusajs/workflows-sdk",
										"qualifiedName": "WorkflowResponse.TResult",
										"refersToTypeParameter": true
									}
								],
								"name": "WorkflowData",
								"package": "@medusajs/workflows-sdk"
							},
							{
								"type": "mapped",
								"parameter": "K",
								"parameterType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								},
								"templateType": {
									"type": "union",
									"types": [
										{
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
													"qualifiedName": "K"
												},
												"name": "K",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											},
											"objectType": {
												"type": "reference",
												"target": 38123,
												"name": "TResult",
												"package": "@medusajs/workflows-sdk",
												"qualifiedName": "WorkflowResponse.TResult",
												"refersToTypeParameter": true
											}
										},
										{
											"type": "reference",
											"target": 38239,
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
															"qualifiedName": "K"
														},
														"name": "K",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": 38123,
														"name": "TResult",
														"package": "@medusajs/workflows-sdk",
														"qualifiedName": "WorkflowResponse.TResult",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "WorkflowDataProperties",
											"package": "@medusajs/workflows-sdk"
										},
										{
											"type": "reference",
											"target": 38244,
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
															"qualifiedName": "K"
														},
														"name": "K",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": 38123,
														"name": "TResult",
														"package": "@medusajs/workflows-sdk",
														"qualifiedName": "WorkflowResponse.TResult",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "WorkflowData",
											"package": "@medusajs/workflows-sdk"
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 38131,
					"name": "options",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 38132,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 38133,
									"name": "hooks",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 38124,
										"name": "THooks",
										"package": "@medusajs/workflows-sdk",
										"qualifiedName": "WorkflowResponse.THooks",
										"refersToTypeParameter": true
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										38133
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						38121
					]
				},
				{
					"title": "Properties",
					"children": [
						38129,
						38130,
						38131
					]
				}
			],
			"typeParameters": [
				{
					"id": 38134,
					"name": "TResult",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				},
				{
					"id": 38135,
					"name": "THooks",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "tuple"
					}
				}
			]
		},
		{
			"id": 38149,
			"name": "parallelize",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 38150,
					"name": "parallelize",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This function is used to run multiple steps in parallel. The result of each step will be returned as part of the result array."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The step results. The results are ordered in the array by the order they're passed in the function's parameter."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport {\n  createWorkflow,\n  parallelize\n} from \"@medusajs/workflows-sdk\"\nimport {\n  createProductStep,\n  getProductStep,\n  createPricesStep,\n  attachProductToSalesChannelStep\n} from \"./steps\"\n\ninterface WorkflowInput {\n  title: string\n}\n\nconst myWorkflow = createWorkflow<\n  WorkflowInput,\n  Product\n>(\"my-workflow\", (input) => {\n   const product = createProductStep(input)\n\n   const [prices, productSalesChannel] = parallelize(\n     createPricesStep(product),\n     attachProductToSalesChannelStep(product)\n   )\n\n   const id = product.id\n   return getProductStep(product.id)\n }\n)\n```"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"id": 38151,
							"name": "TResult",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the expected result."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 38244,
									"name": "WorkflowData",
									"package": "@medusajs/workflows-sdk"
								}
							}
						}
					],
					"parameters": [
						{
							"id": 38152,
							"name": "steps",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"type": {
								"type": "reference",
								"target": 38151,
								"name": "TResult",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 38151,
						"name": "TResult",
						"package": "@medusajs/workflows-sdk",
						"refersToTypeParameter": true
					}
				}
			]
		},
		{
			"id": 38153,
			"name": "transform",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 38154,
					"name": "transform",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This function transforms the output of other utility functions.\n\nFor example, if you're using the value(s) of some step(s) as an input to a later step. As you can't directly manipulate data in the  workflow constructor function passed to "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "createWorkflow",
								"target": 38075
							},
							{
								"kind": "text",
								"text": ",\nthe "
							},
							{
								"kind": "code",
								"text": "`transform`"
							},
							{
								"kind": "text",
								"text": " function provides access to the runtime value of the step(s) output so that you can manipulate them.\n\nAnother example is if you're using the runtime value of some step(s) as the output of a workflow.\n\nIf you're also retrieving the output of a hook and want to check if its value is set, you must use a workflow to get the runtime value of that hook."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "There's no expected value to be returned by the "
									},
									{
										"kind": "code",
										"text": "`transform`"
									},
									{
										"kind": "text",
										"text": " function."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport {\n  createWorkflow,\n  transform\n} from \"@medusajs/workflows-sdk\"\nimport { step1, step2 } from \"./steps\"\n\ntype WorkflowInput = {\n  name: string\n}\n\ntype WorkflowOutput = {\n  message: string\n}\n\nconst myWorkflow = createWorkflow<\n    WorkflowInput,\n    WorkflowOutput\n  >\n  (\"hello-world\", (input) => {\n    const str1 = step1(input)\n    const str2 = step2(input)\n\n    return transform({\n      str1,\n      str2\n    }, (input) => ({\n      message: `${input.str1}${input.str2}`\n    }))\n})\n```"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"id": 38155,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "object"
									},
									{
										"type": "reference",
										"target": 38244,
										"name": "WorkflowData",
										"package": "@medusajs/workflows-sdk"
									}
								]
							}
						},
						{
							"id": 38156,
							"name": "RFinal",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 38157,
							"name": "values",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The output(s) of other step functions."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 38155,
								"name": "T",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 38158,
							"name": "func",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The transform function used to perform action on the runtime values of the provided "
									},
									{
										"kind": "code",
										"text": "`values`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/transform.ts",
											"qualifiedName": "Func1"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 38155,
												"name": "T",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 38156,
												"name": "RFinal",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											}
										],
										"name": "Func1",
										"package": "@medusajs/workflows-sdk"
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 38244,
						"typeArguments": [
							{
								"type": "reference",
								"target": 38156,
								"name": "RFinal",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						],
						"name": "WorkflowData",
						"package": "@medusajs/workflows-sdk"
					}
				}
			]
		},
		{
			"id": 38210,
			"name": "StepFunctionResult",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"typeParameters": [
				{
					"id": 38214,
					"name": "TOutput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						]
					},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 38211,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"signatures": [
						{
							"id": 38212,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 38213,
									"name": "this",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 38252,
										"name": "CreateWorkflowComposerContext",
										"package": "@medusajs/workflows-sdk"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 38244,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38214,
										"name": "TOutput",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									}
								],
								"name": "WorkflowData",
								"package": "@medusajs/workflows-sdk"
							}
						}
					]
				}
			}
		},
		{
			"id": 38215,
			"name": "HookHandler",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 38216,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"signatures": [
						{
							"id": 38217,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 38218,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							}
						}
					]
				}
			}
		},
		{
			"id": 38219,
			"name": "StepFunction",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A step function to be used in a workflow."
					}
				]
			},
			"typeParameters": [
				{
					"id": 38237,
					"name": "TInput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the input of the step."
							}
						]
					}
				},
				{
					"id": 38238,
					"name": "TOutput",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of the output of the step."
							}
						]
					},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"target": {
								"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
								"qualifiedName": "KeysOfUnion"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 38237,
									"name": "TInput",
									"package": "@medusajs/workflows-sdk",
									"refersToTypeParameter": true
								}
							],
							"name": "KeysOfUnion",
							"package": "@medusajs/workflows-sdk"
						},
						"extendsType": {
							"type": "tuple"
						},
						"trueType": {
							"type": "reflection",
							"declaration": {
								"id": 38220,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"signatures": [
									{
										"id": 38221,
										"name": "__type",
										"variant": "signature",
										"kind": 4096,
										"flags": {},
										"type": {
											"type": "intersection",
											"types": [
												{
													"type": "conditional",
													"checkType": {
														"type": "reference",
														"target": 38238,
														"name": "TOutput",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													},
													"extendsType": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
																"qualifiedName": "Item"
															},
															"name": "Item",
															"package": "@medusajs/workflows-sdk",
															"refersToTypeParameter": true
														}
													},
													"trueType": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"target": {
																		"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
																		"qualifiedName": "Item"
																	},
																	"name": "Item",
																	"package": "@medusajs/workflows-sdk",
																	"refersToTypeParameter": true
																},
																{
																	"type": "reference",
																	"target": 38244,
																	"typeArguments": [
																		{
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
																				"qualifiedName": "Item"
																			},
																			"name": "Item",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		}
																	],
																	"name": "WorkflowData",
																	"package": "@medusajs/workflows-sdk"
																}
															]
														}
													},
													"falseType": {
														"type": "conditional",
														"checkType": {
															"type": "reference",
															"target": 38238,
															"name": "TOutput",
															"package": "@medusajs/workflows-sdk",
															"refersToTypeParameter": true
														},
														"extendsType": {
															"type": "intrinsic",
															"name": "object"
														},
														"trueType": {
															"type": "mapped",
															"parameter": "Key",
															"parameterType": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	},
																	{
																		"type": "intrinsic",
																		"name": "symbol"
																	}
																]
															},
															"templateType": {
																"type": "union",
																"types": [
																	{
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
																				"qualifiedName": "Key"
																			},
																			"name": "Key",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": 38238,
																			"typeArguments": [
																				{
																					"type": "unknown",
																					"name": "..."
																				}
																			],
																			"name": "TOutput",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		}
																	},
																	{
																		"type": "reference",
																		"target": 38244,
																		"typeArguments": [
																			{
																				"type": "indexedAccess",
																				"indexType": {
																					"type": "unknown",
																					"name": "..."
																				},
																				"objectType": {
																					"type": "unknown",
																					"name": "..."
																				}
																			}
																		],
																		"name": "WorkflowData",
																		"package": "@medusajs/workflows-sdk"
																	}
																]
															}
														},
														"falseType": {
															"type": "intersection",
															"types": [
																{
																	"type": "reference",
																	"target": 38238,
																	"name": "TOutput",
																	"package": "@medusajs/workflows-sdk",
																	"refersToTypeParameter": true
																},
																{
																	"type": "reference",
																	"target": 38239,
																	"typeArguments": [
																		{
																			"type": "reference",
																			"target": 38238,
																			"name": "TOutput",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		}
																	],
																	"name": "WorkflowDataProperties",
																	"package": "@medusajs/workflows-sdk"
																}
															]
														}
													}
												},
												{
													"type": "reference",
													"target": 38238,
													"name": "TOutput",
													"package": "@medusajs/workflows-sdk",
													"refersToTypeParameter": true
												},
												{
													"type": "reference",
													"target": 38239,
													"typeArguments": [
														{
															"type": "reference",
															"target": 38238,
															"name": "TOutput",
															"package": "@medusajs/workflows-sdk",
															"refersToTypeParameter": true
														}
													],
													"name": "WorkflowDataProperties",
													"package": "@medusajs/workflows-sdk"
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 38222,
														"name": "__type",
														"variant": "declaration",
														"kind": 65536,
														"flags": {},
														"children": [
															{
																"id": 38223,
																"name": "config",
																"variant": "declaration",
																"kind": 2048,
																"flags": {},
																"signatures": [
																	{
																		"id": 38224,
																		"name": "config",
																		"variant": "signature",
																		"kind": 4096,
																		"flags": {},
																		"parameters": [
																			{
																				"id": 38225,
																				"name": "config",
																				"variant": "param",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intersection",
																					"types": [
																						{
																							"type": "reflection",
																							"declaration": {
																								"id": 38226,
																								"name": "__type",
																								"variant": "declaration",
																								"kind": 65536,
																								"flags": {},
																								"children": [
																									{
																										"id": 38227,
																										"name": "name",
																										"variant": "declaration",
																										"kind": 1024,
																										"flags": {
																											"isOptional": true
																										},
																										"type": {
																											"type": "intrinsic",
																											"name": "string"
																										}
																									}
																								],
																								"groups": [
																									{
																										"title": "Properties",
																										"children": [
																											38227
																										]
																									}
																								]
																							}
																						},
																						{
																							"type": "reference",
																							"target": {
																								"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																								"qualifiedName": "Omit"
																							},
																							"typeArguments": [
																								{
																									"type": "reference",
																									"target": {
																										"sourceFileName": "../../../../packages/core/orchestration/src/transaction/types.ts",
																										"qualifiedName": "TransactionStepsDefinition"
																									},
																									"name": "TransactionStepsDefinition",
																									"package": "@medusajs/orchestration"
																								},
																								{
																									"type": "union",
																									"types": [
																										{
																											"type": "literal",
																											"value": "next"
																										},
																										{
																											"type": "literal",
																											"value": "uuid"
																										},
																										{
																											"type": "literal",
																											"value": "action"
																										}
																									]
																								}
																							],
																							"name": "Omit",
																							"package": "typescript"
																						}
																					]
																				}
																			}
																		],
																		"type": {
																			"type": "reference",
																			"target": 38244,
																			"typeArguments": [
																				{
																					"type": "reference",
																					"target": 38238,
																					"name": "TOutput",
																					"package": "@medusajs/workflows-sdk",
																					"refersToTypeParameter": true
																				}
																			],
																			"name": "WorkflowData",
																			"package": "@medusajs/workflows-sdk"
																		}
																	}
																]
															}
														],
														"groups": [
															{
																"title": "Methods",
																"children": [
																	38223
																]
															}
														]
													}
												},
												{
													"type": "reference",
													"target": {
														"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
														"qualifiedName": "StepFunctionReturnConfig"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": 38238,
															"name": "TOutput",
															"package": "@medusajs/workflows-sdk",
															"refersToTypeParameter": true
														}
													],
													"name": "StepFunctionReturnConfig",
													"package": "@medusajs/workflows-sdk"
												}
											]
										}
									}
								]
							}
						},
						"falseType": {
							"type": "reflection",
							"declaration": {
								"id": 38228,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"signatures": [
									{
										"id": 38229,
										"name": "__type",
										"variant": "signature",
										"kind": 4096,
										"flags": {},
										"parameters": [
											{
												"id": 38230,
												"name": "input",
												"variant": "param",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"target": 38237,
															"name": "TInput",
															"package": "@medusajs/workflows-sdk",
															"refersToTypeParameter": true
														},
														{
															"type": "reference",
															"target": 38244,
															"typeArguments": [
																{
																	"type": "reference",
																	"target": 38237,
																	"name": "TInput",
																	"package": "@medusajs/workflows-sdk",
																	"refersToTypeParameter": true
																}
															],
															"name": "WorkflowData",
															"package": "@medusajs/workflows-sdk"
														}
													]
												}
											}
										],
										"type": {
											"type": "intersection",
											"types": [
												{
													"type": "conditional",
													"checkType": {
														"type": "reference",
														"target": 38238,
														"name": "TOutput",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													},
													"extendsType": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
																"qualifiedName": "Item"
															},
															"name": "Item",
															"package": "@medusajs/workflows-sdk",
															"refersToTypeParameter": true
														}
													},
													"trueType": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"target": {
																		"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
																		"qualifiedName": "Item"
																	},
																	"name": "Item",
																	"package": "@medusajs/workflows-sdk",
																	"refersToTypeParameter": true
																},
																{
																	"type": "reference",
																	"target": 38244,
																	"typeArguments": [
																		{
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
																				"qualifiedName": "Item"
																			},
																			"name": "Item",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		}
																	],
																	"name": "WorkflowData",
																	"package": "@medusajs/workflows-sdk"
																}
															]
														}
													},
													"falseType": {
														"type": "conditional",
														"checkType": {
															"type": "reference",
															"target": 38238,
															"name": "TOutput",
															"package": "@medusajs/workflows-sdk",
															"refersToTypeParameter": true
														},
														"extendsType": {
															"type": "intrinsic",
															"name": "object"
														},
														"trueType": {
															"type": "mapped",
															"parameter": "Key",
															"parameterType": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	},
																	{
																		"type": "intrinsic",
																		"name": "symbol"
																	}
																]
															},
															"templateType": {
																"type": "union",
																"types": [
																	{
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
																				"qualifiedName": "Key"
																			},
																			"name": "Key",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": 38238,
																			"typeArguments": [
																				{
																					"type": "unknown",
																					"name": "..."
																				}
																			],
																			"name": "TOutput",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		}
																	},
																	{
																		"type": "reference",
																		"target": 38244,
																		"typeArguments": [
																			{
																				"type": "indexedAccess",
																				"indexType": {
																					"type": "unknown",
																					"name": "..."
																				},
																				"objectType": {
																					"type": "unknown",
																					"name": "..."
																				}
																			}
																		],
																		"name": "WorkflowData",
																		"package": "@medusajs/workflows-sdk"
																	}
																]
															}
														},
														"falseType": {
															"type": "intersection",
															"types": [
																{
																	"type": "reference",
																	"target": 38238,
																	"name": "TOutput",
																	"package": "@medusajs/workflows-sdk",
																	"refersToTypeParameter": true
																},
																{
																	"type": "reference",
																	"target": 38239,
																	"typeArguments": [
																		{
																			"type": "reference",
																			"target": 38238,
																			"name": "TOutput",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		}
																	],
																	"name": "WorkflowDataProperties",
																	"package": "@medusajs/workflows-sdk"
																}
															]
														}
													}
												},
												{
													"type": "reference",
													"target": 38238,
													"name": "TOutput",
													"package": "@medusajs/workflows-sdk",
													"refersToTypeParameter": true
												},
												{
													"type": "reference",
													"target": 38239,
													"typeArguments": [
														{
															"type": "reference",
															"target": 38238,
															"name": "TOutput",
															"package": "@medusajs/workflows-sdk",
															"refersToTypeParameter": true
														}
													],
													"name": "WorkflowDataProperties",
													"package": "@medusajs/workflows-sdk"
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 38231,
														"name": "__type",
														"variant": "declaration",
														"kind": 65536,
														"flags": {},
														"children": [
															{
																"id": 38232,
																"name": "config",
																"variant": "declaration",
																"kind": 2048,
																"flags": {},
																"signatures": [
																	{
																		"id": 38233,
																		"name": "config",
																		"variant": "signature",
																		"kind": 4096,
																		"flags": {},
																		"parameters": [
																			{
																				"id": 38234,
																				"name": "config",
																				"variant": "param",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intersection",
																					"types": [
																						{
																							"type": "reflection",
																							"declaration": {
																								"id": 38235,
																								"name": "__type",
																								"variant": "declaration",
																								"kind": 65536,
																								"flags": {},
																								"children": [
																									{
																										"id": 38236,
																										"name": "name",
																										"variant": "declaration",
																										"kind": 1024,
																										"flags": {
																											"isOptional": true
																										},
																										"type": {
																											"type": "intrinsic",
																											"name": "string"
																										}
																									}
																								],
																								"groups": [
																									{
																										"title": "Properties",
																										"children": [
																											38236
																										]
																									}
																								]
																							}
																						},
																						{
																							"type": "reference",
																							"target": {
																								"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																								"qualifiedName": "Omit"
																							},
																							"typeArguments": [
																								{
																									"type": "reference",
																									"target": {
																										"sourceFileName": "../../../../packages/core/orchestration/src/transaction/types.ts",
																										"qualifiedName": "TransactionStepsDefinition"
																									},
																									"name": "TransactionStepsDefinition",
																									"package": "@medusajs/orchestration"
																								},
																								{
																									"type": "union",
																									"types": [
																										{
																											"type": "literal",
																											"value": "next"
																										},
																										{
																											"type": "literal",
																											"value": "uuid"
																										},
																										{
																											"type": "literal",
																											"value": "action"
																										}
																									]
																								}
																							],
																							"name": "Omit",
																							"package": "typescript"
																						}
																					]
																				}
																			}
																		],
																		"type": {
																			"type": "reference",
																			"target": 38244,
																			"typeArguments": [
																				{
																					"type": "reference",
																					"target": 38238,
																					"name": "TOutput",
																					"package": "@medusajs/workflows-sdk",
																					"refersToTypeParameter": true
																				}
																			],
																			"name": "WorkflowData",
																			"package": "@medusajs/workflows-sdk"
																		}
																	}
																]
															}
														],
														"groups": [
															{
																"title": "Methods",
																"children": [
																	38232
																]
															}
														]
													}
												},
												{
													"type": "reference",
													"target": {
														"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
														"qualifiedName": "StepFunctionReturnConfig"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": 38238,
															"name": "TOutput",
															"package": "@medusajs/workflows-sdk",
															"refersToTypeParameter": true
														}
													],
													"name": "StepFunctionReturnConfig",
													"package": "@medusajs/workflows-sdk"
												}
											]
										}
									}
								]
							}
						}
					},
					{
						"type": "reference",
						"target": 38239,
						"typeArguments": [
							{
								"type": "reference",
								"target": 38238,
								"name": "TOutput",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						],
						"name": "WorkflowDataProperties",
						"package": "@medusajs/workflows-sdk"
					}
				]
			}
		},
		{
			"id": 38239,
			"name": "WorkflowDataProperties",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"typeParameters": [
				{
					"id": 38243,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 38240,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 38241,
							"name": "__type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 38242,
							"name": "__step__",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								38241,
								38242
							]
						}
					]
				}
			}
		},
		{
			"id": 38244,
			"name": "WorkflowData",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This type is used to encapsulate the input or output type of all utils."
					}
				]
			},
			"typeParameters": [
				{
					"id": 38251,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of a step's input or result."
							}
						]
					},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"target": 38251,
							"name": "T",
							"package": "@medusajs/workflows-sdk",
							"refersToTypeParameter": true
						},
						"extendsType": {
							"type": "array",
							"elementType": {
								"type": "inferred",
								"name": "Item"
							}
						},
						"trueType": {
							"type": "array",
							"elementType": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
											"qualifiedName": "Item"
										},
										"name": "Item",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38244,
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
													"qualifiedName": "Item"
												},
												"name": "Item",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											}
										],
										"name": "WorkflowData",
										"package": "@medusajs/workflows-sdk"
									}
								]
							}
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"target": 38251,
								"name": "T",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							},
							"extendsType": {
								"type": "intrinsic",
								"name": "object"
							},
							"trueType": {
								"type": "mapped",
								"parameter": "Key",
								"parameterType": {
									"type": "typeOperator",
									"operator": "keyof",
									"target": {
										"type": "reference",
										"target": 38251,
										"name": "T",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									}
								},
								"templateType": {
									"type": "union",
									"types": [
										{
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
													"qualifiedName": "Key"
												},
												"name": "Key",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											},
											"objectType": {
												"type": "reference",
												"target": 38251,
												"name": "T",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											}
										},
										{
											"type": "reference",
											"target": 38244,
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
															"qualifiedName": "Key"
														},
														"name": "Key",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": 38251,
														"name": "T",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "WorkflowData",
											"package": "@medusajs/workflows-sdk"
										}
									]
								}
							},
							"falseType": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"target": 38251,
										"name": "T",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38239,
										"typeArguments": [
											{
												"type": "reference",
												"target": 38251,
												"name": "T",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											}
										],
										"name": "WorkflowDataProperties",
										"package": "@medusajs/workflows-sdk"
									}
								]
							}
						}
					},
					{
						"type": "reference",
						"target": 38251,
						"name": "T",
						"package": "@medusajs/workflows-sdk",
						"refersToTypeParameter": true
					},
					{
						"type": "reference",
						"target": 38239,
						"typeArguments": [
							{
								"type": "reference",
								"target": 38251,
								"name": "T",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						],
						"name": "WorkflowDataProperties",
						"package": "@medusajs/workflows-sdk"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 38245,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 38246,
									"name": "config",
									"variant": "declaration",
									"kind": 2048,
									"flags": {},
									"signatures": [
										{
											"id": 38247,
											"name": "config",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"parameters": [
												{
													"id": 38248,
													"name": "config",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intersection",
														"types": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 38249,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 38250,
																			"name": "name",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [
																				38250
																			]
																		}
																	]
																}
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Omit"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../../../packages/core/orchestration/src/transaction/types.ts",
																			"qualifiedName": "TransactionStepsDefinition"
																		},
																		"name": "TransactionStepsDefinition",
																		"package": "@medusajs/orchestration"
																	},
																	{
																		"type": "union",
																		"types": [
																			{
																				"type": "literal",
																				"value": "next"
																			},
																			{
																				"type": "literal",
																				"value": "uuid"
																			},
																			{
																				"type": "literal",
																				"value": "action"
																			}
																		]
																	}
																],
																"name": "Omit",
																"package": "typescript"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 38244,
												"typeArguments": [
													{
														"type": "reference",
														"target": 38251,
														"name": "T",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													}
												],
												"name": "WorkflowData",
												"package": "@medusajs/workflows-sdk"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"children": [
										38246
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 38252,
			"name": "CreateWorkflowComposerContext",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 38253,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 38254,
							"name": "__type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 38255,
							"name": "hooks_",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 38256,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 38257,
											"name": "declared",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 38258,
											"name": "registered",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												38257,
												38258
											]
										}
									]
								}
							}
						},
						{
							"id": 38259,
							"name": "hooksCallback_",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": 38215,
										"name": "HookHandler",
										"package": "@medusajs/workflows-sdk"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 38260,
							"name": "workflowId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 38261,
							"name": "flow",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/orchestration/src/transaction/orchestrator-builder.ts",
									"qualifiedName": "OrchestratorBuilder"
								},
								"name": "OrchestratorBuilder",
								"package": "@medusajs/orchestration"
							}
						},
						{
							"id": 38262,
							"name": "handlers",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/orchestration/src/workflow/workflow-manager.ts",
									"qualifiedName": "WorkflowHandler"
								},
								"name": "WorkflowHandler",
								"package": "@medusajs/orchestration"
							}
						},
						{
							"id": 38263,
							"name": "stepBinder",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 38264,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 38265,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"typeParameters": [
												{
													"id": 38267,
													"name": "TOutput",
													"variant": "typeParam",
													"kind": 131072,
													"flags": {},
													"default": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											],
											"parameters": [
												{
													"id": 38266,
													"name": "fn",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 38210,
														"name": "StepFunctionResult",
														"package": "@medusajs/workflows-sdk"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 38244,
												"typeArguments": [
													{
														"type": "reference",
														"target": 38267,
														"name": "TOutput",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													}
												],
												"name": "WorkflowData",
												"package": "@medusajs/workflows-sdk"
											}
										}
									]
								}
							}
						},
						{
							"id": 38268,
							"name": "hookBinder",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 38269,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 38270,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"parameters": [
												{
													"id": 38271,
													"name": "name",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 38272,
													"name": "fn",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 38273,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"signatures": [
																{
																	"id": 38274,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 38215,
																		"name": "HookHandler",
																		"package": "@medusajs/workflows-sdk"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 38275,
							"name": "parallelizeBinder",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 38276,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 38277,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"typeParameters": [
												{
													"id": 38282,
													"name": "TOutput",
													"variant": "typeParam",
													"kind": 131072,
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": 38244,
															"name": "WorkflowData",
															"package": "@medusajs/workflows-sdk"
														}
													},
													"default": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": 38244,
															"name": "WorkflowData",
															"package": "@medusajs/workflows-sdk"
														}
													}
												}
											],
											"parameters": [
												{
													"id": 38278,
													"name": "fn",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 38279,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"signatures": [
																{
																	"id": 38280,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"parameters": [
																		{
																			"id": 38281,
																			"name": "this",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"target": 38252,
																				"name": "CreateWorkflowComposerContext",
																				"package": "@medusajs/workflows-sdk"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": 38282,
																		"name": "TOutput",
																		"package": "@medusajs/workflows-sdk",
																		"refersToTypeParameter": true
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 38282,
												"name": "TOutput",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								38254,
								38255,
								38259,
								38260,
								38261,
								38262,
								38263,
								38268,
								38275
							]
						}
					]
				}
			}
		},
		{
			"id": 38283,
			"name": "StepExecutionContext",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The step's context."
					}
				]
			},
			"children": [
				{
					"id": 38284,
					"name": "workflowId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the workflow."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 38285,
					"name": "attempt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The attempt number of the step."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 38286,
					"name": "idempotencyKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The idempoency key of the step."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 38287,
					"name": "stepName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The name of the step."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 38288,
					"name": "action",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The action of the step."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "invoke"
							},
							{
								"type": "literal",
								"value": "compensate"
							}
						]
					}
				},
				{
					"id": 38289,
					"name": "container",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The container used to access resources, such as services, in the step."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../packages/core/types/src/common/medusa-container.ts",
							"qualifiedName": "MedusaContainer"
						},
						"name": "MedusaContainer",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 38290,
					"name": "metadata",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Metadata passed in the input."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../packages/core/orchestration/src/transaction/distributed-transaction.ts",
							"qualifiedName": "TransactionMetadata"
						},
						"name": "TransactionMetadata",
						"package": "@medusajs/orchestration"
					}
				},
				{
					"id": 38291,
					"name": "context",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "inline-tag",
								"tag": "@inheritDoc",
								"text": "types!Context"
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../packages/core/types/src/shared-context.ts",
							"qualifiedName": "Context"
						},
						"name": "Context",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 38292,
					"name": "eventGroupId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the ID of the group to aggregate the events to be emitted at a later point."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 38293,
					"name": "transactionId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the ID of the current transaction."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						38284,
						38285,
						38286,
						38287,
						38288,
						38289,
						38290,
						38291,
						38292,
						38293
					]
				}
			]
		},
		{
			"id": 38294,
			"name": "WorkflowTransactionContext",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": 38283,
						"name": "StepExecutionContext",
						"package": "@medusajs/workflows-sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../packages/core/orchestration/src/transaction/distributed-transaction.ts",
							"qualifiedName": "TransactionContext"
						},
						"name": "OriginalWorkflowTransactionContext",
						"package": "@medusajs/orchestration",
						"qualifiedName": "TransactionContext"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 38295,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 38296,
									"name": "invoke",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 38297,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"indexSignatures": [
												{
													"id": 38298,
													"name": "__index",
													"variant": "signature",
													"kind": 8192,
													"flags": {},
													"parameters": [
														{
															"id": 38299,
															"name": "key",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 38300,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 38301,
																	"name": "output",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		38301
																	]
																}
															]
														}
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										38296
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 38302,
			"name": "ReturnWorkflow",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An exported workflow, which is the type of a workflow constructed by the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "createWorkflow",
						"target": 38075
					},
					{
						"kind": "text",
						"text": " function. The exported workflow can be invoked to create\nan executable workflow, optionally within a specified container. So, to execute the workflow, you must invoke the exported workflow, then run the\n"
					},
					{
						"kind": "code",
						"text": "`run`"
					},
					{
						"kind": "text",
						"text": " method of the exported workflow."
					}
				],
				"blockTags": [
					{
						"tag": "@example",
						"content": [
							{
								"kind": "text",
								"text": "To execute a workflow:\n\n"
							},
							{
								"kind": "code",
								"text": "```ts\nmyWorkflow()\n  .run({\n    input: {\n      name: \"John\"\n    }\n  })\n  .then(({ result }) => {\n    console.log(result)\n  })\n```"
							},
							{
								"kind": "text",
								"text": "\n\nTo specify the container of the workflow, you can pass it as an argument to the call of the exported workflow. This is necessary when executing the workflow\nwithin a Medusa resource such as an API Route or a Subscriber.\n\nFor example:\n\n"
							},
							{
								"kind": "code",
								"text": "```ts\nimport type {\n  MedusaRequest,\n  MedusaResponse\n} from \"@medusajs/medusa\";\nimport myWorkflow from \"../../../workflows/hello-world\";\n\nexport async function GET(\n  req: MedusaRequest,\n  res: MedusaResponse\n) {\n  const { result } = await myWorkflow(req.scope)\n    .run({\n      input: {\n        name: req.query.name as string\n      }\n    })\n\n  res.send(result)\n}\n```"
							}
						]
					}
				]
			},
			"typeParameters": [
				{
					"id": 38332,
					"name": "TData",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				},
				{
					"id": 38333,
					"name": "TResult",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				},
				{
					"id": 38334,
					"name": "THooks",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 38303,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"signatures": [
								{
									"id": 38304,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 38305,
											"name": "TDataOverride",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"default": {
												"type": "intrinsic",
												"name": "undefined"
											}
										},
										{
											"id": 38306,
											"name": "TResultOverride",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"default": {
												"type": "intrinsic",
												"name": "undefined"
											}
										}
									],
									"parameters": [
										{
											"id": 38307,
											"name": "container",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/common/medusa-container.ts",
															"qualifiedName": "MedusaContainer"
														},
														"name": "MedusaContainer",
														"package": "@medusajs/types"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reflection",
															"declaration": {
																"id": 38308,
																"name": "__type",
																"variant": "declaration",
																"kind": 65536,
																"flags": {},
																"children": [
																	{
																		"id": 38309,
																		"name": "__joinerConfig",
																		"variant": "declaration",
																		"kind": 1024,
																		"flags": {},
																		"type": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../../../../packages/core/types/src/modules-sdk/index.ts",
																				"qualifiedName": "ModuleJoinerConfig"
																			},
																			"name": "ModuleJoinerConfig",
																			"package": "@medusajs/types"
																		}
																	},
																	{
																		"id": 38310,
																		"name": "__definition",
																		"variant": "declaration",
																		"kind": 1024,
																		"flags": {},
																		"type": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../../../../packages/core/types/src/modules-sdk/index.ts",
																				"qualifiedName": "ModuleDefinition"
																			},
																			"name": "ModuleDefinition",
																			"package": "@medusajs/types"
																		}
																	}
																],
																"groups": [
																	{
																		"title": "Properties",
																		"children": [
																			38309,
																			38310
																		]
																	}
																]
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Omit"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/orchestration/src/workflow/local-workflow.ts",
															"qualifiedName": "LocalWorkflow"
														},
														"name": "LocalWorkflow",
														"package": "@medusajs/orchestration"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "run"
															},
															{
																"type": "literal",
																"value": "registerStepSuccess"
															},
															{
																"type": "literal",
																"value": "registerStepFailure"
															},
															{
																"type": "literal",
																"value": "cancel"
															}
														]
													}
												],
												"name": "Omit",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/workflows-sdk/src/helper/type.ts",
													"qualifiedName": "ExportedWorkflow"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 38332,
														"name": "TData",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": 38333,
														"name": "TResult",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": 38305,
														"name": "TDataOverride",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": 38306,
														"name": "TResultOverride",
														"package": "@medusajs/workflows-sdk",
														"refersToTypeParameter": true
													}
												],
												"name": "ExportedWorkflow",
												"package": "@medusajs/workflows-sdk"
											}
										]
									}
								}
							]
						}
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 38311,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 38312,
									"name": "runAsStep",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "This method executes the workflow as a step. Useful when running a workflow within another.\n\nLearn more in [this documentation](https://docs.medusajs.com/v2/advanced-development/workflows/execute-another-workflow)."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 38313,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 38314,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"comment": {
														"summary": [],
														"blockTags": [
															{
																"tag": "@returns",
																"content": [
																	{
																		"kind": "text",
																		"text": "The workflow's result"
																	}
																]
															}
														]
													},
													"parameters": [
														{
															"id": 38315,
															"name": "{\n    input,\n  }",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 38316,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 38317,
																			"name": "input",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {},
																			"comment": {
																				"summary": [
																					{
																						"kind": "text",
																						"text": "The workflow's input."
																					}
																				]
																			},
																			"type": {
																				"type": "union",
																				"types": [
																					{
																						"type": "reference",
																						"target": 38332,
																						"name": "TData",
																						"package": "@medusajs/workflows-sdk",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": 38244,
																						"typeArguments": [
																							{
																								"type": "reference",
																								"target": 38332,
																								"name": "TData",
																								"package": "@medusajs/workflows-sdk",
																								"refersToTypeParameter": true
																							}
																						],
																						"name": "WorkflowData",
																						"package": "@medusajs/workflows-sdk"
																					}
																				]
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [
																				38317
																			]
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "ReturnType"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 38219,
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 38332,
																		"name": "TData",
																		"package": "@medusajs/workflows-sdk",
																		"refersToTypeParameter": true
																	},
																	{
																		"type": "reference",
																		"target": 38333,
																		"name": "TResult",
																		"package": "@medusajs/workflows-sdk",
																		"refersToTypeParameter": true
																	}
																],
																"name": "StepFunction",
																"package": "@medusajs/workflows-sdk"
															}
														],
														"name": "ReturnType",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 38318,
									"name": "run",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "This method executes a workflow."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 38319,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 38320,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"comment": {
														"summary": [],
														"blockTags": [
															{
																"tag": "@returns",
																"content": [
																	{
																		"kind": "text",
																		"text": "Details of the workflow's execution, including its result."
																	}
																]
															}
														]
													},
													"typeParameters": [
														{
															"id": 38322,
															"name": "TDataOverride",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {},
															"default": {
																"type": "intrinsic",
																"name": "undefined"
															}
														},
														{
															"id": 38323,
															"name": "TResultOverride",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {},
															"default": {
																"type": "intrinsic",
																"name": "undefined"
															}
														}
													],
													"parameters": [
														{
															"id": 38321,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isRest": true
															},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The options to execute the workflow."
																	}
																]
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Parameters"
																},
																"typeArguments": [
																	{
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "literal",
																			"value": "run"
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../../../../packages/core/workflows-sdk/src/helper/type.ts",
																				"qualifiedName": "ExportedWorkflow"
																			},
																			"typeArguments": [
																				{
																					"type": "reference",
																					"target": 38332,
																					"name": "TData",
																					"package": "@medusajs/workflows-sdk",
																					"refersToTypeParameter": true
																				},
																				{
																					"type": "reference",
																					"target": 38333,
																					"name": "TResult",
																					"package": "@medusajs/workflows-sdk",
																					"refersToTypeParameter": true
																				},
																				{
																					"type": "reference",
																					"target": 38322,
																					"name": "TDataOverride",
																					"package": "@medusajs/workflows-sdk",
																					"refersToTypeParameter": true
																				},
																				{
																					"type": "reference",
																					"target": 38323,
																					"name": "TResultOverride",
																					"package": "@medusajs/workflows-sdk",
																					"refersToTypeParameter": true
																				}
																			],
																			"name": "ExportedWorkflow",
																			"package": "@medusajs/workflows-sdk"
																		}
																	}
																],
																"name": "Parameters",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "ReturnType"
														},
														"typeArguments": [
															{
																"type": "indexedAccess",
																"indexType": {
																	"type": "literal",
																	"value": "run"
																},
																"objectType": {
																	"type": "reference",
																	"target": {
																		"sourceFileName": "../../../../packages/core/workflows-sdk/src/helper/type.ts",
																		"qualifiedName": "ExportedWorkflow"
																	},
																	"typeArguments": [
																		{
																			"type": "reference",
																			"target": 38332,
																			"name": "TData",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		},
																		{
																			"type": "reference",
																			"target": 38333,
																			"name": "TResult",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		},
																		{
																			"type": "reference",
																			"target": 38322,
																			"name": "TDataOverride",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		},
																		{
																			"type": "reference",
																			"target": 38323,
																			"name": "TResultOverride",
																			"package": "@medusajs/workflows-sdk",
																			"refersToTypeParameter": true
																		}
																	],
																	"name": "ExportedWorkflow",
																	"package": "@medusajs/workflows-sdk"
																}
															}
														],
														"name": "ReturnType",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 38324,
									"name": "getName",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "This method retrieves the workflow's name."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 38325,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 38326,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									}
								},
								{
									"id": 38327,
									"name": "config",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "This method sets the workflow's configurations."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 38328,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 38329,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 38330,
															"name": "config",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../../packages/core/orchestration/src/transaction/types.ts",
																	"qualifiedName": "TransactionModelOptions"
																},
																"name": "TransactionModelOptions",
																"package": "@medusajs/orchestration"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 38331,
									"name": "hooks",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The workflow's exposed hooks, used to register a handler to consume the hook.\n\nLearn more in [this documentation](https://docs.medusajs.com/v2/advanced-development/workflows/add-workflow-hook#how-to-consume-a-hook)."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
											"qualifiedName": "ConvertHooksToFunctions"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 38334,
												"name": "THooks",
												"package": "@medusajs/workflows-sdk",
												"refersToTypeParameter": true
											}
										],
										"name": "ConvertHooksToFunctions",
										"package": "@medusajs/workflows-sdk"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										38312,
										38318,
										38324,
										38327,
										38331
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 38335,
			"name": "UnwrapWorkflowInputDataType",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Extract the raw type of the expected input data of a workflow."
					}
				],
				"blockTags": [
					{
						"tag": "@example",
						"content": [
							{
								"kind": "code",
								"text": "```ts\ntype WorkflowInputData = UnwrapWorkflowInputDataType<typeof myWorkflow>\n```"
							}
						]
					}
				]
			},
			"typeParameters": [
				{
					"id": 38336,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 38302,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "ReturnWorkflow",
						"package": "@medusajs/workflows-sdk"
					}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": 38336,
					"name": "T",
					"package": "@medusajs/workflows-sdk",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "reference",
					"target": 38302,
					"typeArguments": [
						{
							"type": "inferred",
							"name": "TData"
						},
						{
							"type": "inferred",
							"name": "R"
						},
						{
							"type": "inferred",
							"name": "THooks"
						}
					],
					"name": "ReturnWorkflow",
					"package": "@medusajs/workflows-sdk"
				},
				"trueType": {
					"type": "reference",
					"target": {
						"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
						"qualifiedName": "TData"
					},
					"name": "TData",
					"package": "@medusajs/workflows-sdk",
					"refersToTypeParameter": true
				},
				"falseType": {
					"type": "intrinsic",
					"name": "never"
				}
			}
		},
		{
			"id": 38337,
			"name": "when",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 38338,
					"name": "when",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"typeParameters": [
						{
							"id": 38339,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "object"
									},
									{
										"type": "reference",
										"target": 38244,
										"name": "WorkflowData",
										"package": "@medusajs/workflows-sdk"
									}
								]
							}
						},
						{
							"id": 38340,
							"name": "Then",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Function"
								},
								"name": "Function",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 38341,
							"name": "values",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 38339,
								"name": "T",
								"package": "@medusajs/workflows-sdk",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 38342,
							"name": "condition",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/when.ts",
									"qualifiedName": "ConditionFunction"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 38339,
										"name": "T",
										"package": "@medusajs/workflows-sdk",
										"refersToTypeParameter": true
									}
								],
								"name": "ConditionFunction",
								"package": "@medusajs/workflows-sdk"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 38343,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 38344,
									"name": "then",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/when.ts",
											"qualifiedName": "ThenFunc"
										},
										"name": "ThenFunc",
										"package": "@medusajs/workflows-sdk"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										38344
									]
								}
							]
						}
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				38091,
				38120
			]
		},
		{
			"title": "Interfaces",
			"children": [
				38065,
				38283
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				38142,
				38051,
				38059,
				38210,
				38215,
				38219,
				38239,
				38244,
				38252,
				38294,
				38302,
				38335
			]
		},
		{
			"title": "Functions",
			"children": [
				38136,
				38041,
				38075,
				38149,
				38153,
				38337
			]
		}
	],
	"packageName": "@medusajs/workflows-sdk",
	"symbolIdMap": {
		"38033": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/index.ts",
			"qualifiedName": ""
		},
		"38041": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "createStep"
		},
		"38042": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "createStep"
		},
		"38043": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TInvokeInput"
		},
		"38044": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TInvokeResultOutput"
		},
		"38045": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TInvokeResultCompensateInput"
		},
		"38046": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "nameOrConfig"
		},
		"38047": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "__type"
		},
		"38048": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "__type.name"
		},
		"38049": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "invokeFn"
		},
		"38050": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "compensateFn"
		},
		"38051": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "InvokeFn"
		},
		"38052": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "__type"
		},
		"38053": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "__type"
		},
		"38054": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "input"
		},
		"38055": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "context"
		},
		"38056": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TInput"
		},
		"38057": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TOutput"
		},
		"38058": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "TCompensateInput"
		},
		"38059": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "CompensateFn"
		},
		"38060": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "__type"
		},
		"38061": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "__type"
		},
		"38062": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "input"
		},
		"38063": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "context"
		},
		"38064": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "T"
		},
		"38065": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "ApplyStepOptions"
		},
		"38066": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "ApplyStepOptions.stepName"
		},
		"38067": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "ApplyStepOptions.stepConfig"
		},
		"38068": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "ApplyStepOptions.input"
		},
		"38069": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "ApplyStepOptions.invokeFn"
		},
		"38070": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "ApplyStepOptions.compensateFn"
		},
		"38071": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "ApplyStepOptions.TStepInputs"
		},
		"38072": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "ApplyStepOptions.TInvokeInput"
		},
		"38073": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "ApplyStepOptions.TInvokeResultOutput"
		},
		"38074": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-step.ts",
			"qualifiedName": "ApplyStepOptions.TInvokeResultCompensateInput"
		},
		"38075": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "createWorkflow"
		},
		"38076": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "createWorkflow"
		},
		"38077": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "TData"
		},
		"38078": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "TResult"
		},
		"38079": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "THooks"
		},
		"38080": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "nameOrConfig"
		},
		"38081": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"38082": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type.name"
		},
		"38083": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "composer"
		},
		"38084": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"38085": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "__type"
		},
		"38086": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-workflow.ts",
			"qualifiedName": "input"
		},
		"38091": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse"
		},
		"38092": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.permanentFailure"
		},
		"38093": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.permanentFailure"
		},
		"38094": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "message"
		},
		"38095": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.skip"
		},
		"38096": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.skip"
		},
		"38097": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.__constructor"
		},
		"38098": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse"
		},
		"38099": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.TOutput"
		},
		"38100": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.TCompensateInput"
		},
		"38101": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "output"
		},
		"38102": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "compensateInput"
		},
		"38118": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.TOutput"
		},
		"38119": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/step-response.ts",
			"qualifiedName": "StepResponse.TCompensateInput"
		},
		"38120": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "WorkflowResponse"
		},
		"38121": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "WorkflowResponse.__constructor"
		},
		"38122": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "WorkflowResponse"
		},
		"38123": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "WorkflowResponse.TResult"
		},
		"38124": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "WorkflowResponse.THooks"
		},
		"38125": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "$result"
		},
		"38126": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "options"
		},
		"38127": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "__type"
		},
		"38128": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "__type.hooks"
		},
		"38129": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "WorkflowResponse.__type"
		},
		"38130": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "WorkflowResponse.$result"
		},
		"38131": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "WorkflowResponse.options"
		},
		"38132": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "__type"
		},
		"38133": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "__type.hooks"
		},
		"38134": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "WorkflowResponse.TResult"
		},
		"38135": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/helpers/workflow-response.ts",
			"qualifiedName": "WorkflowResponse.THooks"
		},
		"38136": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "createHook"
		},
		"38137": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "createHook"
		},
		"38138": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "Name"
		},
		"38139": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "TInvokeInput"
		},
		"38140": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "name"
		},
		"38141": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "input"
		},
		"38142": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "Hook"
		},
		"38143": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "__type"
		},
		"38144": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "__type.__type"
		},
		"38145": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "__type.name"
		},
		"38146": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "__type. input"
		},
		"38147": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "Name"
		},
		"38148": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/create-hook.ts",
			"qualifiedName": "Input"
		},
		"38149": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/parallelize.ts",
			"qualifiedName": "parallelize"
		},
		"38150": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/parallelize.ts",
			"qualifiedName": "parallelize"
		},
		"38151": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/parallelize.ts",
			"qualifiedName": "TResult"
		},
		"38152": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/parallelize.ts",
			"qualifiedName": "steps"
		},
		"38153": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "transform"
		},
		"38154": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "transform"
		},
		"38155": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "T"
		},
		"38156": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "RFinal"
		},
		"38157": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "values"
		},
		"38158": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/transform.ts",
			"qualifiedName": "func"
		},
		"38210": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepFunctionResult"
		},
		"38211": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38212": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38213": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "this"
		},
		"38214": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TOutput"
		},
		"38215": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "HookHandler"
		},
		"38216": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38217": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38218": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "args"
		},
		"38219": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepFunction"
		},
		"38220": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38221": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38222": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38223": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.config"
		},
		"38224": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.config"
		},
		"38225": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "config"
		},
		"38226": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38227": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.name"
		},
		"38228": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38229": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38230": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "input"
		},
		"38231": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38232": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.config"
		},
		"38233": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.config"
		},
		"38234": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "config"
		},
		"38235": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38236": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.name"
		},
		"38237": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TInput"
		},
		"38238": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TOutput"
		},
		"38239": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "WorkflowDataProperties"
		},
		"38240": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38241": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.__type"
		},
		"38242": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.__step__"
		},
		"38243": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "T"
		},
		"38244": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "WorkflowData"
		},
		"38245": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38246": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.config"
		},
		"38247": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.config"
		},
		"38248": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "config"
		},
		"38249": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38250": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.name"
		},
		"38251": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "T"
		},
		"38252": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "CreateWorkflowComposerContext"
		},
		"38253": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38254": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.__type"
		},
		"38255": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.hooks_"
		},
		"38256": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38257": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.declared"
		},
		"38258": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.registered"
		},
		"38259": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.hooksCallback_"
		},
		"38260": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.workflowId"
		},
		"38261": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.flow"
		},
		"38262": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.handlers"
		},
		"38263": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.stepBinder"
		},
		"38264": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38265": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38266": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "fn"
		},
		"38267": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TOutput"
		},
		"38268": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.hookBinder"
		},
		"38269": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38270": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38271": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "name"
		},
		"38272": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "fn"
		},
		"38273": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38274": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38275": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.parallelizeBinder"
		},
		"38276": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38277": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38278": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "fn"
		},
		"38279": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38280": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38281": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "this"
		},
		"38282": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TOutput"
		},
		"38283": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext"
		},
		"38284": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.workflowId"
		},
		"38285": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.attempt"
		},
		"38286": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.idempotencyKey"
		},
		"38287": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.stepName"
		},
		"38288": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.action"
		},
		"38289": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.container"
		},
		"38290": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.metadata"
		},
		"38291": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.context"
		},
		"38292": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.eventGroupId"
		},
		"38293": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "StepExecutionContext.transactionId"
		},
		"38294": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "WorkflowTransactionContext"
		},
		"38295": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38296": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.invoke"
		},
		"38297": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38298": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.__index"
		},
		"38300": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38301": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.output"
		},
		"38302": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "ReturnWorkflow"
		},
		"38303": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38304": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38305": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TDataOverride"
		},
		"38306": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TResultOverride"
		},
		"38307": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "container"
		},
		"38308": {
			"sourceFileName": "../../../../packages/core/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"38309": {
			"sourceFileName": "../../../../packages/core/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.__joinerConfig"
		},
		"38310": {
			"sourceFileName": "../../../../packages/core/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.__definition"
		},
		"38311": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38312": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.runAsStep"
		},
		"38313": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38314": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38316": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38317": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.input"
		},
		"38318": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.run"
		},
		"38319": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38320": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38321": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "args"
		},
		"38322": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TDataOverride"
		},
		"38323": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TResultOverride"
		},
		"38324": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.getName"
		},
		"38325": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38326": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38327": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.config"
		},
		"38328": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38329": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type"
		},
		"38330": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "config"
		},
		"38331": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "__type.hooks"
		},
		"38332": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TData"
		},
		"38333": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "TResult"
		},
		"38334": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "THooks"
		},
		"38335": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "UnwrapWorkflowInputDataType"
		},
		"38336": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/type.ts",
			"qualifiedName": "T"
		},
		"38337": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/when.ts",
			"qualifiedName": "when"
		},
		"38338": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/when.ts",
			"qualifiedName": "when"
		},
		"38339": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/when.ts",
			"qualifiedName": "T"
		},
		"38340": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/when.ts",
			"qualifiedName": "Then"
		},
		"38341": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/when.ts",
			"qualifiedName": "values"
		},
		"38342": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/when.ts",
			"qualifiedName": "condition"
		},
		"38343": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/when.ts",
			"qualifiedName": "__type"
		},
		"38344": {
			"sourceFileName": "../../../../packages/core/workflows-sdk/src/utils/composer/when.ts",
			"qualifiedName": "__type.then"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/workflows-sdk/src/utils/composer/index.ts"
		},
		"reflections": {
			"1": 38033
		}
	}
}